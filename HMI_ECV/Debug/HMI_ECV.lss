
HMI_ECV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00003e72  00003f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080013e  0080013e  00003fe4  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  00003fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001499  00000000  00000000  0000753c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000089d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c568  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d123  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__vector_3>
      10:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__vector_8>
      24:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <main>
      8a:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e2       	ldi	r26, 0x2D	; 45
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e2       	ldi	r24, 0x2D	; 45
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PasswordFun>:
union fullPass firstPass;
union fullPass secPass;
uint8 option;

void PasswordFun(union fullPass *passvar,char * string)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a4 97       	sbiw	r28, 0x24	; 36
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a a3       	std	Y+34, r25	; 0x22
     b5c:	89 a3       	std	Y+33, r24	; 0x21
     b5e:	7c a3       	std	Y+36, r23	; 0x24
     b60:	6b a3       	std	Y+35, r22	; 0x23
	uint8 password =0;
     b62:	18 a2       	std	Y+32, r1	; 0x20
	uint8 counter = 0;
     b64:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16 passComb = 1000;
     b66:	88 ee       	ldi	r24, 0xE8	; 232
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	9e 8f       	std	Y+30, r25	; 0x1e
     b6c:	8d 8f       	std	Y+29, r24	; 0x1d
	(*passvar).fullPass = 0;
     b6e:	e9 a1       	ldd	r30, Y+33	; 0x21
     b70:	fa a1       	ldd	r31, Y+34	; 0x22
     b72:	11 82       	std	Z+1, r1	; 0x01
     b74:	10 82       	st	Z, r1
	LCD_clearScreen();
     b76:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
	LCD_displayString(string);
     b82:	8b a1       	ldd	r24, Y+35	; 0x23
     b84:	9c a1       	ldd	r25, Y+36	; 0x24
     b86:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
     b8a:	a0 c0       	rjmp	.+320    	; 0xccc <PasswordFun+0x186>

	while(counter < 4 )
	{
		password =KEYPAD_getPressedKey();
     b8c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <KEYPAD_getPressedKey>
     b90:	88 a3       	std	Y+32, r24	; 0x20
		LCD_moveCursor(1,counter);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b96:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
		counter++;
     b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	8f 8f       	std	Y+31, r24	; 0x1f
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e8       	ldi	r25, 0x80	; 128
     ba4:	ab eb       	ldi	r26, 0xBB	; 187
     ba6:	b4 e4       	ldi	r27, 0x44	; 68
     ba8:	89 8f       	std	Y+25, r24	; 0x19
     baa:	9a 8f       	std	Y+26, r25	; 0x1a
     bac:	ab 8f       	std	Y+27, r26	; 0x1b
     bae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	69 8d       	ldd	r22, Y+25	; 0x19
     bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e7       	ldi	r20, 0x7A	; 122
     bbe:	53 e4       	ldi	r21, 0x43	; 67
     bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8d 8b       	std	Y+21, r24	; 0x15
     bca:	9e 8b       	std	Y+22, r25	; 0x16
     bcc:	af 8b       	std	Y+23, r26	; 0x17
     bce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bd0:	6d 89       	ldd	r22, Y+21	; 0x15
     bd2:	7e 89       	ldd	r23, Y+22	; 0x16
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <PasswordFun+0xac>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9c 8b       	std	Y+20, r25	; 0x14
     bee:	8b 8b       	std	Y+19, r24	; 0x13
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <PasswordFun+0x12a>
	else if (__tmp > 65535)
     bf2:	6d 89       	ldd	r22, Y+21	; 0x15
     bf4:	7e 89       	ldd	r23, Y+22	; 0x16
     bf6:	8f 89       	ldd	r24, Y+23	; 0x17
     bf8:	98 8d       	ldd	r25, Y+24	; 0x18
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	4f e7       	ldi	r20, 0x7F	; 127
     c00:	57 e4       	ldi	r21, 0x47	; 71
     c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <PasswordFun+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	69 8d       	ldd	r22, Y+25	; 0x19
     c0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9c 8b       	std	Y+20, r25	; 0x14
     c30:	8b 8b       	std	Y+19, r24	; 0x13
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <PasswordFun+0x10c>
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9a 8b       	std	Y+18, r25	; 0x12
     c3a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3c:	89 89       	ldd	r24, Y+17	; 0x11
     c3e:	9a 89       	ldd	r25, Y+18	; 0x12
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <PasswordFun+0xfa>
     c44:	9a 8b       	std	Y+18, r25	; 0x12
     c46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	8b 89       	ldd	r24, Y+19	; 0x13
     c4a:	9c 89       	ldd	r25, Y+20	; 0x14
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	8b 89       	ldd	r24, Y+19	; 0x13
     c54:	9c 89       	ldd	r25, Y+20	; 0x14
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	69 f7       	brne	.-38     	; 0xc34 <PasswordFun+0xee>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <PasswordFun+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	6d 89       	ldd	r22, Y+21	; 0x15
     c5e:	7e 89       	ldd	r23, Y+22	; 0x16
     c60:	8f 89       	ldd	r24, Y+23	; 0x17
     c62:	98 8d       	ldd	r25, Y+24	; 0x18
     c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9c 8b       	std	Y+20, r25	; 0x14
     c6e:	8b 8b       	std	Y+19, r24	; 0x13
     c70:	8b 89       	ldd	r24, Y+19	; 0x13
     c72:	9c 89       	ldd	r25, Y+20	; 0x14
     c74:	98 8b       	std	Y+16, r25	; 0x10
     c76:	8f 87       	std	Y+15, r24	; 0x0f
     c78:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7a:	98 89       	ldd	r25, Y+16	; 0x10
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <PasswordFun+0x136>
     c80:	98 8b       	std	Y+16, r25	; 0x10
     c82:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		(*passvar).fullPass =(*passvar).fullPass +  (password* passComb);
     c84:	e9 a1       	ldd	r30, Y+33	; 0x21
     c86:	fa a1       	ldd	r31, Y+34	; 0x22
     c88:	40 81       	ld	r20, Z
     c8a:	51 81       	ldd	r21, Z+1	; 0x01
     c8c:	88 a1       	ldd	r24, Y+32	; 0x20
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c96:	bc 01       	movw	r22, r24
     c98:	26 9f       	mul	r18, r22
     c9a:	c0 01       	movw	r24, r0
     c9c:	27 9f       	mul	r18, r23
     c9e:	90 0d       	add	r25, r0
     ca0:	36 9f       	mul	r19, r22
     ca2:	90 0d       	add	r25, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	84 0f       	add	r24, r20
     ca8:	95 1f       	adc	r25, r21
     caa:	e9 a1       	ldd	r30, Y+33	; 0x21
     cac:	fa a1       	ldd	r31, Y+34	; 0x22
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     cb2:	8a e2       	ldi	r24, 0x2A	; 42
     cb4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_displayCharacter>
		passComb = passComb/10;
     cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__udivmodhi4>
     cc6:	cb 01       	movw	r24, r22
     cc8:	9e 8f       	std	Y+30, r25	; 0x1e
     cca:	8d 8f       	std	Y+29, r24	; 0x1d
	(*passvar).fullPass = 0;
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString(string);

	while(counter < 4 )
     ccc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <PasswordFun+0x18e>
     cd2:	5c cf       	rjmp	.-328    	; 0xb8c <PasswordFun+0x46>
		_delay_ms(1500);
		(*passvar).fullPass =(*passvar).fullPass +  (password* passComb);
		LCD_displayCharacter('*');
		passComb = passComb/10;
	}
	LCD_clearScreen();
     cd4:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
	LCD_intgerToString((*passvar).fullPass);
     cd8:	e9 a1       	ldd	r30, Y+33	; 0x21
     cda:	fa a1       	ldd	r31, Y+34	; 0x22
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <LCD_intgerToString>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a8 ec       	ldi	r26, 0xC8	; 200
     cea:	b2 e4       	ldi	r27, 0x42	; 66
     cec:	8b 87       	std	Y+11, r24	; 0x0b
     cee:	9c 87       	std	Y+12, r25	; 0x0c
     cf0:	ad 87       	std	Y+13, r26	; 0x0d
     cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a e7       	ldi	r20, 0x7A	; 122
     d02:	53 e4       	ldi	r21, 0x43	; 67
     d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8f 83       	std	Y+7, r24	; 0x07
     d0e:	98 87       	std	Y+8, r25	; 0x08
     d10:	a9 87       	std	Y+9, r26	; 0x09
     d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d14:	6f 81       	ldd	r22, Y+7	; 0x07
     d16:	78 85       	ldd	r23, Y+8	; 0x08
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	2c f4       	brge	.+10     	; 0xd36 <PasswordFun+0x1f0>
		__ticks = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <PasswordFun+0x26e>
	else if (__tmp > 65535)
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	78 85       	ldd	r23, Y+8	; 0x08
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	4f e7       	ldi	r20, 0x7F	; 127
     d44:	57 e4       	ldi	r21, 0x47	; 71
     d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	4c f5       	brge	.+82     	; 0xda0 <PasswordFun+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d50:	7c 85       	ldd	r23, Y+12	; 0x0c
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e2       	ldi	r20, 0x20	; 32
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <PasswordFun+0x250>
     d78:	89 e1       	ldi	r24, 0x19	; 25
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	8b 83       	std	Y+3, r24	; 0x03
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <PasswordFun+0x23e>
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	9e 81       	ldd	r25, Y+6	; 0x06
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f7       	brne	.-38     	; 0xd78 <PasswordFun+0x232>
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <PasswordFun+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9e 83       	std	Y+6, r25	; 0x06
     db2:	8d 83       	std	Y+5, r24	; 0x05
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <PasswordFun+0x27a>
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
     dc8:	a4 96       	adiw	r28, 0x24	; 36
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <first_pass>:
void first_pass()
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	PasswordFun(&firstPass, "Enter Password");
     de2:	85 e4       	ldi	r24, 0x45	; 69
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	20 e6       	ldi	r18, 0x60	; 96
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	0e 94 a3 05 	call	0xb46	; 0xb46 <PasswordFun>
}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <access>:
void access()
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	6c 97       	sbiw	r28, 0x1c	; 28
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	first_pass();
     e0a:	0e 94 ed 06 	call	0xdda	; 0xdda <first_pass>
	UART_sendByte(firstPass.oct[0]);
     e0e:	80 91 45 01 	lds	r24, 0x0145
     e12:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a8 ec       	ldi	r26, 0xC8	; 200
     e1c:	b2 e4       	ldi	r27, 0x42	; 66
     e1e:	89 8f       	std	Y+25, r24	; 0x19
     e20:	9a 8f       	std	Y+26, r25	; 0x1a
     e22:	ab 8f       	std	Y+27, r26	; 0x1b
     e24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e26:	69 8d       	ldd	r22, Y+25	; 0x19
     e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4a e7       	ldi	r20, 0x7A	; 122
     e34:	53 e4       	ldi	r21, 0x43	; 67
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	8d 8b       	std	Y+21, r24	; 0x15
     e40:	9e 8b       	std	Y+22, r25	; 0x16
     e42:	af 8b       	std	Y+23, r26	; 0x17
     e44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e46:	6d 89       	ldd	r22, Y+21	; 0x15
     e48:	7e 89       	ldd	r23, Y+22	; 0x16
     e4a:	8f 89       	ldd	r24, Y+23	; 0x17
     e4c:	98 8d       	ldd	r25, Y+24	; 0x18
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	2c f4       	brge	.+10     	; 0xe68 <access+0x72>
		__ticks = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 8b       	std	Y+20, r25	; 0x14
     e64:	8b 8b       	std	Y+19, r24	; 0x13
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <access+0xf0>
	else if (__tmp > 65535)
     e68:	6d 89       	ldd	r22, Y+21	; 0x15
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	4f e7       	ldi	r20, 0x7F	; 127
     e76:	57 e4       	ldi	r21, 0x47	; 71
     e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	4c f5       	brge	.+82     	; 0xed2 <access+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e80:	69 8d       	ldd	r22, Y+25	; 0x19
     e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9c 8b       	std	Y+20, r25	; 0x14
     ea6:	8b 8b       	std	Y+19, r24	; 0x13
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <access+0xd2>
     eaa:	89 e1       	ldi	r24, 0x19	; 25
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9a 8b       	std	Y+18, r25	; 0x12
     eb0:	89 8b       	std	Y+17, r24	; 0x11
     eb2:	89 89       	ldd	r24, Y+17	; 0x11
     eb4:	9a 89       	ldd	r25, Y+18	; 0x12
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <access+0xc0>
     eba:	9a 8b       	std	Y+18, r25	; 0x12
     ebc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebe:	8b 89       	ldd	r24, Y+19	; 0x13
     ec0:	9c 89       	ldd	r25, Y+20	; 0x14
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	9c 8b       	std	Y+20, r25	; 0x14
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec8:	8b 89       	ldd	r24, Y+19	; 0x13
     eca:	9c 89       	ldd	r25, Y+20	; 0x14
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	69 f7       	brne	.-38     	; 0xeaa <access+0xb4>
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <access+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed2:	6d 89       	ldd	r22, Y+21	; 0x15
     ed4:	7e 89       	ldd	r23, Y+22	; 0x16
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	9c 8b       	std	Y+20, r25	; 0x14
     ee4:	8b 8b       	std	Y+19, r24	; 0x13
     ee6:	8b 89       	ldd	r24, Y+19	; 0x13
     ee8:	9c 89       	ldd	r25, Y+20	; 0x14
     eea:	98 8b       	std	Y+16, r25	; 0x10
     eec:	8f 87       	std	Y+15, r24	; 0x0f
     eee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef0:	98 89       	ldd	r25, Y+16	; 0x10
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <access+0xfc>
     ef6:	98 8b       	std	Y+16, r25	; 0x10
     ef8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	UART_sendByte(firstPass.oct[1]);
     efa:	80 91 46 01 	lds	r24, 0x0146
     efe:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	a8 ec       	ldi	r26, 0xC8	; 200
     f08:	b2 e4       	ldi	r27, 0x42	; 66
     f0a:	8b 87       	std	Y+11, r24	; 0x0b
     f0c:	9c 87       	std	Y+12, r25	; 0x0c
     f0e:	ad 87       	std	Y+13, r26	; 0x0d
     f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	4a e7       	ldi	r20, 0x7A	; 122
     f20:	53 e4       	ldi	r21, 0x43	; 67
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	8f 83       	std	Y+7, r24	; 0x07
     f2c:	98 87       	std	Y+8, r25	; 0x08
     f2e:	a9 87       	std	Y+9, r26	; 0x09
     f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e8       	ldi	r20, 0x80	; 128
     f40:	5f e3       	ldi	r21, 0x3F	; 63
     f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f46:	88 23       	and	r24, r24
     f48:	2c f4       	brge	.+10     	; 0xf54 <access+0x15e>
		__ticks = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	3f c0       	rjmp	.+126    	; 0xfd2 <access+0x1dc>
	else if (__tmp > 65535)
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	3f ef       	ldi	r19, 0xFF	; 255
     f60:	4f e7       	ldi	r20, 0x7F	; 127
     f62:	57 e4       	ldi	r21, 0x47	; 71
     f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f68:	18 16       	cp	r1, r24
     f6a:	4c f5       	brge	.+82     	; 0xfbe <access+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <access+0x1be>
     f96:	89 e1       	ldi	r24, 0x19	; 25
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <access+0x1ac>
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	69 f7       	brne	.-38     	; 0xf96 <access+0x1a0>
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <access+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <access+0x1e8>
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
     fe6:	6c 96       	adiw	r28, 0x1c	; 28
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <PassConfirm>:
void PassConfirm()
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	PasswordFun(&secPass,"ReEnter Password");
    1000:	88 e4       	ldi	r24, 0x48	; 72
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	2f e6       	ldi	r18, 0x6F	; 111
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	b9 01       	movw	r22, r18
    100a:	0e 94 a3 05 	call	0xb46	; 0xb46 <PasswordFun>
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <mainOption>:
void mainOption(uint8 * var)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	60 97       	sbiw	r28, 0x10	; 16
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	98 8b       	std	Y+16, r25	; 0x10
    102a:	8f 87       	std	Y+15, r24	; 0x0f
	do {
		LCD_clearScreen();
    102c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
		LCD_displayString("+ for open Door");
    1038:	80 e8       	ldi	r24, 0x80	; 128
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
		LCD_moveCursor(1,0);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
		LCD_displayString("- for change password");
    1048:	80 e9       	ldi	r24, 0x90	; 144
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
		*var = KEYPAD_getPressedKey();
    1050:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <KEYPAD_getPressedKey>
    1054:	ef 85       	ldd	r30, Y+15	; 0x0f
    1056:	f8 89       	ldd	r31, Y+16	; 0x10
    1058:	80 83       	st	Z, r24
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e8       	ldi	r25, 0x80	; 128
    105e:	ab eb       	ldi	r26, 0xBB	; 187
    1060:	b4 e4       	ldi	r27, 0x44	; 68
    1062:	8b 87       	std	Y+11, r24	; 0x0b
    1064:	9c 87       	std	Y+12, r25	; 0x0c
    1066:	ad 87       	std	Y+13, r26	; 0x0d
    1068:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	6b 85       	ldd	r22, Y+11	; 0x0b
    106c:	7c 85       	ldd	r23, Y+12	; 0x0c
    106e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1070:	9e 85       	ldd	r25, Y+14	; 0x0e
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	53 e4       	ldi	r21, 0x43	; 67
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	8f 83       	std	Y+7, r24	; 0x07
    1084:	98 87       	std	Y+8, r25	; 0x08
    1086:	a9 87       	std	Y+9, r26	; 0x09
    1088:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108a:	6f 81       	ldd	r22, Y+7	; 0x07
    108c:	78 85       	ldd	r23, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <mainOption+0x98>
		__ticks = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	3f c0       	rjmp	.+126    	; 0x112a <mainOption+0x116>
	else if (__tmp > 65535)
    10ac:	6f 81       	ldd	r22, Y+7	; 0x07
    10ae:	78 85       	ldd	r23, Y+8	; 0x08
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	4c f5       	brge	.+82     	; 0x1116 <mainOption+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <mainOption+0xf8>
    10ee:	89 e1       	ldi	r24, 0x19	; 25
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	8b 83       	std	Y+3, r24	; 0x03
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <mainOption+0xe6>
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f7       	brne	.-38     	; 0x10ee <mainOption+0xda>
    1114:	14 c0       	rjmp	.+40     	; 0x113e <mainOption+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <mainOption+0x122>
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
	}while(!(*var == '+' || *var == '-' ));
    113e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1140:	f8 89       	ldd	r31, Y+16	; 0x10
    1142:	80 81       	ld	r24, Z
    1144:	8b 32       	cpi	r24, 0x2B	; 43
    1146:	31 f0       	breq	.+12     	; 0x1154 <mainOption+0x140>
    1148:	ef 85       	ldd	r30, Y+15	; 0x0f
    114a:	f8 89       	ldd	r31, Y+16	; 0x10
    114c:	80 81       	ld	r24, Z
    114e:	8d 32       	cpi	r24, 0x2D	; 45
    1150:	09 f0       	breq	.+2      	; 0x1154 <mainOption+0x140>
    1152:	6c cf       	rjmp	.-296    	; 0x102c <mainOption+0x18>
}
    1154:	60 96       	adiw	r28, 0x10	; 16
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <MSG>:
void MSG(const char * string)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	60 97       	sbiw	r28, 0x10	; 16
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	98 8b       	std	Y+16, r25	; 0x10
    117c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
    117e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
	LCD_displayString(string);
    118a:	8f 85       	ldd	r24, Y+15	; 0x0f
    118c:	98 89       	ldd	r25, Y+16	; 0x10
    118e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e8       	ldi	r25, 0x80	; 128
    1196:	ab e3       	ldi	r26, 0x3B	; 59
    1198:	b5 e4       	ldi	r27, 0x45	; 69
    119a:	8b 87       	std	Y+11, r24	; 0x0b
    119c:	9c 87       	std	Y+12, r25	; 0x0c
    119e:	ad 87       	std	Y+13, r26	; 0x0d
    11a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a e7       	ldi	r20, 0x7A	; 122
    11b0:	53 e4       	ldi	r21, 0x43	; 67
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8f 83       	std	Y+7, r24	; 0x07
    11bc:	98 87       	std	Y+8, r25	; 0x08
    11be:	a9 87       	std	Y+9, r26	; 0x09
    11c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <MSG+0x7e>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <MSG+0xfc>
	else if (__tmp > 65535)
    11e4:	6f 81       	ldd	r22, Y+7	; 0x07
    11e6:	78 85       	ldd	r23, Y+8	; 0x08
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <MSG+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	9e 85       	ldd	r25, Y+14	; 0x0e
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <MSG+0xde>
    1226:	89 e1       	ldi	r24, 0x19	; 25
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <MSG+0xcc>
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <MSG+0xc0>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <MSG+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <MSG+0x108>
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    1276:	60 96       	adiw	r28, 0x10	; 16
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <error_msg>:
void error_msg()
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1290:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
	LCD_displayString("e2fesh 7aramy! ");
    129c:	86 ea       	ldi	r24, 0xA6	; 166
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <createPass>:
void createPass()
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	2e 97       	sbiw	r28, 0x0e	; 14
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
	do{
		first_pass();
    12be:	0e 94 ed 06 	call	0xdda	; 0xdda <first_pass>
		PassConfirm();
    12c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <PassConfirm>
	}while(firstPass.fullPass != secPass.fullPass);
    12c6:	20 91 45 01 	lds	r18, 0x0145
    12ca:	30 91 46 01 	lds	r19, 0x0146
    12ce:	80 91 48 01 	lds	r24, 0x0148
    12d2:	90 91 49 01 	lds	r25, 0x0149
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	89 f7       	brne	.-30     	; 0x12be <createPass+0x14>

	UART_sendByte(firstPass.oct[0]);
    12dc:	80 91 45 01 	lds	r24, 0x0145
    12e0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
	UART_sendByte(firstPass.oct[1]);
    12e4:	80 91 46 01 	lds	r24, 0x0146
    12e8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	aa e7       	ldi	r26, 0x7A	; 122
    12f2:	b4 e4       	ldi	r27, 0x44	; 68
    12f4:	8b 87       	std	Y+11, r24	; 0x0b
    12f6:	9c 87       	std	Y+12, r25	; 0x0c
    12f8:	ad 87       	std	Y+13, r26	; 0x0d
    12fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	4a e7       	ldi	r20, 0x7A	; 122
    130a:	53 e4       	ldi	r21, 0x43	; 67
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	8f 83       	std	Y+7, r24	; 0x07
    1316:	98 87       	std	Y+8, r25	; 0x08
    1318:	a9 87       	std	Y+9, r26	; 0x09
    131a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e8       	ldi	r20, 0x80	; 128
    132a:	5f e3       	ldi	r21, 0x3F	; 63
    132c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1330:	88 23       	and	r24, r24
    1332:	2c f4       	brge	.+10     	; 0x133e <createPass+0x94>
		__ticks = 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	3f c0       	rjmp	.+126    	; 0x13bc <createPass+0x112>
	else if (__tmp > 65535)
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	57 e4       	ldi	r21, 0x47	; 71
    134e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	4c f5       	brge	.+82     	; 0x13a8 <createPass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	0f c0       	rjmp	.+30     	; 0x139e <createPass+0xf4>
    1380:	89 e1       	ldi	r24, 0x19	; 25
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9c 83       	std	Y+4, r25	; 0x04
    1386:	8b 83       	std	Y+3, r24	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <createPass+0xe2>
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	69 f7       	brne	.-38     	; 0x1380 <createPass+0xd6>
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <createPass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <createPass+0x11e>
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    13d0:	2e 96       	adiw	r28, 0x0e	; 14
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <main>:
UART_ConfigType uartConfig = {9600 , 1 , 0 , BIT_8 , 0};

int main()
{
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	ca 5a       	subi	r28, 0xAA	; 170
    13f0:	d0 40       	sbci	r29, 0x00	; 0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
	uint8 optionVar;
	uint8 val ;
	UART_init(&uartConfig);
    13fc:	85 e3       	ldi	r24, 0x35	; 53
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <UART_init>
    1404:	fe 01       	movw	r30, r28
    1406:	eb 55       	subi	r30, 0x5B	; 91
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	aa ef       	ldi	r26, 0xFA	; 250
    1410:	b3 e4       	ldi	r27, 0x43	; 67
    1412:	80 83       	st	Z, r24
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	a2 83       	std	Z+2, r26	; 0x02
    1418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	8e 01       	movw	r16, r28
    141c:	0f 55       	subi	r16, 0x5F	; 95
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	eb 55       	subi	r30, 0x5B	; 91
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a e7       	ldi	r20, 0x7A	; 122
    1434:	53 e4       	ldi	r21, 0x43	; 67
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	f8 01       	movw	r30, r16
    1440:	80 83       	st	Z, r24
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	a2 83       	std	Z+2, r26	; 0x02
    1446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1448:	fe 01       	movw	r30, r28
    144a:	ef 55       	subi	r30, 0x5F	; 95
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1462:	88 23       	and	r24, r24
    1464:	44 f4       	brge	.+16     	; 0x1476 <main+0x94>
		__ticks = 1;
    1466:	fe 01       	movw	r30, r28
    1468:	e1 56       	subi	r30, 0x61	; 97
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	64 c0       	rjmp	.+200    	; 0x153e <main+0x15c>
	else if (__tmp > 65535)
    1476:	fe 01       	movw	r30, r28
    1478:	ef 55       	subi	r30, 0x5F	; 95
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	0c f0       	brlt	.+2      	; 0x1496 <main+0xb4>
    1494:	43 c0       	rjmp	.+134    	; 0x151c <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	fe 01       	movw	r30, r28
    1498:	eb 55       	subi	r30, 0x5B	; 91
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8e 01       	movw	r16, r28
    14b6:	01 56       	subi	r16, 0x61	; 97
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	1f c0       	rjmp	.+62     	; 0x150c <main+0x12a>
    14ce:	fe 01       	movw	r30, r28
    14d0:	e3 56       	subi	r30, 0x63	; 99
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	89 e1       	ldi	r24, 0x19	; 25
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	fe 01       	movw	r30, r28
    14de:	e3 56       	subi	r30, 0x63	; 99
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <main+0x104>
    14ea:	fe 01       	movw	r30, r28
    14ec:	e3 56       	subi	r30, 0x63	; 99
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	de 01       	movw	r26, r28
    14f6:	a1 56       	subi	r26, 0x61	; 97
    14f8:	bf 4f       	sbci	r27, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e1 56       	subi	r30, 0x61	; 97
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	fe 01       	movw	r30, r28
    150e:	e1 56       	subi	r30, 0x61	; 97
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	d1 f6       	brne	.-76     	; 0x14ce <main+0xec>
    151a:	27 c0       	rjmp	.+78     	; 0x156a <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	8e 01       	movw	r16, r28
    151e:	01 56       	subi	r16, 0x61	; 97
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	ef 55       	subi	r30, 0x5F	; 95
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	f8 01       	movw	r30, r16
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	de 01       	movw	r26, r28
    1540:	a5 56       	subi	r26, 0x65	; 101
    1542:	bf 4f       	sbci	r27, 0xFF	; 255
    1544:	fe 01       	movw	r30, r28
    1546:	e1 56       	subi	r30, 0x61	; 97
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	8d 93       	st	X+, r24
    1550:	9c 93       	st	X, r25
    1552:	fe 01       	movw	r30, r28
    1554:	e5 56       	subi	r30, 0x65	; 101
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <main+0x17a>
    1560:	fe 01       	movw	r30, r28
    1562:	e5 56       	subi	r30, 0x65	; 101
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_init();
    156a:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_init>
    156e:	fe 01       	movw	r30, r28
    1570:	e9 56       	subi	r30, 0x69	; 105
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	aa ef       	ldi	r26, 0xFA	; 250
    157a:	b3 e4       	ldi	r27, 0x43	; 67
    157c:	80 83       	st	Z, r24
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	a2 83       	std	Z+2, r26	; 0x02
    1582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	8e 01       	movw	r16, r28
    1586:	0d 56       	subi	r16, 0x6D	; 109
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e9 56       	subi	r30, 0x69	; 105
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a e7       	ldi	r20, 0x7A	; 122
    159e:	53 e4       	ldi	r21, 0x43	; 67
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	a2 83       	std	Z+2, r26	; 0x02
    15b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b2:	fe 01       	movw	r30, r28
    15b4:	ed 56       	subi	r30, 0x6D	; 109
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	44 f4       	brge	.+16     	; 0x15e0 <main+0x1fe>
		__ticks = 1;
    15d0:	fe 01       	movw	r30, r28
    15d2:	ef 56       	subi	r30, 0x6F	; 111
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	64 c0       	rjmp	.+200    	; 0x16a8 <main+0x2c6>
	else if (__tmp > 65535)
    15e0:	fe 01       	movw	r30, r28
    15e2:	ed 56       	subi	r30, 0x6D	; 109
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <main+0x21e>
    15fe:	43 c0       	rjmp	.+134    	; 0x1686 <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	fe 01       	movw	r30, r28
    1602:	e9 56       	subi	r30, 0x69	; 105
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8e 01       	movw	r16, r28
    1620:	0f 56       	subi	r16, 0x6F	; 111
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	1f c0       	rjmp	.+62     	; 0x1676 <main+0x294>
    1638:	fe 01       	movw	r30, r28
    163a:	e1 57       	subi	r30, 0x71	; 113
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	89 e1       	ldi	r24, 0x19	; 25
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	fe 01       	movw	r30, r28
    1648:	e1 57       	subi	r30, 0x71	; 113
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <main+0x26e>
    1654:	fe 01       	movw	r30, r28
    1656:	e1 57       	subi	r30, 0x71	; 113
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	de 01       	movw	r26, r28
    1660:	af 56       	subi	r26, 0x6F	; 111
    1662:	bf 4f       	sbci	r27, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	ef 56       	subi	r30, 0x6F	; 111
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	9c 93       	st	X, r25
    1674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	fe 01       	movw	r30, r28
    1678:	ef 56       	subi	r30, 0x6F	; 111
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	d1 f6       	brne	.-76     	; 0x1638 <main+0x256>
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <main+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	8e 01       	movw	r16, r28
    1688:	0f 56       	subi	r16, 0x6F	; 111
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	ed 56       	subi	r30, 0x6D	; 109
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    16a8:	de 01       	movw	r26, r28
    16aa:	a3 57       	subi	r26, 0x73	; 115
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	ef 56       	subi	r30, 0x6F	; 111
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	8d 93       	st	X+, r24
    16ba:	9c 93       	st	X, r25
    16bc:	fe 01       	movw	r30, r28
    16be:	e3 57       	subi	r30, 0x73	; 115
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <main+0x2e4>
    16ca:	fe 01       	movw	r30, r28
    16cc:	e3 57       	subi	r30, 0x73	; 115
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
	_delay_ms(500);
	MSG("Hello, there!");
    16d4:	86 eb       	ldi	r24, 0xB6	; 182
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 b3 08 	call	0x1166	; 0x1166 <MSG>
	while(1)
	{
		val = UART_recieveByte();
    16dc:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <UART_recieveByte>
    16e0:	fe 01       	movw	r30, r28
    16e2:	e7 55       	subi	r30, 0x57	; 87
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 83       	st	Z, r24
		if(val == 0)
    16e8:	fe 01       	movw	r30, r28
    16ea:	e7 55       	subi	r30, 0x57	; 87
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	88 23       	and	r24, r24
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <main+0x314>
    16f4:	75 c1       	rjmp	.+746    	; 0x19e0 <main+0x5fe>
		{
			createPass();
    16f6:	0e 94 55 09 	call	0x12aa	; 0x12aa <createPass>
			UART_sendByte(secPass.oct[0]);
    16fa:	80 91 48 01 	lds	r24, 0x0148
    16fe:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
    1702:	fe 01       	movw	r30, r28
    1704:	e7 57       	subi	r30, 0x77	; 119
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a8 ec       	ldi	r26, 0xC8	; 200
    170e:	b2 e4       	ldi	r27, 0x42	; 66
    1710:	80 83       	st	Z, r24
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	a2 83       	std	Z+2, r26	; 0x02
    1716:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	8e 01       	movw	r16, r28
    171a:	0b 57       	subi	r16, 0x7B	; 123
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	fe 01       	movw	r30, r28
    1720:	e7 57       	subi	r30, 0x77	; 119
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a e7       	ldi	r20, 0x7A	; 122
    1732:	53 e4       	ldi	r21, 0x43	; 67
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	f8 01       	movw	r30, r16
    173e:	80 83       	st	Z, r24
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	a2 83       	std	Z+2, r26	; 0x02
    1744:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1746:	fe 01       	movw	r30, r28
    1748:	eb 57       	subi	r30, 0x7B	; 123
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	44 f4       	brge	.+16     	; 0x1774 <main+0x392>
		__ticks = 1;
    1764:	fe 01       	movw	r30, r28
    1766:	ed 57       	subi	r30, 0x7D	; 125
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	64 c0       	rjmp	.+200    	; 0x183c <main+0x45a>
	else if (__tmp > 65535)
    1774:	fe 01       	movw	r30, r28
    1776:	eb 57       	subi	r30, 0x7B	; 123
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	0c f0       	brlt	.+2      	; 0x1794 <main+0x3b2>
    1792:	43 c0       	rjmp	.+134    	; 0x181a <main+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	fe 01       	movw	r30, r28
    1796:	e7 57       	subi	r30, 0x77	; 119
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8e 01       	movw	r16, r28
    17b4:	0d 57       	subi	r16, 0x7D	; 125
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	f8 01       	movw	r30, r16
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	1f c0       	rjmp	.+62     	; 0x180a <main+0x428>
    17cc:	fe 01       	movw	r30, r28
    17ce:	ef 57       	subi	r30, 0x7F	; 127
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	89 e1       	ldi	r24, 0x19	; 25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	ef 57       	subi	r30, 0x7F	; 127
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <main+0x402>
    17e8:	fe 01       	movw	r30, r28
    17ea:	ef 57       	subi	r30, 0x7F	; 127
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	de 01       	movw	r26, r28
    17f4:	ad 57       	subi	r26, 0x7D	; 125
    17f6:	bf 4f       	sbci	r27, 0xFF	; 255
    17f8:	fe 01       	movw	r30, r28
    17fa:	ed 57       	subi	r30, 0x7D	; 125
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	fe 01       	movw	r30, r28
    180c:	ed 57       	subi	r30, 0x7D	; 125
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	d1 f6       	brne	.-76     	; 0x17cc <main+0x3ea>
    1818:	27 c0       	rjmp	.+78     	; 0x1868 <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	8e 01       	movw	r16, r28
    181c:	0d 57       	subi	r16, 0x7D	; 125
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	fe 01       	movw	r30, r28
    1822:	eb 57       	subi	r30, 0x7B	; 123
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	f8 01       	movw	r30, r16
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	de 01       	movw	r26, r28
    183e:	a1 58       	subi	r26, 0x81	; 129
    1840:	bf 4f       	sbci	r27, 0xFF	; 255
    1842:	fe 01       	movw	r30, r28
    1844:	ed 57       	subi	r30, 0x7D	; 125
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	8d 93       	st	X+, r24
    184e:	9c 93       	st	X, r25
    1850:	fe 01       	movw	r30, r28
    1852:	e1 58       	subi	r30, 0x81	; 129
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <main+0x478>
    185e:	fe 01       	movw	r30, r28
    1860:	e1 58       	subi	r30, 0x81	; 129
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
			_delay_ms(100);
			UART_sendByte(secPass.oct[1]);
    1868:	80 91 49 01 	lds	r24, 0x0149
    186c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
    1870:	fe 01       	movw	r30, r28
    1872:	e5 58       	subi	r30, 0x85	; 133
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a8 ec       	ldi	r26, 0xC8	; 200
    187c:	b2 e4       	ldi	r27, 0x42	; 66
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	8e 01       	movw	r16, r28
    1888:	09 58       	subi	r16, 0x89	; 137
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	e5 58       	subi	r30, 0x85	; 133
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	53 e4       	ldi	r21, 0x43	; 67
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 58       	subi	r30, 0x89	; 137
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	44 f4       	brge	.+16     	; 0x18e2 <main+0x500>
		__ticks = 1;
    18d2:	fe 01       	movw	r30, r28
    18d4:	eb 58       	subi	r30, 0x8B	; 139
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	64 c0       	rjmp	.+200    	; 0x19aa <main+0x5c8>
	else if (__tmp > 65535)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 58       	subi	r30, 0x89	; 137
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <main+0x520>
    1900:	43 c0       	rjmp	.+134    	; 0x1988 <main+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	fe 01       	movw	r30, r28
    1904:	e5 58       	subi	r30, 0x85	; 133
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8e 01       	movw	r16, r28
    1922:	0b 58       	subi	r16, 0x8B	; 139
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	1f c0       	rjmp	.+62     	; 0x1978 <main+0x596>
    193a:	fe 01       	movw	r30, r28
    193c:	ed 58       	subi	r30, 0x8D	; 141
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	89 e1       	ldi	r24, 0x19	; 25
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	fe 01       	movw	r30, r28
    194a:	ed 58       	subi	r30, 0x8D	; 141
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <main+0x570>
    1956:	fe 01       	movw	r30, r28
    1958:	ed 58       	subi	r30, 0x8D	; 141
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	de 01       	movw	r26, r28
    1962:	ab 58       	subi	r26, 0x8B	; 139
    1964:	bf 4f       	sbci	r27, 0xFF	; 255
    1966:	fe 01       	movw	r30, r28
    1968:	eb 58       	subi	r30, 0x8B	; 139
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	9c 93       	st	X, r25
    1976:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	fe 01       	movw	r30, r28
    197a:	eb 58       	subi	r30, 0x8B	; 139
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	d1 f6       	brne	.-76     	; 0x193a <main+0x558>
    1986:	27 c0       	rjmp	.+78     	; 0x19d6 <main+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	8e 01       	movw	r16, r28
    198a:	0b 58       	subi	r16, 0x8B	; 139
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	e9 58       	subi	r30, 0x89	; 137
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	de 01       	movw	r26, r28
    19ac:	af 58       	subi	r26, 0x8F	; 143
    19ae:	bf 4f       	sbci	r27, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 58       	subi	r30, 0x8B	; 139
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	8d 93       	st	X+, r24
    19bc:	9c 93       	st	X, r25
    19be:	fe 01       	movw	r30, r28
    19c0:	ef 58       	subi	r30, 0x8F	; 143
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <main+0x5e6>
    19cc:	fe 01       	movw	r30, r28
    19ce:	ef 58       	subi	r30, 0x8F	; 143
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
			_delay_ms(100);
			MSG("Password is saved.");
    19d6:	84 ec       	ldi	r24, 0xC4	; 196
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 b3 08 	call	0x1166	; 0x1166 <MSG>
    19de:	68 c4       	rjmp	.+2256   	; 0x22b0 <main+0xece>
		}
		else if (val == 1)
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 55       	subi	r30, 0x57	; 87
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	09 f0       	breq	.+2      	; 0x19ee <main+0x60c>
    19ec:	61 c4       	rjmp	.+2242   	; 0x22b0 <main+0xece>
		{
			//option
			mainOption(&option);
    19ee:	87 e4       	ldi	r24, 0x47	; 71
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	0e 94 0a 08 	call	0x1014	; 0x1014 <mainOption>
			UART_sendByte(option);
    19f6:	80 91 47 01 	lds	r24, 0x0147
    19fa:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>

			if(option == '+')
    19fe:	80 91 47 01 	lds	r24, 0x0147
    1a02:	8b 32       	cpi	r24, 0x2B	; 43
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <main+0x626>
    1a06:	dc c2       	rjmp	.+1464   	; 0x1fc0 <main+0xbde>
			{
				//open door
				access();
    1a08:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <access>
				optionVar = UART_recieveByte();
    1a0c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <UART_recieveByte>
    1a10:	fe 01       	movw	r30, r28
    1a12:	e6 55       	subi	r30, 0x56	; 86
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 83       	st	Z, r24
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e3 59       	subi	r30, 0x93	; 147
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e8       	ldi	r25, 0x80	; 128
    1a22:	ab eb       	ldi	r26, 0xBB	; 187
    1a24:	b4 e4       	ldi	r27, 0x44	; 68
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	07 59       	subi	r16, 0x97	; 151
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e3 59       	subi	r30, 0x93	; 147
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a e7       	ldi	r20, 0x7A	; 122
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e7 59       	subi	r30, 0x97	; 151
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	44 f4       	brge	.+16     	; 0x1a8a <main+0x6a8>
		__ticks = 1;
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e9 59       	subi	r30, 0x99	; 153
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	64 c0       	rjmp	.+200    	; 0x1b52 <main+0x770>
	else if (__tmp > 65535)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 59       	subi	r30, 0x97	; 151
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <main+0x6c8>
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <main+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e3 59       	subi	r30, 0x93	; 147
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8e 01       	movw	r16, r28
    1aca:	09 59       	subi	r16, 0x99	; 153
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	f8 01       	movw	r30, r16
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	1f c0       	rjmp	.+62     	; 0x1b20 <main+0x73e>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	eb 59       	subi	r30, 0x9B	; 155
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	89 e1       	ldi	r24, 0x19	; 25
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    1af0:	fe 01       	movw	r30, r28
    1af2:	eb 59       	subi	r30, 0x9B	; 155
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <main+0x718>
    1afe:	fe 01       	movw	r30, r28
    1b00:	eb 59       	subi	r30, 0x9B	; 155
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	de 01       	movw	r26, r28
    1b0a:	a9 59       	subi	r26, 0x99	; 153
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 59       	subi	r30, 0x99	; 153
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	9c 93       	st	X, r25
    1b1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	fe 01       	movw	r30, r28
    1b22:	e9 59       	subi	r30, 0x99	; 153
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	d1 f6       	brne	.-76     	; 0x1ae2 <main+0x700>
    1b2e:	28 c0       	rjmp	.+80     	; 0x1b80 <main+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	8e 01       	movw	r16, r28
    1b32:	09 59       	subi	r16, 0x99	; 153
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	fe 01       	movw	r30, r28
    1b38:	e7 59       	subi	r30, 0x97	; 151
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	de 01       	movw	r26, r28
    1b54:	ad 59       	subi	r26, 0x9D	; 157
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 59       	subi	r30, 0x99	; 153
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 59       	subi	r30, 0x9D	; 157
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <main+0x790>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 59       	subi	r30, 0x9D	; 157
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
				_delay_ms(1500);
				//do while 3 marat 34an net2ked optionVar == 2
				do{
					if(optionVar == 2)
    1b80:	fe 01       	movw	r30, r28
    1b82:	e6 55       	subi	r30, 0x56	; 86
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <main+0x7ac>
    1b8c:	7e c1       	rjmp	.+764    	; 0x1e8a <main+0xaa8>
					{
						LCD_clearScreen();
    1b8e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <LCD_clearScreen>
						LCD_moveCursor(0,0);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
						LCD_displayString("Correct Password!");
    1b9a:	87 ed       	ldi	r24, 0xD7	; 215
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
						LCD_moveCursor(1,0);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
						LCD_displayString("Door is opening.");
    1baa:	89 ee       	ldi	r24, 0xE9	; 233
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e1 5a       	subi	r30, 0xA1	; 161
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e6       	ldi	r25, 0x60	; 96
    1bbc:	aa e6       	ldi	r26, 0x6A	; 106
    1bbe:	b6 e4       	ldi	r27, 0x46	; 70
    1bc0:	80 83       	st	Z, r24
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	a2 83       	std	Z+2, r26	; 0x02
    1bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	8e 01       	movw	r16, r28
    1bca:	05 5a       	subi	r16, 0xA5	; 165
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e1 5a       	subi	r30, 0xA1	; 161
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a e7       	ldi	r20, 0x7A	; 122
    1be2:	53 e4       	ldi	r21, 0x43	; 67
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	f8 01       	movw	r30, r16
    1bee:	80 83       	st	Z, r24
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	a2 83       	std	Z+2, r26	; 0x02
    1bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e5 5a       	subi	r30, 0xA5	; 165
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	44 f4       	brge	.+16     	; 0x1c24 <main+0x842>
		__ticks = 1;
    1c14:	fe 01       	movw	r30, r28
    1c16:	e7 5a       	subi	r30, 0xA7	; 167
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	64 c0       	rjmp	.+200    	; 0x1cec <main+0x90a>
	else if (__tmp > 65535)
    1c24:	fe 01       	movw	r30, r28
    1c26:	e5 5a       	subi	r30, 0xA5	; 165
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	0c f0       	brlt	.+2      	; 0x1c44 <main+0x862>
    1c42:	43 c0       	rjmp	.+134    	; 0x1cca <main+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	fe 01       	movw	r30, r28
    1c46:	e1 5a       	subi	r30, 0xA1	; 161
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8e 01       	movw	r16, r28
    1c64:	07 5a       	subi	r16, 0xA7	; 167
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	1f c0       	rjmp	.+62     	; 0x1cba <main+0x8d8>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e9 5a       	subi	r30, 0xA9	; 169
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	89 e1       	ldi	r24, 0x19	; 25
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e9 5a       	subi	r30, 0xA9	; 169
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <main+0x8b2>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e9 5a       	subi	r30, 0xA9	; 169
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	de 01       	movw	r26, r28
    1ca4:	a7 5a       	subi	r26, 0xA7	; 167
    1ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e7 5a       	subi	r30, 0xA7	; 167
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	11 96       	adiw	r26, 0x01	; 1
    1cb6:	9c 93       	st	X, r25
    1cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e7 5a       	subi	r30, 0xA7	; 167
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	d1 f6       	brne	.-76     	; 0x1c7c <main+0x89a>
    1cc8:	27 c0       	rjmp	.+78     	; 0x1d18 <main+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	8e 01       	movw	r16, r28
    1ccc:	07 5a       	subi	r16, 0xA7	; 167
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e5 5a       	subi	r30, 0xA5	; 165
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	de 01       	movw	r26, r28
    1cee:	ab 5a       	subi	r26, 0xAB	; 171
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e7 5a       	subi	r30, 0xA7	; 167
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	8d 93       	st	X+, r24
    1cfe:	9c 93       	st	X, r25
    1d00:	fe 01       	movw	r30, r28
    1d02:	eb 5a       	subi	r30, 0xAB	; 171
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <main+0x928>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	eb 5a       	subi	r30, 0xAB	; 171
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
						_delay_ms(15000);
						LCD_displayString("Door is closing.");
    1d18:	8a ef       	ldi	r24, 0xFA	; 250
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e6       	ldi	r25, 0x60	; 96
    1d2a:	aa e6       	ldi	r26, 0x6A	; 106
    1d2c:	b6 e4       	ldi	r27, 0x46	; 70
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	8e 01       	movw	r16, r28
    1d38:	03 5b       	subi	r16, 0xB3	; 179
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 5a       	subi	r30, 0xAF	; 175
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a e7       	ldi	r20, 0x7A	; 122
    1d50:	53 e4       	ldi	r21, 0x43	; 67
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d64:	fe 01       	movw	r30, r28
    1d66:	e3 5b       	subi	r30, 0xB3	; 179
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <main+0x9b0>
		__ticks = 1;
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5b       	subi	r30, 0xB5	; 181
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <main+0xa78>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	e3 5b       	subi	r30, 0xB3	; 179
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <main+0x9d0>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <main+0xa56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5a       	subi	r30, 0xAF	; 175
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	05 5b       	subi	r16, 0xB5	; 181
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	1f c0       	rjmp	.+62     	; 0x1e28 <main+0xa46>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	89 e1       	ldi	r24, 0x19	; 25
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <main+0xa20>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	de 01       	movw	r26, r28
    1e12:	a5 5b       	subi	r26, 0xB5	; 181
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 5b       	subi	r30, 0xB5	; 181
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e5 5b       	subi	r30, 0xB5	; 181
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	d1 f6       	brne	.-76     	; 0x1dea <main+0xa08>
    1e36:	c4 c0       	rjmp	.+392    	; 0x1fc0 <main+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	05 5b       	subi	r16, 0xB5	; 181
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e3 5b       	subi	r30, 0xB3	; 179
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a9 5b       	subi	r26, 0xB9	; 185
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 5b       	subi	r30, 0xB5	; 181
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	11 96       	adiw	r26, 0x01	; 1
    1e6c:	9c 93       	st	X, r25
    1e6e:	8e 93       	st	-X, r24
    1e70:	fe 01       	movw	r30, r28
    1e72:	e9 5b       	subi	r30, 0xB9	; 185
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <main+0xa98>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e9 5b       	subi	r30, 0xB9	; 185
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	9b c0       	rjmp	.+310    	; 0x1fc0 <main+0xbde>
						_delay_ms(15000);
						break;
					}
					else if(optionVar == 3)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e6 55       	subi	r30, 0x56	; 86
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	29 f4       	brne	.+10     	; 0x1ea0 <main+0xabe>
					{
						//wrong
						MSG("InCorrect Password!");
    1e96:	8b e0       	ldi	r24, 0x0B	; 11
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 b3 08 	call	0x1166	; 0x1166 <MSG>
    1e9e:	90 c0       	rjmp	.+288    	; 0x1fc0 <main+0xbde>
						break;


						//LCD_clearScreen();
					}
					else if(optionVar == 4)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e6 55       	subi	r30, 0x56	; 86
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <main+0xacc>
    1eac:	89 c0       	rjmp	.+274    	; 0x1fc0 <main+0xbde>
					{
						//alarm
						MSG("e2fesh 7aramy");
    1eae:	8f e1       	ldi	r24, 0x1F	; 31
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	0e 94 b3 08 	call	0x1166	; 0x1166 <MSG>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 5b       	subi	r30, 0xBD	; 189
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	94 e2       	ldi	r25, 0x24	; 36
    1ec0:	a4 e7       	ldi	r26, 0x74	; 116
    1ec2:	b9 e4       	ldi	r27, 0x49	; 73
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	8e 01       	movw	r16, r28
    1ece:	01 5c       	subi	r16, 0xC1	; 193
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 5b       	subi	r30, 0xBD	; 189
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e7       	ldi	r20, 0x7A	; 122
    1ee6:	53 e4       	ldi	r21, 0x43	; 67
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efa:	fe 01       	movw	r30, r28
    1efc:	ff 96       	adiw	r30, 0x3f	; 63
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <main+0xb3e>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9e af       	std	Y+62, r25	; 0x3e
    1f1c:	8d af       	std	Y+61, r24	; 0x3d
    1f1e:	46 c0       	rjmp	.+140    	; 0x1fac <main+0xbca>
	else if (__tmp > 65535)
    1f20:	fe 01       	movw	r30, r28
    1f22:	ff 96       	adiw	r30, 0x3f	; 63
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	64 f5       	brge	.+88     	; 0x1f94 <main+0xbb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 5b       	subi	r30, 0xBD	; 189
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e af       	std	Y+62, r25	; 0x3e
    1f68:	8d af       	std	Y+61, r24	; 0x3d
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <main+0xba8>
    1f6c:	89 e1       	ldi	r24, 0x19	; 25
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9c af       	std	Y+60, r25	; 0x3c
    1f72:	8b af       	std	Y+59, r24	; 0x3b
    1f74:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f76:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <main+0xb96>
    1f7c:	9c af       	std	Y+60, r25	; 0x3c
    1f7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9e af       	std	Y+62, r25	; 0x3e
    1f88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <main+0xb8a>
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <main+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	fe 01       	movw	r30, r28
    1f96:	ff 96       	adiw	r30, 0x3f	; 63
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e af       	std	Y+62, r25	; 0x3e
    1faa:	8d af       	std	Y+61, r24	; 0x3d
    1fac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb0:	9a af       	std	Y+58, r25	; 0x3a
    1fb2:	89 af       	std	Y+57, r24	; 0x39
    1fb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <main+0xbd6>
    1fbc:	9a af       	std	Y+58, r25	; 0x3a
    1fbe:	89 af       	std	Y+57, r24	; 0x39
					}

				}while(optionVar != 2);

			}
			if(option == '-')
    1fc0:	80 91 47 01 	lds	r24, 0x0147
    1fc4:	8d 32       	cpi	r24, 0x2D	; 45
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <main+0xbe8>
    1fc8:	73 c1       	rjmp	.+742    	; 0x22b0 <main+0xece>
			{
				access();
    1fca:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <access>
				optionVar = UART_recieveByte();
    1fce:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <UART_recieveByte>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e6 55       	subi	r30, 0x56	; 86
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 83       	st	Z, r24
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e8       	ldi	r25, 0x80	; 128
    1fde:	ab eb       	ldi	r26, 0xBB	; 187
    1fe0:	b4 e4       	ldi	r27, 0x44	; 68
    1fe2:	8d ab       	std	Y+53, r24	; 0x35
    1fe4:	9e ab       	std	Y+54, r25	; 0x36
    1fe6:	af ab       	std	Y+55, r26	; 0x37
    1fe8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6d a9       	ldd	r22, Y+53	; 0x35
    1fec:	7e a9       	ldd	r23, Y+54	; 0x36
    1fee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a e7       	ldi	r20, 0x7A	; 122
    1ff8:	53 e4       	ldi	r21, 0x43	; 67
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	89 ab       	std	Y+49, r24	; 0x31
    2004:	9a ab       	std	Y+50, r25	; 0x32
    2006:	ab ab       	std	Y+51, r26	; 0x33
    2008:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    200a:	69 a9       	ldd	r22, Y+49	; 0x31
    200c:	7a a9       	ldd	r23, Y+50	; 0x32
    200e:	8b a9       	ldd	r24, Y+51	; 0x33
    2010:	9c a9       	ldd	r25, Y+52	; 0x34
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <main+0xc4a>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	98 ab       	std	Y+48, r25	; 0x30
    2028:	8f a7       	std	Y+47, r24	; 0x2f
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <main+0xcc8>
	else if (__tmp > 65535)
    202c:	69 a9       	ldd	r22, Y+49	; 0x31
    202e:	7a a9       	ldd	r23, Y+50	; 0x32
    2030:	8b a9       	ldd	r24, Y+51	; 0x33
    2032:	9c a9       	ldd	r25, Y+52	; 0x34
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <main+0xcb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6d a9       	ldd	r22, Y+53	; 0x35
    2046:	7e a9       	ldd	r23, Y+54	; 0x36
    2048:	8f a9       	ldd	r24, Y+55	; 0x37
    204a:	98 ad       	ldd	r25, Y+56	; 0x38
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	98 ab       	std	Y+48, r25	; 0x30
    206a:	8f a7       	std	Y+47, r24	; 0x2f
    206c:	0f c0       	rjmp	.+30     	; 0x208c <main+0xcaa>
    206e:	89 e1       	ldi	r24, 0x19	; 25
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9e a7       	std	Y+46, r25	; 0x2e
    2074:	8d a7       	std	Y+45, r24	; 0x2d
    2076:	8d a5       	ldd	r24, Y+45	; 0x2d
    2078:	9e a5       	ldd	r25, Y+46	; 0x2e
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0xc98>
    207e:	9e a7       	std	Y+46, r25	; 0x2e
    2080:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8f a5       	ldd	r24, Y+47	; 0x2f
    2084:	98 a9       	ldd	r25, Y+48	; 0x30
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	98 ab       	std	Y+48, r25	; 0x30
    208a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8f a5       	ldd	r24, Y+47	; 0x2f
    208e:	98 a9       	ldd	r25, Y+48	; 0x30
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <main+0xc8c>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <main+0xcdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	69 a9       	ldd	r22, Y+49	; 0x31
    2098:	7a a9       	ldd	r23, Y+50	; 0x32
    209a:	8b a9       	ldd	r24, Y+51	; 0x33
    209c:	9c a9       	ldd	r25, Y+52	; 0x34
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	98 ab       	std	Y+48, r25	; 0x30
    20a8:	8f a7       	std	Y+47, r24	; 0x2f
    20aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ac:	98 a9       	ldd	r25, Y+48	; 0x30
    20ae:	9c a7       	std	Y+44, r25	; 0x2c
    20b0:	8b a7       	std	Y+43, r24	; 0x2b
    20b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <main+0xcd4>
    20ba:	9c a7       	std	Y+44, r25	; 0x2c
    20bc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1500);
				if(optionVar == 5)
    20be:	fe 01       	movw	r30, r28
    20c0:	e6 55       	subi	r30, 0x56	; 86
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	85 30       	cpi	r24, 0x05	; 5
    20c8:	09 f0       	breq	.+2      	; 0x20cc <main+0xcea>
    20ca:	f2 c0       	rjmp	.+484    	; 0x22b0 <main+0xece>
				{
					createPass();
    20cc:	0e 94 55 09 	call	0x12aa	; 0x12aa <createPass>
					UART_sendByte(secPass.oct[0]);
    20d0:	80 91 48 01 	lds	r24, 0x0148
    20d4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a8 ec       	ldi	r26, 0xC8	; 200
    20de:	b2 e4       	ldi	r27, 0x42	; 66
    20e0:	8f a3       	std	Y+39, r24	; 0x27
    20e2:	98 a7       	std	Y+40, r25	; 0x28
    20e4:	a9 a7       	std	Y+41, r26	; 0x29
    20e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ea:	78 a5       	ldd	r23, Y+40	; 0x28
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	53 e4       	ldi	r21, 0x43	; 67
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8b a3       	std	Y+35, r24	; 0x23
    2102:	9c a3       	std	Y+36, r25	; 0x24
    2104:	ad a3       	std	Y+37, r26	; 0x25
    2106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <main+0xd48>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a a3       	std	Y+34, r25	; 0x22
    2126:	89 a3       	std	Y+33, r24	; 0x21
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <main+0xdc6>
	else if (__tmp > 65535)
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <main+0xdb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	6f a1       	ldd	r22, Y+39	; 0x27
    2144:	78 a5       	ldd	r23, Y+40	; 0x28
    2146:	89 a5       	ldd	r24, Y+41	; 0x29
    2148:	9a a5       	ldd	r25, Y+42	; 0x2a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	0f c0       	rjmp	.+30     	; 0x218a <main+0xda8>
    216c:	89 e1       	ldi	r24, 0x19	; 25
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	98 a3       	std	Y+32, r25	; 0x20
    2172:	8f 8f       	std	Y+31, r24	; 0x1f
    2174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2176:	98 a1       	ldd	r25, Y+32	; 0x20
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <main+0xd96>
    217c:	98 a3       	std	Y+32, r25	; 0x20
    217e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <main+0xd8a>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <main+0xdda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6b a1       	ldd	r22, Y+35	; 0x23
    2196:	7c a1       	ldd	r23, Y+36	; 0x24
    2198:	8d a1       	ldd	r24, Y+37	; 0x25
    219a:	9e a1       	ldd	r25, Y+38	; 0x26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	89 a1       	ldd	r24, Y+33	; 0x21
    21aa:	9a a1       	ldd	r25, Y+34	; 0x22
    21ac:	9e 8f       	std	Y+30, r25	; 0x1e
    21ae:	8d 8f       	std	Y+29, r24	; 0x1d
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <main+0xdd2>
    21b8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ba:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);
					UART_sendByte(secPass.oct[1]);
    21bc:	80 91 49 01 	lds	r24, 0x0149
    21c0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a8 ec       	ldi	r26, 0xC8	; 200
    21ca:	b2 e4       	ldi	r27, 0x42	; 66
    21cc:	89 8f       	std	Y+25, r24	; 0x19
    21ce:	9a 8f       	std	Y+26, r25	; 0x1a
    21d0:	ab 8f       	std	Y+27, r26	; 0x1b
    21d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	69 8d       	ldd	r22, Y+25	; 0x19
    21d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	53 e4       	ldi	r21, 0x43	; 67
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8d 8b       	std	Y+21, r24	; 0x15
    21ee:	9e 8b       	std	Y+22, r25	; 0x16
    21f0:	af 8b       	std	Y+23, r26	; 0x17
    21f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <main+0xe34>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 8b       	std	Y+20, r25	; 0x14
    2212:	8b 8b       	std	Y+19, r24	; 0x13
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <main+0xeb2>
	else if (__tmp > 65535)
    2216:	6d 89       	ldd	r22, Y+21	; 0x15
    2218:	7e 89       	ldd	r23, Y+22	; 0x16
    221a:	8f 89       	ldd	r24, Y+23	; 0x17
    221c:	98 8d       	ldd	r25, Y+24	; 0x18
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <main+0xe9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	69 8d       	ldd	r22, Y+25	; 0x19
    2230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <main+0xe94>
    2258:	89 e1       	ldi	r24, 0x19	; 25
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9a 8b       	std	Y+18, r25	; 0x12
    225e:	89 8b       	std	Y+17, r24	; 0x11
    2260:	89 89       	ldd	r24, Y+17	; 0x11
    2262:	9a 89       	ldd	r25, Y+18	; 0x12
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <main+0xe82>
    2268:	9a 8b       	std	Y+18, r25	; 0x12
    226a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <main+0xe76>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <main+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	98 8b       	std	Y+16, r25	; 0x10
    229a:	8f 87       	std	Y+15, r24	; 0x0f
    229c:	8f 85       	ldd	r24, Y+15	; 0x0f
    229e:	98 89       	ldd	r25, Y+16	; 0x10
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <main+0xebe>
    22a4:	98 8b       	std	Y+16, r25	; 0x10
    22a6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					MSG("Password is saved.");
    22a8:	84 ec       	ldi	r24, 0xC4	; 196
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 b3 08 	call	0x1166	; 0x1166 <MSG>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a8 e4       	ldi	r26, 0x48	; 72
    22b6:	b3 e4       	ldi	r27, 0x43	; 67
    22b8:	8b 87       	std	Y+11, r24	; 0x0b
    22ba:	9c 87       	std	Y+12, r25	; 0x0c
    22bc:	ad 87       	std	Y+13, r26	; 0x0d
    22be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	53 e4       	ldi	r21, 0x43	; 67
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8f 83       	std	Y+7, r24	; 0x07
    22da:	98 87       	std	Y+8, r25	; 0x08
    22dc:	a9 87       	std	Y+9, r26	; 0x09
    22de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <main+0xf20>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <main+0xf9e>
	else if (__tmp > 65535)
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <main+0xf8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6b 85       	ldd	r22, Y+11	; 0x0b
    231c:	7c 85       	ldd	r23, Y+12	; 0x0c
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <main+0xf80>
    2344:	89 e1       	ldi	r24, 0x19	; 25
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <main+0xf6e>
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <main+0xf62>
    236a:	b8 c9       	rjmp	.-3216   	; 0x16dc <main+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6f 81       	ldd	r22, Y+7	; 0x07
    236e:	78 85       	ldd	r23, Y+8	; 0x08
    2370:	89 85       	ldd	r24, Y+9	; 0x09
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0xfaa>
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	a3 c9       	rjmp	.-3258   	; 0x16dc <main+0x2fa>

00002396 <__vector_9>:
static volatile void (*g_callBackPtr1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;
uint8 tick =0;

ISR(TIMER0_OVF_vect)
{
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	2f 93       	push	r18
    23a2:	3f 93       	push	r19
    23a4:	4f 93       	push	r20
    23a6:	5f 93       	push	r21
    23a8:	6f 93       	push	r22
    23aa:	7f 93       	push	r23
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	tick++;
    23c0:	80 91 44 01 	lds	r24, 0x0144
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	80 93 44 01 	sts	0x0144, r24
	if(tick == 100){
    23ca:	80 91 44 01 	lds	r24, 0x0144
    23ce:	84 36       	cpi	r24, 0x64	; 100
    23d0:	a1 f4       	brne	.+40     	; 0x23fa <__vector_9+0x64>
		if(g_callBackPtr0 != NULL_PTR)
    23d2:	80 91 3e 01 	lds	r24, 0x013E
    23d6:	90 91 3f 01 	lds	r25, 0x013F
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	71 f0       	breq	.+28     	; 0x23fa <__vector_9+0x64>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23de:	e0 91 3e 01 	lds	r30, 0x013E
    23e2:	f0 91 3f 01 	lds	r31, 0x013F
    23e6:	09 95       	icall
			TIFR |= (1<<TOV0);
    23e8:	a8 e5       	ldi	r26, 0x58	; 88
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e8 e5       	ldi	r30, 0x58	; 88
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	8c 93       	st	X, r24
			Timer0_De_init();
    23f6:	0e 94 13 14 	call	0x2826	; 0x2826 <Timer0_De_init>

		}
	}
}
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	ff 91       	pop	r31
    2400:	ef 91       	pop	r30
    2402:	bf 91       	pop	r27
    2404:	af 91       	pop	r26
    2406:	9f 91       	pop	r25
    2408:	8f 91       	pop	r24
    240a:	7f 91       	pop	r23
    240c:	6f 91       	pop	r22
    240e:	5f 91       	pop	r21
    2410:	4f 91       	pop	r20
    2412:	3f 91       	pop	r19
    2414:	2f 91       	pop	r18
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	2f 93       	push	r18
    242c:	3f 93       	push	r19
    242e:	4f 93       	push	r20
    2430:	5f 93       	push	r21
    2432:	6f 93       	push	r22
    2434:	7f 93       	push	r23
    2436:	8f 93       	push	r24
    2438:	9f 93       	push	r25
    243a:	af 93       	push	r26
    243c:	bf 93       	push	r27
    243e:	ef 93       	push	r30
    2440:	ff 93       	push	r31
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    244a:	80 91 3e 01 	lds	r24, 0x013E
    244e:	90 91 3f 01 	lds	r25, 0x013F
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	29 f0       	breq	.+10     	; 0x2460 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2456:	e0 91 3e 01 	lds	r30, 0x013E
    245a:	f0 91 3f 01 	lds	r31, 0x013F
    245e:	09 95       	icall

	}
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	7f 91       	pop	r23
    2472:	6f 91       	pop	r22
    2474:	5f 91       	pop	r21
    2476:	4f 91       	pop	r20
    2478:	3f 91       	pop	r19
    247a:	2f 91       	pop	r18
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f 90       	pop	r0
    2482:	1f 90       	pop	r1
    2484:	18 95       	reti

00002486 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2486:	1f 92       	push	r1
    2488:	0f 92       	push	r0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	2f 93       	push	r18
    2492:	3f 93       	push	r19
    2494:	4f 93       	push	r20
    2496:	5f 93       	push	r21
    2498:	6f 93       	push	r22
    249a:	7f 93       	push	r23
    249c:	8f 93       	push	r24
    249e:	9f 93       	push	r25
    24a0:	af 93       	push	r26
    24a2:	bf 93       	push	r27
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    24b0:	80 91 40 01 	lds	r24, 0x0140
    24b4:	90 91 41 01 	lds	r25, 0x0141
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24bc:	e0 91 40 01 	lds	r30, 0x0140
    24c0:	f0 91 41 01 	lds	r31, 0x0141
    24c4:	09 95       	icall
	}
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    24ec:	1f 92       	push	r1
    24ee:	0f 92       	push	r0
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	0f 92       	push	r0
    24f4:	11 24       	eor	r1, r1
    24f6:	2f 93       	push	r18
    24f8:	3f 93       	push	r19
    24fa:	4f 93       	push	r20
    24fc:	5f 93       	push	r21
    24fe:	6f 93       	push	r22
    2500:	7f 93       	push	r23
    2502:	8f 93       	push	r24
    2504:	9f 93       	push	r25
    2506:	af 93       	push	r26
    2508:	bf 93       	push	r27
    250a:	ef 93       	push	r30
    250c:	ff 93       	push	r31
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2516:	80 91 40 01 	lds	r24, 0x0140
    251a:	90 91 41 01 	lds	r25, 0x0141
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	29 f0       	breq	.+10     	; 0x252c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2522:	e0 91 40 01 	lds	r30, 0x0140
    2526:	f0 91 41 01 	lds	r31, 0x0141
    252a:	09 95       	icall
	}
}
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
    2534:	bf 91       	pop	r27
    2536:	af 91       	pop	r26
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	7f 91       	pop	r23
    253e:	6f 91       	pop	r22
    2540:	5f 91       	pop	r21
    2542:	4f 91       	pop	r20
    2544:	3f 91       	pop	r19
    2546:	2f 91       	pop	r18
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	0f 90       	pop	r0
    254e:	1f 90       	pop	r1
    2550:	18 95       	reti

00002552 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2552:	1f 92       	push	r1
    2554:	0f 92       	push	r0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	0f 92       	push	r0
    255a:	11 24       	eor	r1, r1
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    257c:	80 91 42 01 	lds	r24, 0x0142
    2580:	90 91 43 01 	lds	r25, 0x0143
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	29 f0       	breq	.+10     	; 0x2592 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2588:	e0 91 42 01 	lds	r30, 0x0142
    258c:	f0 91 43 01 	lds	r31, 0x0143
    2590:	09 95       	icall
	}
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	ff 91       	pop	r31
    2598:	ef 91       	pop	r30
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	0f 90       	pop	r0
    25b4:	1f 90       	pop	r1
    25b6:	18 95       	reti

000025b8 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    25b8:	1f 92       	push	r1
    25ba:	0f 92       	push	r0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	0f 92       	push	r0
    25c0:	11 24       	eor	r1, r1
    25c2:	2f 93       	push	r18
    25c4:	3f 93       	push	r19
    25c6:	4f 93       	push	r20
    25c8:	5f 93       	push	r21
    25ca:	6f 93       	push	r22
    25cc:	7f 93       	push	r23
    25ce:	8f 93       	push	r24
    25d0:	9f 93       	push	r25
    25d2:	af 93       	push	r26
    25d4:	bf 93       	push	r27
    25d6:	ef 93       	push	r30
    25d8:	ff 93       	push	r31
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    25e2:	80 91 42 01 	lds	r24, 0x0142
    25e6:	90 91 43 01 	lds	r25, 0x0143
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	29 f0       	breq	.+10     	; 0x25f8 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25ee:	e0 91 42 01 	lds	r30, 0x0142
    25f2:	f0 91 43 01 	lds	r31, 0x0143
    25f6:	09 95       	icall
	}
}
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	ff 91       	pop	r31
    25fe:	ef 91       	pop	r30
    2600:	bf 91       	pop	r27
    2602:	af 91       	pop	r26
    2604:	9f 91       	pop	r25
    2606:	8f 91       	pop	r24
    2608:	7f 91       	pop	r23
    260a:	6f 91       	pop	r22
    260c:	5f 91       	pop	r21
    260e:	4f 91       	pop	r20
    2610:	3f 91       	pop	r19
    2612:	2f 91       	pop	r18
    2614:	0f 90       	pop	r0
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	0f 90       	pop	r0
    261a:	1f 90       	pop	r1
    261c:	18 95       	reti

0000261e <Timer_init>:

void Timer_init(const Timer_ConfigType * timerConfig)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <Timer_init+0x6>
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
	if(timerConfig->Timer_no == Timer0){
    262c:	e9 81       	ldd	r30, Y+1	; 0x01
    262e:	fa 81       	ldd	r31, Y+2	; 0x02
    2630:	80 81       	ld	r24, Z
    2632:	88 23       	and	r24, r24
    2634:	09 f0       	breq	.+2      	; 0x2638 <Timer_init+0x1a>
    2636:	4b c0       	rjmp	.+150    	; 0x26ce <Timer_init+0xb0>
		if(timerConfig->mode == normalMode)
    2638:	e9 81       	ldd	r30, Y+1	; 0x01
    263a:	fa 81       	ldd	r31, Y+2	; 0x02
    263c:	81 81       	ldd	r24, Z+1	; 0x01
    263e:	88 23       	and	r24, r24
    2640:	d9 f4       	brne	.+54     	; 0x2678 <Timer_init+0x5a>
		{
			//initial value
			TCNT0 = timerConfig->init_value;
    2642:	a2 e5       	ldi	r26, 0x52	; 82
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	83 81       	ldd	r24, Z+3	; 0x03
    264c:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0);
    264e:	a9 e5       	ldi	r26, 0x59	; 89
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e9 e5       	ldi	r30, 0x59	; 89
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	81 60       	ori	r24, 0x01	; 1
    265a:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0xF0) | (timerConfig->clk & 0x07);
    265c:	a3 e5       	ldi	r26, 0x53	; 83
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e3 e5       	ldi	r30, 0x53	; 83
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	98 2f       	mov	r25, r24
    2668:	90 7f       	andi	r25, 0xF0	; 240
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	87 70       	andi	r24, 0x07	; 7
    2672:	89 2b       	or	r24, r25
    2674:	8c 93       	st	X, r24
    2676:	d2 c0       	rjmp	.+420    	; 0x281c <Timer_init+0x1fe>


		}
		else if(timerConfig->mode == CTC)
    2678:	e9 81       	ldd	r30, Y+1	; 0x01
    267a:	fa 81       	ldd	r31, Y+2	; 0x02
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	09 f0       	breq	.+2      	; 0x2684 <Timer_init+0x66>
    2682:	cc c0       	rjmp	.+408    	; 0x281c <Timer_init+0x1fe>
		{
			//initial value
			TCNT0 = timerConfig->init_value;
    2684:	a2 e5       	ldi	r26, 0x52	; 82
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e9 81       	ldd	r30, Y+1	; 0x01
    268a:	fa 81       	ldd	r31, Y+2	; 0x02
    268c:	83 81       	ldd	r24, Z+3	; 0x03
    268e:	8c 93       	st	X, r24
			//final value
			OCR0 = timerConfig->comp_value;
    2690:	ac e5       	ldi	r26, 0x5C	; 92
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	84 81       	ldd	r24, Z+4	; 0x04
    269a:	8c 93       	st	X, r24
			// ctc mode and non inverting mode
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    269c:	e3 e5       	ldi	r30, 0x53	; 83
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	88 e8       	ldi	r24, 0x88	; 136
    26a2:	80 83       	st	Z, r24
			TIMSK |= (1<<OCIE0);
    26a4:	a9 e5       	ldi	r26, 0x59	; 89
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e9 e5       	ldi	r30, 0x59	; 89
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	82 60       	ori	r24, 0x02	; 2
    26b0:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0xF0) | (timerConfig->clk & 0x07);
    26b2:	a3 e5       	ldi	r26, 0x53	; 83
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e3 e5       	ldi	r30, 0x53	; 83
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	98 2f       	mov	r25, r24
    26be:	90 7f       	andi	r25, 0xF0	; 240
    26c0:	e9 81       	ldd	r30, Y+1	; 0x01
    26c2:	fa 81       	ldd	r31, Y+2	; 0x02
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	87 70       	andi	r24, 0x07	; 7
    26c8:	89 2b       	or	r24, r25
    26ca:	8c 93       	st	X, r24
    26cc:	a7 c0       	rjmp	.+334    	; 0x281c <Timer_init+0x1fe>
		}
	}
	else if(timerConfig->Timer_no == Timer1){
    26ce:	e9 81       	ldd	r30, Y+1	; 0x01
    26d0:	fa 81       	ldd	r31, Y+2	; 0x02
    26d2:	80 81       	ld	r24, Z
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	09 f0       	breq	.+2      	; 0x26da <Timer_init+0xbc>
    26d8:	52 c0       	rjmp	.+164    	; 0x277e <Timer_init+0x160>
		if(timerConfig->mode == normalMode)
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	81 81       	ldd	r24, Z+1	; 0x01
    26e0:	88 23       	and	r24, r24
    26e2:	f9 f4       	brne	.+62     	; 0x2722 <Timer_init+0x104>
		{
			TCNT1 = timerConfig->init_value;
    26e4:	ac e4       	ldi	r26, 0x4C	; 76
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ea:	fa 81       	ldd	r31, Y+2	; 0x02
    26ec:	83 81       	ldd	r24, Z+3	; 0x03
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	11 96       	adiw	r26, 0x01	; 1
    26f4:	9c 93       	st	X, r25
    26f6:	8e 93       	st	-X, r24
			TIMSK |= (1<<TOIE1);
    26f8:	a9 e5       	ldi	r26, 0x59	; 89
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e9 e5       	ldi	r30, 0x59	; 89
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	84 60       	ori	r24, 0x04	; 4
    2704:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0xF0) | (timerConfig->clk & 0x07);
    2706:	ae e4       	ldi	r26, 0x4E	; 78
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ee e4       	ldi	r30, 0x4E	; 78
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	98 2f       	mov	r25, r24
    2712:	90 7f       	andi	r25, 0xF0	; 240
    2714:	e9 81       	ldd	r30, Y+1	; 0x01
    2716:	fa 81       	ldd	r31, Y+2	; 0x02
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	89 2b       	or	r24, r25
    271e:	8c 93       	st	X, r24
    2720:	7d c0       	rjmp	.+250    	; 0x281c <Timer_init+0x1fe>


		}
		else if(timerConfig->mode == CTC)
    2722:	e9 81       	ldd	r30, Y+1	; 0x01
    2724:	fa 81       	ldd	r31, Y+2	; 0x02
    2726:	81 81       	ldd	r24, Z+1	; 0x01
    2728:	82 30       	cpi	r24, 0x02	; 2
    272a:	09 f0       	breq	.+2      	; 0x272e <Timer_init+0x110>
    272c:	77 c0       	rjmp	.+238    	; 0x281c <Timer_init+0x1fe>
		{
			TCNT1 = timerConfig->init_value;		/* Set timer1 initial count to zero */
    272e:	ac e4       	ldi	r26, 0x4C	; 76
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e9 81       	ldd	r30, Y+1	; 0x01
    2734:	fa 81       	ldd	r31, Y+2	; 0x02
    2736:	83 81       	ldd	r24, Z+3	; 0x03
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	9c 93       	st	X, r25
    2740:	8e 93       	st	-X, r24
			OCR1A = timerConfig->comp_value;    /* Set the Compare value to 125 ((125/500) * 100 = 25%) */
    2742:	aa e4       	ldi	r26, 0x4A	; 74
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e9 81       	ldd	r30, Y+1	; 0x01
    2748:	fa 81       	ldd	r31, Y+2	; 0x02
    274a:	84 81       	ldd	r24, Z+4	; 0x04
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	11 96       	adiw	r26, 0x01	; 1
    2752:	9c 93       	st	X, r25
    2754:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2756:	a9 e5       	ldi	r26, 0x59	; 89
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e9 e5       	ldi	r30, 0x59	; 89
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	80 61       	ori	r24, 0x10	; 16
    2762:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    2764:	ef e4       	ldi	r30, 0x4F	; 79
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	88 e0       	ldi	r24, 0x08	; 8
    276a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler =
			 */
			TCCR1B = (1<<WGM12) | (timerConfig->clk & 0x07);
    276c:	ae e4       	ldi	r26, 0x4E	; 78
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	87 70       	andi	r24, 0x07	; 7
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	8c 93       	st	X, r24
    277c:	4f c0       	rjmp	.+158    	; 0x281c <Timer_init+0x1fe>


		}
	}
	else if(timerConfig->Timer_no == Timer2){
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	80 81       	ld	r24, Z
    2784:	82 30       	cpi	r24, 0x02	; 2
    2786:	09 f0       	breq	.+2      	; 0x278a <Timer_init+0x16c>
    2788:	49 c0       	rjmp	.+146    	; 0x281c <Timer_init+0x1fe>
		if(timerConfig->mode == normalMode)
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	81 81       	ldd	r24, Z+1	; 0x01
    2790:	88 23       	and	r24, r24
    2792:	d9 f4       	brne	.+54     	; 0x27ca <Timer_init+0x1ac>
		{
			//initial value
			TCNT2 = timerConfig->init_value;
    2794:	a4 e4       	ldi	r26, 0x44	; 68
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e9 81       	ldd	r30, Y+1	; 0x01
    279a:	fa 81       	ldd	r31, Y+2	; 0x02
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2);
    27a0:	a9 e5       	ldi	r26, 0x59	; 89
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e9 e5       	ldi	r30, 0x59	; 89
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 64       	ori	r24, 0x40	; 64
    27ac:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF0) | (timerConfig->clk & 0x0F);
    27ae:	a5 e4       	ldi	r26, 0x45	; 69
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e4       	ldi	r30, 0x45	; 69
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	98 2f       	mov	r25, r24
    27ba:	90 7f       	andi	r25, 0xF0	; 240
    27bc:	e9 81       	ldd	r30, Y+1	; 0x01
    27be:	fa 81       	ldd	r31, Y+2	; 0x02
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	8f 70       	andi	r24, 0x0F	; 15
    27c4:	89 2b       	or	r24, r25
    27c6:	8c 93       	st	X, r24
    27c8:	29 c0       	rjmp	.+82     	; 0x281c <Timer_init+0x1fe>
		}
		else if(timerConfig->mode == CTC)
    27ca:	e9 81       	ldd	r30, Y+1	; 0x01
    27cc:	fa 81       	ldd	r31, Y+2	; 0x02
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	21 f5       	brne	.+72     	; 0x281c <Timer_init+0x1fe>
		{
			//initial value
			TCNT2 = timerConfig->init_value;
    27d4:	a4 e4       	ldi	r26, 0x44	; 68
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e9 81       	ldd	r30, Y+1	; 0x01
    27da:	fa 81       	ldd	r31, Y+2	; 0x02
    27dc:	83 81       	ldd	r24, Z+3	; 0x03
    27de:	8c 93       	st	X, r24
			//final value
			OCR2 = timerConfig->comp_value;
    27e0:	a3 e4       	ldi	r26, 0x43	; 67
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e9 81       	ldd	r30, Y+1	; 0x01
    27e6:	fa 81       	ldd	r31, Y+2	; 0x02
    27e8:	84 81       	ldd	r24, Z+4	; 0x04
    27ea:	8c 93       	st	X, r24
			// ctc mode and non inverting mode
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    27ec:	e5 e4       	ldi	r30, 0x45	; 69
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	88 e8       	ldi	r24, 0x88	; 136
    27f2:	80 83       	st	Z, r24
			TIMSK |= (1<<OCIE2);
    27f4:	a9 e5       	ldi	r26, 0x59	; 89
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e9 e5       	ldi	r30, 0x59	; 89
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	80 68       	ori	r24, 0x80	; 128
    2800:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF0) | (timerConfig->clk & 0x0F);
    2802:	a5 e4       	ldi	r26, 0x45	; 69
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e5 e4       	ldi	r30, 0x45	; 69
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	98 2f       	mov	r25, r24
    280e:	90 7f       	andi	r25, 0xF0	; 240
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	8f 70       	andi	r24, 0x0F	; 15
    2818:	89 2b       	or	r24, r25
    281a:	8c 93       	st	X, r24
		}
	}
}
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <Timer0_De_init>:

void Timer0_De_init()
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    282e:	e3 e5       	ldi	r30, 0x53	; 83
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	10 82       	st	Z, r1
}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <Timer1_De_init>:
void Timer1_De_init()
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
    2842:	ee e4       	ldi	r30, 0x4E	; 78
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	10 82       	st	Z, r1
}
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <Timer2_De_init>:
void Timer2_De_init()
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	TCCR2  = 0;
    2856:	e5 e4       	ldi	r30, 0x45	; 69
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	10 82       	st	Z, r1
}
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <Timer0_setCallBack+0x6>
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	90 93 3f 01 	sts	0x013F, r25
    2878:	80 93 3e 01 	sts	0x013E, r24
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <Timer1_setCallBack+0x6>
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	90 93 41 01 	sts	0x0141, r25
    289c:	80 93 40 01 	sts	0x0140, r24
}
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <Timer2_setCallBack+0x6>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	90 93 43 01 	sts	0x0143, r25
    28c0:	80 93 42 01 	sts	0x0142, r24
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <GPIO_setupPinDirection+0x6>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <GPIO_setupPinDirection+0x8>
    28d6:	0f 92       	push	r0
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	6a 83       	std	Y+2, r22	; 0x02
    28e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	88 30       	cpi	r24, 0x08	; 8
    28e6:	08 f0       	brcs	.+2      	; 0x28ea <GPIO_setupPinDirection+0x1c>
    28e8:	d5 c0       	rjmp	.+426    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <GPIO_setupPinDirection+0x24>
    28f0:	d1 c0       	rjmp	.+418    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	3d 83       	std	Y+5, r19	; 0x05
    28fa:	2c 83       	std	Y+4, r18	; 0x04
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	91 05       	cpc	r25, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <GPIO_setupPinDirection+0x3a>
    2906:	43 c0       	rjmp	.+134    	; 0x298e <GPIO_setupPinDirection+0xc0>
    2908:	2c 81       	ldd	r18, Y+4	; 0x04
    290a:	3d 81       	ldd	r19, Y+5	; 0x05
    290c:	22 30       	cpi	r18, 0x02	; 2
    290e:	31 05       	cpc	r19, r1
    2910:	2c f4       	brge	.+10     	; 0x291c <GPIO_setupPinDirection+0x4e>
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	9d 81       	ldd	r25, Y+5	; 0x05
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	71 f0       	breq	.+28     	; 0x2936 <GPIO_setupPinDirection+0x68>
    291a:	bc c0       	rjmp	.+376    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
    291c:	2c 81       	ldd	r18, Y+4	; 0x04
    291e:	3d 81       	ldd	r19, Y+5	; 0x05
    2920:	22 30       	cpi	r18, 0x02	; 2
    2922:	31 05       	cpc	r19, r1
    2924:	09 f4       	brne	.+2      	; 0x2928 <GPIO_setupPinDirection+0x5a>
    2926:	5f c0       	rjmp	.+190    	; 0x29e6 <GPIO_setupPinDirection+0x118>
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	9d 81       	ldd	r25, Y+5	; 0x05
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	91 05       	cpc	r25, r1
    2930:	09 f4       	brne	.+2      	; 0x2934 <GPIO_setupPinDirection+0x66>
    2932:	85 c0       	rjmp	.+266    	; 0x2a3e <GPIO_setupPinDirection+0x170>
    2934:	af c0       	rjmp	.+350    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	a1 f4       	brne	.+40     	; 0x2964 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    293c:	aa e3       	ldi	r26, 0x3A	; 58
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ea e3       	ldi	r30, 0x3A	; 58
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	48 2f       	mov	r20, r24
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	02 2e       	mov	r0, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <GPIO_setupPinDirection+0x8c>
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	0a 94       	dec	r0
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <GPIO_setupPinDirection+0x88>
    295e:	84 2b       	or	r24, r20
    2960:	8c 93       	st	X, r24
    2962:	98 c0       	rjmp	.+304    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2964:	aa e3       	ldi	r26, 0x3A	; 58
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	ea e3       	ldi	r30, 0x3A	; 58
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	48 2f       	mov	r20, r24
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	02 2e       	mov	r0, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <GPIO_setupPinDirection+0xb4>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	0a 94       	dec	r0
    2984:	e2 f7       	brpl	.-8      	; 0x297e <GPIO_setupPinDirection+0xb0>
    2986:	80 95       	com	r24
    2988:	84 23       	and	r24, r20
    298a:	8c 93       	st	X, r24
    298c:	83 c0       	rjmp	.+262    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	81 30       	cpi	r24, 0x01	; 1
    2992:	a1 f4       	brne	.+40     	; 0x29bc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2994:	a7 e3       	ldi	r26, 0x37	; 55
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e7 e3       	ldi	r30, 0x37	; 55
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	48 2f       	mov	r20, r24
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	02 2e       	mov	r0, r18
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <GPIO_setupPinDirection+0xe4>
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	0a 94       	dec	r0
    29b4:	e2 f7       	brpl	.-8      	; 0x29ae <GPIO_setupPinDirection+0xe0>
    29b6:	84 2b       	or	r24, r20
    29b8:	8c 93       	st	X, r24
    29ba:	6c c0       	rjmp	.+216    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    29bc:	a7 e3       	ldi	r26, 0x37	; 55
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e7 e3       	ldi	r30, 0x37	; 55
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 2e       	mov	r0, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <GPIO_setupPinDirection+0x10c>
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <GPIO_setupPinDirection+0x108>
    29de:	80 95       	com	r24
    29e0:	84 23       	and	r24, r20
    29e2:	8c 93       	st	X, r24
    29e4:	57 c0       	rjmp	.+174    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	a1 f4       	brne	.+40     	; 0x2a14 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    29ec:	a4 e3       	ldi	r26, 0x34	; 52
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e4 e3       	ldi	r30, 0x34	; 52
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	48 2f       	mov	r20, r24
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 2e       	mov	r0, r18
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <GPIO_setupPinDirection+0x13c>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	0a 94       	dec	r0
    2a0c:	e2 f7       	brpl	.-8      	; 0x2a06 <GPIO_setupPinDirection+0x138>
    2a0e:	84 2b       	or	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	40 c0       	rjmp	.+128    	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2a14:	a4 e3       	ldi	r26, 0x34	; 52
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e4 e3       	ldi	r30, 0x34	; 52
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <GPIO_setupPinDirection+0x164>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <GPIO_setupPinDirection+0x160>
    2a36:	80 95       	com	r24
    2a38:	84 23       	and	r24, r20
    2a3a:	8c 93       	st	X, r24
    2a3c:	2b c0       	rjmp	.+86     	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	a1 f4       	brne	.+40     	; 0x2a6c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2a44:	a1 e3       	ldi	r26, 0x31	; 49
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e1 e3       	ldi	r30, 0x31	; 49
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	48 2f       	mov	r20, r24
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	02 2e       	mov	r0, r18
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <GPIO_setupPinDirection+0x194>
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	0a 94       	dec	r0
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <GPIO_setupPinDirection+0x190>
    2a66:	84 2b       	or	r24, r20
    2a68:	8c 93       	st	X, r24
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2a6c:	a1 e3       	ldi	r26, 0x31	; 49
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e1 e3       	ldi	r30, 0x31	; 49
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <GPIO_setupPinDirection+0x1bc>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <GPIO_setupPinDirection+0x1b8>
    2a8e:	80 95       	com	r24
    2a90:	84 23       	and	r24, r20
    2a92:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <GPIO_writePin+0x6>
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <GPIO_writePin+0x8>
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	6a 83       	std	Y+2, r22	; 0x02
    2ab6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	88 30       	cpi	r24, 0x08	; 8
    2abc:	08 f0       	brcs	.+2      	; 0x2ac0 <GPIO_writePin+0x1c>
    2abe:	d5 c0       	rjmp	.+426    	; 0x2c6a <GPIO_writePin+0x1c6>
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	84 30       	cpi	r24, 0x04	; 4
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <GPIO_writePin+0x24>
    2ac6:	d1 c0       	rjmp	.+418    	; 0x2c6a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	3d 83       	std	Y+5, r19	; 0x05
    2ad0:	2c 83       	std	Y+4, r18	; 0x04
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	91 05       	cpc	r25, r1
    2ada:	09 f4       	brne	.+2      	; 0x2ade <GPIO_writePin+0x3a>
    2adc:	43 c0       	rjmp	.+134    	; 0x2b64 <GPIO_writePin+0xc0>
    2ade:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae2:	22 30       	cpi	r18, 0x02	; 2
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <GPIO_writePin+0x4e>
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	9d 81       	ldd	r25, Y+5	; 0x05
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	71 f0       	breq	.+28     	; 0x2b0c <GPIO_writePin+0x68>
    2af0:	bc c0       	rjmp	.+376    	; 0x2c6a <GPIO_writePin+0x1c6>
    2af2:	2c 81       	ldd	r18, Y+4	; 0x04
    2af4:	3d 81       	ldd	r19, Y+5	; 0x05
    2af6:	22 30       	cpi	r18, 0x02	; 2
    2af8:	31 05       	cpc	r19, r1
    2afa:	09 f4       	brne	.+2      	; 0x2afe <GPIO_writePin+0x5a>
    2afc:	5f c0       	rjmp	.+190    	; 0x2bbc <GPIO_writePin+0x118>
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	9d 81       	ldd	r25, Y+5	; 0x05
    2b02:	83 30       	cpi	r24, 0x03	; 3
    2b04:	91 05       	cpc	r25, r1
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <GPIO_writePin+0x66>
    2b08:	85 c0       	rjmp	.+266    	; 0x2c14 <GPIO_writePin+0x170>
    2b0a:	af c0       	rjmp	.+350    	; 0x2c6a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	a1 f4       	brne	.+40     	; 0x2b3a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2b12:	ab e3       	ldi	r26, 0x3B	; 59
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	eb e3       	ldi	r30, 0x3B	; 59
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	48 2f       	mov	r20, r24
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	02 2e       	mov	r0, r18
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <GPIO_writePin+0x8c>
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	0a 94       	dec	r0
    2b32:	e2 f7       	brpl	.-8      	; 0x2b2c <GPIO_writePin+0x88>
    2b34:	84 2b       	or	r24, r20
    2b36:	8c 93       	st	X, r24
    2b38:	98 c0       	rjmp	.+304    	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2b3a:	ab e3       	ldi	r26, 0x3B	; 59
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	eb e3       	ldi	r30, 0x3B	; 59
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	48 2f       	mov	r20, r24
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	02 2e       	mov	r0, r18
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <GPIO_writePin+0xb4>
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	0a 94       	dec	r0
    2b5a:	e2 f7       	brpl	.-8      	; 0x2b54 <GPIO_writePin+0xb0>
    2b5c:	80 95       	com	r24
    2b5e:	84 23       	and	r24, r20
    2b60:	8c 93       	st	X, r24
    2b62:	83 c0       	rjmp	.+262    	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	a1 f4       	brne	.+40     	; 0x2b92 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2b6a:	a8 e3       	ldi	r26, 0x38	; 56
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e8 e3       	ldi	r30, 0x38	; 56
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	48 2f       	mov	r20, r24
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	02 2e       	mov	r0, r18
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <GPIO_writePin+0xe4>
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	0a 94       	dec	r0
    2b8a:	e2 f7       	brpl	.-8      	; 0x2b84 <GPIO_writePin+0xe0>
    2b8c:	84 2b       	or	r24, r20
    2b8e:	8c 93       	st	X, r24
    2b90:	6c c0       	rjmp	.+216    	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2b92:	a8 e3       	ldi	r26, 0x38	; 56
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e8 e3       	ldi	r30, 0x38	; 56
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	48 2f       	mov	r20, r24
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	02 2e       	mov	r0, r18
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <GPIO_writePin+0x10c>
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	0a 94       	dec	r0
    2bb2:	e2 f7       	brpl	.-8      	; 0x2bac <GPIO_writePin+0x108>
    2bb4:	80 95       	com	r24
    2bb6:	84 23       	and	r24, r20
    2bb8:	8c 93       	st	X, r24
    2bba:	57 c0       	rjmp	.+174    	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	a1 f4       	brne	.+40     	; 0x2bea <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2bc2:	a5 e3       	ldi	r26, 0x35	; 53
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e5 e3       	ldi	r30, 0x35	; 53
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	48 2f       	mov	r20, r24
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	02 2e       	mov	r0, r18
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <GPIO_writePin+0x13c>
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	0a 94       	dec	r0
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <GPIO_writePin+0x138>
    2be4:	84 2b       	or	r24, r20
    2be6:	8c 93       	st	X, r24
    2be8:	40 c0       	rjmp	.+128    	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2bea:	a5 e3       	ldi	r26, 0x35	; 53
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e5 e3       	ldi	r30, 0x35	; 53
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	48 2f       	mov	r20, r24
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	02 2e       	mov	r0, r18
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <GPIO_writePin+0x164>
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	0a 94       	dec	r0
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <GPIO_writePin+0x160>
    2c0c:	80 95       	com	r24
    2c0e:	84 23       	and	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	2b c0       	rjmp	.+86     	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	a1 f4       	brne	.+40     	; 0x2c42 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2c1a:	a2 e3       	ldi	r26, 0x32	; 50
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e2 e3       	ldi	r30, 0x32	; 50
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <GPIO_writePin+0x194>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <GPIO_writePin+0x190>
    2c3c:	84 2b       	or	r24, r20
    2c3e:	8c 93       	st	X, r24
    2c40:	14 c0       	rjmp	.+40     	; 0x2c6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2c42:	a2 e3       	ldi	r26, 0x32	; 50
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e2 e3       	ldi	r30, 0x32	; 50
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	02 2e       	mov	r0, r18
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <GPIO_writePin+0x1bc>
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	0a 94       	dec	r0
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <GPIO_writePin+0x1b8>
    2c64:	80 95       	com	r24
    2c66:	84 23       	and	r24, r20
    2c68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <GPIO_readPin+0x6>
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <GPIO_readPin+0x8>
    2c82:	0f 92       	push	r0
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	8a 83       	std	Y+2, r24	; 0x02
    2c8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2c8c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	88 30       	cpi	r24, 0x08	; 8
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <GPIO_readPin+0x1c>
    2c94:	84 c0       	rjmp	.+264    	; 0x2d9e <GPIO_readPin+0x124>
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	84 30       	cpi	r24, 0x04	; 4
    2c9a:	08 f0       	brcs	.+2      	; 0x2c9e <GPIO_readPin+0x24>
    2c9c:	80 c0       	rjmp	.+256    	; 0x2d9e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	3d 83       	std	Y+5, r19	; 0x05
    2ca6:	2c 83       	std	Y+4, r18	; 0x04
    2ca8:	4c 81       	ldd	r20, Y+4	; 0x04
    2caa:	5d 81       	ldd	r21, Y+5	; 0x05
    2cac:	41 30       	cpi	r20, 0x01	; 1
    2cae:	51 05       	cpc	r21, r1
    2cb0:	79 f1       	breq	.+94     	; 0x2d10 <GPIO_readPin+0x96>
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb6:	82 30       	cpi	r24, 0x02	; 2
    2cb8:	91 05       	cpc	r25, r1
    2cba:	34 f4       	brge	.+12     	; 0x2cc8 <GPIO_readPin+0x4e>
    2cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc0:	21 15       	cp	r18, r1
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	69 f0       	breq	.+26     	; 0x2ce0 <GPIO_readPin+0x66>
    2cc6:	6b c0       	rjmp	.+214    	; 0x2d9e <GPIO_readPin+0x124>
    2cc8:	4c 81       	ldd	r20, Y+4	; 0x04
    2cca:	5d 81       	ldd	r21, Y+5	; 0x05
    2ccc:	42 30       	cpi	r20, 0x02	; 2
    2cce:	51 05       	cpc	r21, r1
    2cd0:	b9 f1       	breq	.+110    	; 0x2d40 <GPIO_readPin+0xc6>
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd6:	83 30       	cpi	r24, 0x03	; 3
    2cd8:	91 05       	cpc	r25, r1
    2cda:	09 f4       	brne	.+2      	; 0x2cde <GPIO_readPin+0x64>
    2cdc:	49 c0       	rjmp	.+146    	; 0x2d70 <GPIO_readPin+0xf6>
    2cde:	5f c0       	rjmp	.+190    	; 0x2d9e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2ce0:	e9 e3       	ldi	r30, 0x39	; 57
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <GPIO_readPin+0x7e>
    2cf4:	55 95       	asr	r21
    2cf6:	47 95       	ror	r20
    2cf8:	8a 95       	dec	r24
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <GPIO_readPin+0x7a>
    2cfc:	ca 01       	movw	r24, r20
    2cfe:	81 70       	andi	r24, 0x01	; 1
    2d00:	90 70       	andi	r25, 0x00	; 0
    2d02:	88 23       	and	r24, r24
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	49 c0       	rjmp	.+146    	; 0x2d9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d0c:	19 82       	std	Y+1, r1	; 0x01
    2d0e:	47 c0       	rjmp	.+142    	; 0x2d9e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2d10:	e6 e3       	ldi	r30, 0x36	; 54
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	88 2f       	mov	r24, r24
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a9 01       	movw	r20, r18
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <GPIO_readPin+0xae>
    2d24:	55 95       	asr	r21
    2d26:	47 95       	ror	r20
    2d28:	8a 95       	dec	r24
    2d2a:	e2 f7       	brpl	.-8      	; 0x2d24 <GPIO_readPin+0xaa>
    2d2c:	ca 01       	movw	r24, r20
    2d2e:	81 70       	andi	r24, 0x01	; 1
    2d30:	90 70       	andi	r25, 0x00	; 0
    2d32:	88 23       	and	r24, r24
    2d34:	19 f0       	breq	.+6      	; 0x2d3c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	31 c0       	rjmp	.+98     	; 0x2d9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
    2d3e:	2f c0       	rjmp	.+94     	; 0x2d9e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2d40:	e3 e3       	ldi	r30, 0x33	; 51
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a9 01       	movw	r20, r18
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <GPIO_readPin+0xde>
    2d54:	55 95       	asr	r21
    2d56:	47 95       	ror	r20
    2d58:	8a 95       	dec	r24
    2d5a:	e2 f7       	brpl	.-8      	; 0x2d54 <GPIO_readPin+0xda>
    2d5c:	ca 01       	movw	r24, r20
    2d5e:	81 70       	andi	r24, 0x01	; 1
    2d60:	90 70       	andi	r25, 0x00	; 0
    2d62:	88 23       	and	r24, r24
    2d64:	19 f0       	breq	.+6      	; 0x2d6c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	19 c0       	rjmp	.+50     	; 0x2d9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d6c:	19 82       	std	Y+1, r1	; 0x01
    2d6e:	17 c0       	rjmp	.+46     	; 0x2d9e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2d70:	e0 e3       	ldi	r30, 0x30	; 48
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a9 01       	movw	r20, r18
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <GPIO_readPin+0x10e>
    2d84:	55 95       	asr	r21
    2d86:	47 95       	ror	r20
    2d88:	8a 95       	dec	r24
    2d8a:	e2 f7       	brpl	.-8      	; 0x2d84 <GPIO_readPin+0x10a>
    2d8c:	ca 01       	movw	r24, r20
    2d8e:	81 70       	andi	r24, 0x01	; 1
    2d90:	90 70       	andi	r25, 0x00	; 0
    2d92:	88 23       	and	r24, r24
    2d94:	19 f0       	breq	.+6      	; 0x2d9c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	01 c0       	rjmp	.+2      	; 0x2d9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d9c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <GPIO_setupPortDirection+0x6>
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <GPIO_setupPortDirection+0x8>
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	84 30       	cpi	r24, 0x04	; 4
    2dc4:	90 f5       	brcc	.+100    	; 0x2e2a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	3c 83       	std	Y+4, r19	; 0x04
    2dce:	2b 83       	std	Y+3, r18	; 0x03
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	81 30       	cpi	r24, 0x01	; 1
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	d1 f0       	breq	.+52     	; 0x2e0e <GPIO_setupPortDirection+0x5e>
    2dda:	2b 81       	ldd	r18, Y+3	; 0x03
    2ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dde:	22 30       	cpi	r18, 0x02	; 2
    2de0:	31 05       	cpc	r19, r1
    2de2:	2c f4       	brge	.+10     	; 0x2dee <GPIO_setupPortDirection+0x3e>
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	61 f0       	breq	.+24     	; 0x2e04 <GPIO_setupPortDirection+0x54>
    2dec:	1e c0       	rjmp	.+60     	; 0x2e2a <GPIO_setupPortDirection+0x7a>
    2dee:	2b 81       	ldd	r18, Y+3	; 0x03
    2df0:	3c 81       	ldd	r19, Y+4	; 0x04
    2df2:	22 30       	cpi	r18, 0x02	; 2
    2df4:	31 05       	cpc	r19, r1
    2df6:	81 f0       	breq	.+32     	; 0x2e18 <GPIO_setupPortDirection+0x68>
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	83 30       	cpi	r24, 0x03	; 3
    2dfe:	91 05       	cpc	r25, r1
    2e00:	81 f0       	breq	.+32     	; 0x2e22 <GPIO_setupPortDirection+0x72>
    2e02:	13 c0       	rjmp	.+38     	; 0x2e2a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2e04:	ea e3       	ldi	r30, 0x3A	; 58
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	80 83       	st	Z, r24
    2e0c:	0e c0       	rjmp	.+28     	; 0x2e2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2e0e:	e7 e3       	ldi	r30, 0x37	; 55
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	80 83       	st	Z, r24
    2e16:	09 c0       	rjmp	.+18     	; 0x2e2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2e18:	e4 e3       	ldi	r30, 0x34	; 52
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	80 83       	st	Z, r24
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2e22:	e1 e3       	ldi	r30, 0x31	; 49
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	80 83       	st	Z, r24
			break;
		}
	}
}
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <GPIO_writePort+0x6>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <GPIO_writePort+0x8>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	84 30       	cpi	r24, 0x04	; 4
    2e4c:	90 f5       	brcc	.+100    	; 0x2eb2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	3c 83       	std	Y+4, r19	; 0x04
    2e56:	2b 83       	std	Y+3, r18	; 0x03
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	d1 f0       	breq	.+52     	; 0x2e96 <GPIO_writePort+0x5e>
    2e62:	2b 81       	ldd	r18, Y+3	; 0x03
    2e64:	3c 81       	ldd	r19, Y+4	; 0x04
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 05       	cpc	r19, r1
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <GPIO_writePort+0x3e>
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	61 f0       	breq	.+24     	; 0x2e8c <GPIO_writePort+0x54>
    2e74:	1e c0       	rjmp	.+60     	; 0x2eb2 <GPIO_writePort+0x7a>
    2e76:	2b 81       	ldd	r18, Y+3	; 0x03
    2e78:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7a:	22 30       	cpi	r18, 0x02	; 2
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	81 f0       	breq	.+32     	; 0x2ea0 <GPIO_writePort+0x68>
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	91 05       	cpc	r25, r1
    2e88:	81 f0       	breq	.+32     	; 0x2eaa <GPIO_writePort+0x72>
    2e8a:	13 c0       	rjmp	.+38     	; 0x2eb2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2e8c:	eb e3       	ldi	r30, 0x3B	; 59
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	80 83       	st	Z, r24
    2e94:	0e c0       	rjmp	.+28     	; 0x2eb2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2e96:	e8 e3       	ldi	r30, 0x38	; 56
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	80 83       	st	Z, r24
    2e9e:	09 c0       	rjmp	.+18     	; 0x2eb2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2ea0:	e5 e3       	ldi	r30, 0x35	; 53
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	80 83       	st	Z, r24
    2ea8:	04 c0       	rjmp	.+8      	; 0x2eb2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2eaa:	e2 e3       	ldi	r30, 0x32	; 50
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	80 83       	st	Z, r24
			break;
		}
	}
}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <GPIO_readPort+0x6>
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <GPIO_readPort+0x8>
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2ece:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	84 30       	cpi	r24, 0x04	; 4
    2ed4:	90 f5       	brcc	.+100    	; 0x2f3a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	3c 83       	std	Y+4, r19	; 0x04
    2ede:	2b 83       	std	Y+3, r18	; 0x03
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	d1 f0       	breq	.+52     	; 0x2f1e <GPIO_readPort+0x5e>
    2eea:	2b 81       	ldd	r18, Y+3	; 0x03
    2eec:	3c 81       	ldd	r19, Y+4	; 0x04
    2eee:	22 30       	cpi	r18, 0x02	; 2
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	2c f4       	brge	.+10     	; 0x2efe <GPIO_readPort+0x3e>
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	61 f0       	breq	.+24     	; 0x2f14 <GPIO_readPort+0x54>
    2efc:	1e c0       	rjmp	.+60     	; 0x2f3a <GPIO_readPort+0x7a>
    2efe:	2b 81       	ldd	r18, Y+3	; 0x03
    2f00:	3c 81       	ldd	r19, Y+4	; 0x04
    2f02:	22 30       	cpi	r18, 0x02	; 2
    2f04:	31 05       	cpc	r19, r1
    2f06:	81 f0       	breq	.+32     	; 0x2f28 <GPIO_readPort+0x68>
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	83 30       	cpi	r24, 0x03	; 3
    2f0e:	91 05       	cpc	r25, r1
    2f10:	81 f0       	breq	.+32     	; 0x2f32 <GPIO_readPort+0x72>
    2f12:	13 c0       	rjmp	.+38     	; 0x2f3a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2f14:	e9 e3       	ldi	r30, 0x39	; 57
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	0e c0       	rjmp	.+28     	; 0x2f3a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2f1e:	e6 e3       	ldi	r30, 0x36	; 54
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	09 c0       	rjmp	.+18     	; 0x2f3a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2f28:	e3 e3       	ldi	r30, 0x33	; 51
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	04 c0       	rjmp	.+8      	; 0x2f3a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2f32:	e0 e3       	ldi	r30, 0x30	; 48
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <KEYPAD_getPressedKey+0x6>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2f56:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2f58:	1b 82       	std	Y+3, r1	; 0x03
    2f5a:	43 c0       	rjmp	.+134    	; 0x2fe2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2f64:	8b 81       	ldd	r24, Y+3	; 0x03
    2f66:	98 2f       	mov	r25, r24
    2f68:	9c 5f       	subi	r25, 0xFC	; 252
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	69 2f       	mov	r22, r25
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 67 14 	call	0x28ce	; 0x28ce <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	2c 5f       	subi	r18, 0xFC	; 252
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <KEYPAD_getPressedKey+0x40>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	2a 95       	dec	r18
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <KEYPAD_getPressedKey+0x3c>
    2f8e:	80 95       	com	r24
    2f90:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	69 81       	ldd	r22, Y+1	; 0x01
    2f96:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2f9a:	1a 82       	std	Y+2, r1	; 0x02
    2f9c:	1c c0       	rjmp	.+56     	; 0x2fd6 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	6a 81       	ldd	r22, Y+2	; 0x02
    2fa2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <GPIO_readPin>
    2fa6:	88 23       	and	r24, r24
    2fa8:	99 f4       	brne	.+38     	; 0x2fd0 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	98 2f       	mov	r25, r24
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	89 0f       	add	r24, r25
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	8a 83       	std	Y+2, r24	; 0x02
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	84 30       	cpi	r24, 0x04	; 4
    2fda:	08 f3       	brcs	.-62     	; 0x2f9e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	8f 5f       	subi	r24, 0xFF	; 255
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	84 30       	cpi	r24, 0x04	; 4
    2fe6:	08 f4       	brcc	.+2      	; 0x2fea <KEYPAD_getPressedKey+0xa0>
    2fe8:	b9 cf       	rjmp	.-142    	; 0x2f5c <KEYPAD_getPressedKey+0x12>
    2fea:	b6 cf       	rjmp	.-148    	; 0x2f58 <KEYPAD_getPressedKey+0xe>

00002fec <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2ffa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	3c 83       	std	Y+4, r19	; 0x04
    3004:	2b 83       	std	Y+3, r18	; 0x03
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	88 30       	cpi	r24, 0x08	; 8
    300c:	91 05       	cpc	r25, r1
    300e:	09 f4       	brne	.+2      	; 0x3012 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3010:	70 c0       	rjmp	.+224    	; 0x30f2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3012:	2b 81       	ldd	r18, Y+3	; 0x03
    3014:	3c 81       	ldd	r19, Y+4	; 0x04
    3016:	29 30       	cpi	r18, 0x09	; 9
    3018:	31 05       	cpc	r19, r1
    301a:	5c f5       	brge	.+86     	; 0x3072 <KEYPAD_4x4_adjustKeyNumber+0x86>
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	84 30       	cpi	r24, 0x04	; 4
    3022:	91 05       	cpc	r25, r1
    3024:	09 f4       	brne	.+2      	; 0x3028 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3026:	59 c0       	rjmp	.+178    	; 0x30da <KEYPAD_4x4_adjustKeyNumber+0xee>
    3028:	2b 81       	ldd	r18, Y+3	; 0x03
    302a:	3c 81       	ldd	r19, Y+4	; 0x04
    302c:	25 30       	cpi	r18, 0x05	; 5
    302e:	31 05       	cpc	r19, r1
    3030:	9c f4       	brge	.+38     	; 0x3058 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	82 30       	cpi	r24, 0x02	; 2
    3038:	91 05       	cpc	r25, r1
    303a:	09 f4       	brne	.+2      	; 0x303e <KEYPAD_4x4_adjustKeyNumber+0x52>
    303c:	48 c0       	rjmp	.+144    	; 0x30ce <KEYPAD_4x4_adjustKeyNumber+0xe2>
    303e:	2b 81       	ldd	r18, Y+3	; 0x03
    3040:	3c 81       	ldd	r19, Y+4	; 0x04
    3042:	23 30       	cpi	r18, 0x03	; 3
    3044:	31 05       	cpc	r19, r1
    3046:	0c f0       	brlt	.+2      	; 0x304a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3048:	45 c0       	rjmp	.+138    	; 0x30d4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	91 05       	cpc	r25, r1
    3052:	09 f4       	brne	.+2      	; 0x3056 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3054:	39 c0       	rjmp	.+114    	; 0x30c8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3056:	67 c0       	rjmp	.+206    	; 0x3126 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3058:	2b 81       	ldd	r18, Y+3	; 0x03
    305a:	3c 81       	ldd	r19, Y+4	; 0x04
    305c:	26 30       	cpi	r18, 0x06	; 6
    305e:	31 05       	cpc	r19, r1
    3060:	09 f4       	brne	.+2      	; 0x3064 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3062:	41 c0       	rjmp	.+130    	; 0x30e6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	87 30       	cpi	r24, 0x07	; 7
    306a:	91 05       	cpc	r25, r1
    306c:	0c f0       	brlt	.+2      	; 0x3070 <KEYPAD_4x4_adjustKeyNumber+0x84>
    306e:	3e c0       	rjmp	.+124    	; 0x30ec <KEYPAD_4x4_adjustKeyNumber+0x100>
    3070:	37 c0       	rjmp	.+110    	; 0x30e0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3072:	2b 81       	ldd	r18, Y+3	; 0x03
    3074:	3c 81       	ldd	r19, Y+4	; 0x04
    3076:	2c 30       	cpi	r18, 0x0C	; 12
    3078:	31 05       	cpc	r19, r1
    307a:	09 f4       	brne	.+2      	; 0x307e <KEYPAD_4x4_adjustKeyNumber+0x92>
    307c:	46 c0       	rjmp	.+140    	; 0x310a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04
    3082:	8d 30       	cpi	r24, 0x0D	; 13
    3084:	91 05       	cpc	r25, r1
    3086:	5c f4       	brge	.+22     	; 0x309e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3088:	2b 81       	ldd	r18, Y+3	; 0x03
    308a:	3c 81       	ldd	r19, Y+4	; 0x04
    308c:	2a 30       	cpi	r18, 0x0A	; 10
    308e:	31 05       	cpc	r19, r1
    3090:	b1 f1       	breq	.+108    	; 0x30fe <KEYPAD_4x4_adjustKeyNumber+0x112>
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	8b 30       	cpi	r24, 0x0B	; 11
    3098:	91 05       	cpc	r25, r1
    309a:	a4 f5       	brge	.+104    	; 0x3104 <KEYPAD_4x4_adjustKeyNumber+0x118>
    309c:	2d c0       	rjmp	.+90     	; 0x30f8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    309e:	2b 81       	ldd	r18, Y+3	; 0x03
    30a0:	3c 81       	ldd	r19, Y+4	; 0x04
    30a2:	2e 30       	cpi	r18, 0x0E	; 14
    30a4:	31 05       	cpc	r19, r1
    30a6:	b9 f1       	breq	.+110    	; 0x3116 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	8e 30       	cpi	r24, 0x0E	; 14
    30ae:	91 05       	cpc	r25, r1
    30b0:	7c f1       	brlt	.+94     	; 0x3110 <KEYPAD_4x4_adjustKeyNumber+0x124>
    30b2:	2b 81       	ldd	r18, Y+3	; 0x03
    30b4:	3c 81       	ldd	r19, Y+4	; 0x04
    30b6:	2f 30       	cpi	r18, 0x0F	; 15
    30b8:	31 05       	cpc	r19, r1
    30ba:	79 f1       	breq	.+94     	; 0x311a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	80 31       	cpi	r24, 0x10	; 16
    30c2:	91 05       	cpc	r25, r1
    30c4:	69 f1       	breq	.+90     	; 0x3120 <KEYPAD_4x4_adjustKeyNumber+0x134>
    30c6:	2f c0       	rjmp	.+94     	; 0x3126 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    30c8:	87 e0       	ldi	r24, 0x07	; 7
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	2e c0       	rjmp	.+92     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    30ce:	88 e0       	ldi	r24, 0x08	; 8
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	2b c0       	rjmp	.+86     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    30d4:	89 e0       	ldi	r24, 0x09	; 9
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	28 c0       	rjmp	.+80     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    30da:	8f e2       	ldi	r24, 0x2F	; 47
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	25 c0       	rjmp	.+74     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    30e0:	84 e0       	ldi	r24, 0x04	; 4
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	22 c0       	rjmp	.+68     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    30e6:	85 e0       	ldi	r24, 0x05	; 5
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	1f c0       	rjmp	.+62     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    30ec:	86 e0       	ldi	r24, 0x06	; 6
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	1c c0       	rjmp	.+56     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    30f2:	8a e2       	ldi	r24, 0x2A	; 42
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	19 c0       	rjmp	.+50     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	16 c0       	rjmp	.+44     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	13 c0       	rjmp	.+38     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	10 c0       	rjmp	.+32     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    310a:	8d e2       	ldi	r24, 0x2D	; 45
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	0d c0       	rjmp	.+26     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3110:	8d e0       	ldi	r24, 0x0D	; 13
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	0a c0       	rjmp	.+20     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	08 c0       	rjmp	.+16     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    311a:	8d e3       	ldi	r24, 0x3D	; 61
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	05 c0       	rjmp	.+10     	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3120:	8b e2       	ldi	r24, 0x2B	; 43
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	02 c0       	rjmp	.+4      	; 0x312a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    312a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	64 e0       	ldi	r22, 0x04	; 4
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	0e 94 67 14 	call	0x28ce	; 0x28ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	65 e0       	ldi	r22, 0x05	; 5
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 67 14 	call	0x28ce	; 0x28ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3156:	83 e0       	ldi	r24, 0x03	; 3
    3158:	66 e0       	ldi	r22, 0x06	; 6
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 67 14 	call	0x28ce	; 0x28ce <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	6f ef       	ldi	r22, 0xFF	; 255
    3164:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    3168:	88 e3       	ldi	r24, 0x38	; 56
    316a:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    316e:	8c e0       	ldi	r24, 0x0C	; 12
    3170:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_sendCommand>
}
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	e9 97       	sbiw	r28, 0x39	; 57
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	89 af       	std	Y+57, r24	; 0x39
	//uint8 lcd_port_value = 0;
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	64 e0       	ldi	r22, 0x04	; 4
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	65 e0       	ldi	r22, 0x05	; 5
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a0 e8       	ldi	r26, 0x80	; 128
    31b0:	bf e3       	ldi	r27, 0x3F	; 63
    31b2:	8d ab       	std	Y+53, r24	; 0x35
    31b4:	9e ab       	std	Y+54, r25	; 0x36
    31b6:	af ab       	std	Y+55, r26	; 0x37
    31b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ba:	6d a9       	ldd	r22, Y+53	; 0x35
    31bc:	7e a9       	ldd	r23, Y+54	; 0x36
    31be:	8f a9       	ldd	r24, Y+55	; 0x37
    31c0:	98 ad       	ldd	r25, Y+56	; 0x38
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	53 e4       	ldi	r21, 0x43	; 67
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	89 ab       	std	Y+49, r24	; 0x31
    31d4:	9a ab       	std	Y+50, r25	; 0x32
    31d6:	ab ab       	std	Y+51, r26	; 0x33
    31d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31da:	69 a9       	ldd	r22, Y+49	; 0x31
    31dc:	7a a9       	ldd	r23, Y+50	; 0x32
    31de:	8b a9       	ldd	r24, Y+51	; 0x33
    31e0:	9c a9       	ldd	r25, Y+52	; 0x34
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e8       	ldi	r20, 0x80	; 128
    31e8:	5f e3       	ldi	r21, 0x3F	; 63
    31ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ee:	88 23       	and	r24, r24
    31f0:	2c f4       	brge	.+10     	; 0x31fc <LCD_sendCommand+0x7c>
		__ticks = 1;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	98 ab       	std	Y+48, r25	; 0x30
    31f8:	8f a7       	std	Y+47, r24	; 0x2f
    31fa:	3f c0       	rjmp	.+126    	; 0x327a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    31fc:	69 a9       	ldd	r22, Y+49	; 0x31
    31fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3200:	8b a9       	ldd	r24, Y+51	; 0x33
    3202:	9c a9       	ldd	r25, Y+52	; 0x34
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	3f ef       	ldi	r19, 0xFF	; 255
    3208:	4f e7       	ldi	r20, 0x7F	; 127
    320a:	57 e4       	ldi	r21, 0x47	; 71
    320c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3210:	18 16       	cp	r1, r24
    3212:	4c f5       	brge	.+82     	; 0x3266 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	6d a9       	ldd	r22, Y+53	; 0x35
    3216:	7e a9       	ldd	r23, Y+54	; 0x36
    3218:	8f a9       	ldd	r24, Y+55	; 0x37
    321a:	98 ad       	ldd	r25, Y+56	; 0x38
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e2       	ldi	r20, 0x20	; 32
    3222:	51 e4       	ldi	r21, 0x41	; 65
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	98 ab       	std	Y+48, r25	; 0x30
    323a:	8f a7       	std	Y+47, r24	; 0x2f
    323c:	0f c0       	rjmp	.+30     	; 0x325c <LCD_sendCommand+0xdc>
    323e:	89 e1       	ldi	r24, 0x19	; 25
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9e a7       	std	Y+46, r25	; 0x2e
    3244:	8d a7       	std	Y+45, r24	; 0x2d
    3246:	8d a5       	ldd	r24, Y+45	; 0x2d
    3248:	9e a5       	ldd	r25, Y+46	; 0x2e
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <LCD_sendCommand+0xca>
    324e:	9e a7       	std	Y+46, r25	; 0x2e
    3250:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3252:	8f a5       	ldd	r24, Y+47	; 0x2f
    3254:	98 a9       	ldd	r25, Y+48	; 0x30
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	98 ab       	std	Y+48, r25	; 0x30
    325a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325c:	8f a5       	ldd	r24, Y+47	; 0x2f
    325e:	98 a9       	ldd	r25, Y+48	; 0x30
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	69 f7       	brne	.-38     	; 0x323e <LCD_sendCommand+0xbe>
    3264:	14 c0       	rjmp	.+40     	; 0x328e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3266:	69 a9       	ldd	r22, Y+49	; 0x31
    3268:	7a a9       	ldd	r23, Y+50	; 0x32
    326a:	8b a9       	ldd	r24, Y+51	; 0x33
    326c:	9c a9       	ldd	r25, Y+52	; 0x34
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	98 ab       	std	Y+48, r25	; 0x30
    3278:	8f a7       	std	Y+47, r24	; 0x2f
    327a:	8f a5       	ldd	r24, Y+47	; 0x2f
    327c:	98 a9       	ldd	r25, Y+48	; 0x30
    327e:	9c a7       	std	Y+44, r25	; 0x2c
    3280:	8b a7       	std	Y+43, r24	; 0x2b
    3282:	8b a5       	ldd	r24, Y+43	; 0x2b
    3284:	9c a5       	ldd	r25, Y+44	; 0x2c
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <LCD_sendCommand+0x106>
    328a:	9c a7       	std	Y+44, r25	; 0x2c
    328c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    328e:	83 e0       	ldi	r24, 0x03	; 3
    3290:	66 e0       	ldi	r22, 0x06	; 6
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	a0 e8       	ldi	r26, 0x80	; 128
    329e:	bf e3       	ldi	r27, 0x3F	; 63
    32a0:	8f a3       	std	Y+39, r24	; 0x27
    32a2:	98 a7       	std	Y+40, r25	; 0x28
    32a4:	a9 a7       	std	Y+41, r26	; 0x29
    32a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	6f a1       	ldd	r22, Y+39	; 0x27
    32aa:	78 a5       	ldd	r23, Y+40	; 0x28
    32ac:	89 a5       	ldd	r24, Y+41	; 0x29
    32ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4a e7       	ldi	r20, 0x7A	; 122
    32b6:	53 e4       	ldi	r21, 0x43	; 67
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8b a3       	std	Y+35, r24	; 0x23
    32c2:	9c a3       	std	Y+36, r25	; 0x24
    32c4:	ad a3       	std	Y+37, r26	; 0x25
    32c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32c8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ca:	7c a1       	ldd	r23, Y+36	; 0x24
    32cc:	8d a1       	ldd	r24, Y+37	; 0x25
    32ce:	9e a1       	ldd	r25, Y+38	; 0x26
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e8       	ldi	r20, 0x80	; 128
    32d6:	5f e3       	ldi	r21, 0x3F	; 63
    32d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32dc:	88 23       	and	r24, r24
    32de:	2c f4       	brge	.+10     	; 0x32ea <LCD_sendCommand+0x16a>
		__ticks = 1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9a a3       	std	Y+34, r25	; 0x22
    32e6:	89 a3       	std	Y+33, r24	; 0x21
    32e8:	3f c0       	rjmp	.+126    	; 0x3368 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    32ea:	6b a1       	ldd	r22, Y+35	; 0x23
    32ec:	7c a1       	ldd	r23, Y+36	; 0x24
    32ee:	8d a1       	ldd	r24, Y+37	; 0x25
    32f0:	9e a1       	ldd	r25, Y+38	; 0x26
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	4f e7       	ldi	r20, 0x7F	; 127
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32fe:	18 16       	cp	r1, r24
    3300:	4c f5       	brge	.+82     	; 0x3354 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3302:	6f a1       	ldd	r22, Y+39	; 0x27
    3304:	78 a5       	ldd	r23, Y+40	; 0x28
    3306:	89 a5       	ldd	r24, Y+41	; 0x29
    3308:	9a a5       	ldd	r25, Y+42	; 0x2a
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e2       	ldi	r20, 0x20	; 32
    3310:	51 e4       	ldi	r21, 0x41	; 65
    3312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9a a3       	std	Y+34, r25	; 0x22
    3328:	89 a3       	std	Y+33, r24	; 0x21
    332a:	0f c0       	rjmp	.+30     	; 0x334a <LCD_sendCommand+0x1ca>
    332c:	89 e1       	ldi	r24, 0x19	; 25
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	98 a3       	std	Y+32, r25	; 0x20
    3332:	8f 8f       	std	Y+31, r24	; 0x1f
    3334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3336:	98 a1       	ldd	r25, Y+32	; 0x20
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_sendCommand+0x1b8>
    333c:	98 a3       	std	Y+32, r25	; 0x20
    333e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3340:	89 a1       	ldd	r24, Y+33	; 0x21
    3342:	9a a1       	ldd	r25, Y+34	; 0x22
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	9a a3       	std	Y+34, r25	; 0x22
    3348:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334a:	89 a1       	ldd	r24, Y+33	; 0x21
    334c:	9a a1       	ldd	r25, Y+34	; 0x22
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	69 f7       	brne	.-38     	; 0x332c <LCD_sendCommand+0x1ac>
    3352:	14 c0       	rjmp	.+40     	; 0x337c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3354:	6b a1       	ldd	r22, Y+35	; 0x23
    3356:	7c a1       	ldd	r23, Y+36	; 0x24
    3358:	8d a1       	ldd	r24, Y+37	; 0x25
    335a:	9e a1       	ldd	r25, Y+38	; 0x26
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9a a3       	std	Y+34, r25	; 0x22
    3366:	89 a3       	std	Y+33, r24	; 0x21
    3368:	89 a1       	ldd	r24, Y+33	; 0x21
    336a:	9a a1       	ldd	r25, Y+34	; 0x22
    336c:	9e 8f       	std	Y+30, r25	; 0x1e
    336e:	8d 8f       	std	Y+29, r24	; 0x1d
    3370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_sendCommand+0x1f4>
    3378:	9e 8f       	std	Y+30, r25	; 0x1e
    337a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    337c:	82 e0       	ldi	r24, 0x02	; 2
    337e:	69 ad       	ldd	r22, Y+57	; 0x39
    3380:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <GPIO_writePort>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e8       	ldi	r26, 0x80	; 128
    338a:	bf e3       	ldi	r27, 0x3F	; 63
    338c:	89 8f       	std	Y+25, r24	; 0x19
    338e:	9a 8f       	std	Y+26, r25	; 0x1a
    3390:	ab 8f       	std	Y+27, r26	; 0x1b
    3392:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	69 8d       	ldd	r22, Y+25	; 0x19
    3396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a e7       	ldi	r20, 0x7A	; 122
    33a2:	53 e4       	ldi	r21, 0x43	; 67
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	8d 8b       	std	Y+21, r24	; 0x15
    33ae:	9e 8b       	std	Y+22, r25	; 0x16
    33b0:	af 8b       	std	Y+23, r26	; 0x17
    33b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33b4:	6d 89       	ldd	r22, Y+21	; 0x15
    33b6:	7e 89       	ldd	r23, Y+22	; 0x16
    33b8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ba:	98 8d       	ldd	r25, Y+24	; 0x18
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c8:	88 23       	and	r24, r24
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <LCD_sendCommand+0x256>
		__ticks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9c 8b       	std	Y+20, r25	; 0x14
    33d2:	8b 8b       	std	Y+19, r24	; 0x13
    33d4:	3f c0       	rjmp	.+126    	; 0x3454 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    33d6:	6d 89       	ldd	r22, Y+21	; 0x15
    33d8:	7e 89       	ldd	r23, Y+22	; 0x16
    33da:	8f 89       	ldd	r24, Y+23	; 0x17
    33dc:	98 8d       	ldd	r25, Y+24	; 0x18
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	4c f5       	brge	.+82     	; 0x3440 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	69 8d       	ldd	r22, Y+25	; 0x19
    33f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9c 8b       	std	Y+20, r25	; 0x14
    3414:	8b 8b       	std	Y+19, r24	; 0x13
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <LCD_sendCommand+0x2b6>
    3418:	89 e1       	ldi	r24, 0x19	; 25
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	9a 8b       	std	Y+18, r25	; 0x12
    341e:	89 8b       	std	Y+17, r24	; 0x11
    3420:	89 89       	ldd	r24, Y+17	; 0x11
    3422:	9a 89       	ldd	r25, Y+18	; 0x12
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <LCD_sendCommand+0x2a4>
    3428:	9a 8b       	std	Y+18, r25	; 0x12
    342a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	8b 89       	ldd	r24, Y+19	; 0x13
    342e:	9c 89       	ldd	r25, Y+20	; 0x14
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9c 8b       	std	Y+20, r25	; 0x14
    3434:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	8b 89       	ldd	r24, Y+19	; 0x13
    3438:	9c 89       	ldd	r25, Y+20	; 0x14
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	69 f7       	brne	.-38     	; 0x3418 <LCD_sendCommand+0x298>
    343e:	14 c0       	rjmp	.+40     	; 0x3468 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3440:	6d 89       	ldd	r22, Y+21	; 0x15
    3442:	7e 89       	ldd	r23, Y+22	; 0x16
    3444:	8f 89       	ldd	r24, Y+23	; 0x17
    3446:	98 8d       	ldd	r25, Y+24	; 0x18
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9c 8b       	std	Y+20, r25	; 0x14
    3452:	8b 8b       	std	Y+19, r24	; 0x13
    3454:	8b 89       	ldd	r24, Y+19	; 0x13
    3456:	9c 89       	ldd	r25, Y+20	; 0x14
    3458:	98 8b       	std	Y+16, r25	; 0x10
    345a:	8f 87       	std	Y+15, r24	; 0x0f
    345c:	8f 85       	ldd	r24, Y+15	; 0x0f
    345e:	98 89       	ldd	r25, Y+16	; 0x10
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LCD_sendCommand+0x2e0>
    3464:	98 8b       	std	Y+16, r25	; 0x10
    3466:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	66 e0       	ldi	r22, 0x06	; 6
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	a0 e8       	ldi	r26, 0x80	; 128
    3478:	bf e3       	ldi	r27, 0x3F	; 63
    347a:	8b 87       	std	Y+11, r24	; 0x0b
    347c:	9c 87       	std	Y+12, r25	; 0x0c
    347e:	ad 87       	std	Y+13, r26	; 0x0d
    3480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3482:	6b 85       	ldd	r22, Y+11	; 0x0b
    3484:	7c 85       	ldd	r23, Y+12	; 0x0c
    3486:	8d 85       	ldd	r24, Y+13	; 0x0d
    3488:	9e 85       	ldd	r25, Y+14	; 0x0e
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	4a e7       	ldi	r20, 0x7A	; 122
    3490:	53 e4       	ldi	r21, 0x43	; 67
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	8f 83       	std	Y+7, r24	; 0x07
    349c:	98 87       	std	Y+8, r25	; 0x08
    349e:	a9 87       	std	Y+9, r26	; 0x09
    34a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a2:	6f 81       	ldd	r22, Y+7	; 0x07
    34a4:	78 85       	ldd	r23, Y+8	; 0x08
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e8       	ldi	r20, 0x80	; 128
    34b0:	5f e3       	ldi	r21, 0x3F	; 63
    34b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b6:	88 23       	and	r24, r24
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <LCD_sendCommand+0x344>
		__ticks = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	3f c0       	rjmp	.+126    	; 0x3542 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	3f ef       	ldi	r19, 0xFF	; 255
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	57 e4       	ldi	r21, 0x47	; 71
    34d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d8:	18 16       	cp	r1, r24
    34da:	4c f5       	brge	.+82     	; 0x352e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	0f c0       	rjmp	.+30     	; 0x3524 <LCD_sendCommand+0x3a4>
    3506:	89 e1       	ldi	r24, 0x19	; 25
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9c 83       	std	Y+4, r25	; 0x04
    350c:	8b 83       	std	Y+3, r24	; 0x03
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <LCD_sendCommand+0x392>
    3516:	9c 83       	std	Y+4, r25	; 0x04
    3518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	8d 81       	ldd	r24, Y+5	; 0x05
    351c:	9e 81       	ldd	r25, Y+6	; 0x06
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	69 f7       	brne	.-38     	; 0x3506 <LCD_sendCommand+0x386>
    352c:	14 c0       	rjmp	.+40     	; 0x3556 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	8d 81       	ldd	r24, Y+5	; 0x05
    3544:	9e 81       	ldd	r25, Y+6	; 0x06
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	9a 81       	ldd	r25, Y+2	; 0x02
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <LCD_sendCommand+0x3ce>
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3556:	e9 96       	adiw	r28, 0x39	; 57
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	ea 97       	sbiw	r28, 0x3a	; 58
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    357e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	64 e0       	ldi	r22, 0x04	; 4
    3584:	41 e0       	ldi	r20, 0x01	; 1
    3586:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	65 e0       	ldi	r22, 0x05	; 5
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a0 e8       	ldi	r26, 0x80	; 128
    359a:	bf e3       	ldi	r27, 0x3F	; 63
    359c:	8d ab       	std	Y+53, r24	; 0x35
    359e:	9e ab       	std	Y+54, r25	; 0x36
    35a0:	af ab       	std	Y+55, r26	; 0x37
    35a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a4:	6d a9       	ldd	r22, Y+53	; 0x35
    35a6:	7e a9       	ldd	r23, Y+54	; 0x36
    35a8:	8f a9       	ldd	r24, Y+55	; 0x37
    35aa:	98 ad       	ldd	r25, Y+56	; 0x38
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4a e7       	ldi	r20, 0x7A	; 122
    35b2:	53 e4       	ldi	r21, 0x43	; 67
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	89 ab       	std	Y+49, r24	; 0x31
    35be:	9a ab       	std	Y+50, r25	; 0x32
    35c0:	ab ab       	std	Y+51, r26	; 0x33
    35c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35c4:	69 a9       	ldd	r22, Y+49	; 0x31
    35c6:	7a a9       	ldd	r23, Y+50	; 0x32
    35c8:	8b a9       	ldd	r24, Y+51	; 0x33
    35ca:	9c a9       	ldd	r25, Y+52	; 0x34
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e8       	ldi	r20, 0x80	; 128
    35d2:	5f e3       	ldi	r21, 0x3F	; 63
    35d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d8:	88 23       	and	r24, r24
    35da:	2c f4       	brge	.+10     	; 0x35e6 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	98 ab       	std	Y+48, r25	; 0x30
    35e2:	8f a7       	std	Y+47, r24	; 0x2f
    35e4:	3f c0       	rjmp	.+126    	; 0x3664 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    35e6:	69 a9       	ldd	r22, Y+49	; 0x31
    35e8:	7a a9       	ldd	r23, Y+50	; 0x32
    35ea:	8b a9       	ldd	r24, Y+51	; 0x33
    35ec:	9c a9       	ldd	r25, Y+52	; 0x34
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	3f ef       	ldi	r19, 0xFF	; 255
    35f2:	4f e7       	ldi	r20, 0x7F	; 127
    35f4:	57 e4       	ldi	r21, 0x47	; 71
    35f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35fa:	18 16       	cp	r1, r24
    35fc:	4c f5       	brge	.+82     	; 0x3650 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3600:	7e a9       	ldd	r23, Y+54	; 0x36
    3602:	8f a9       	ldd	r24, Y+55	; 0x37
    3604:	98 ad       	ldd	r25, Y+56	; 0x38
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e2       	ldi	r20, 0x20	; 32
    360c:	51 e4       	ldi	r21, 0x41	; 65
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	98 ab       	std	Y+48, r25	; 0x30
    3624:	8f a7       	std	Y+47, r24	; 0x2f
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <LCD_displayCharacter+0xde>
    3628:	89 e1       	ldi	r24, 0x19	; 25
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9e a7       	std	Y+46, r25	; 0x2e
    362e:	8d a7       	std	Y+45, r24	; 0x2d
    3630:	8d a5       	ldd	r24, Y+45	; 0x2d
    3632:	9e a5       	ldd	r25, Y+46	; 0x2e
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <LCD_displayCharacter+0xcc>
    3638:	9e a7       	std	Y+46, r25	; 0x2e
    363a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363c:	8f a5       	ldd	r24, Y+47	; 0x2f
    363e:	98 a9       	ldd	r25, Y+48	; 0x30
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	98 ab       	std	Y+48, r25	; 0x30
    3644:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3646:	8f a5       	ldd	r24, Y+47	; 0x2f
    3648:	98 a9       	ldd	r25, Y+48	; 0x30
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	69 f7       	brne	.-38     	; 0x3628 <LCD_displayCharacter+0xc0>
    364e:	14 c0       	rjmp	.+40     	; 0x3678 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3650:	69 a9       	ldd	r22, Y+49	; 0x31
    3652:	7a a9       	ldd	r23, Y+50	; 0x32
    3654:	8b a9       	ldd	r24, Y+51	; 0x33
    3656:	9c a9       	ldd	r25, Y+52	; 0x34
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	98 ab       	std	Y+48, r25	; 0x30
    3662:	8f a7       	std	Y+47, r24	; 0x2f
    3664:	8f a5       	ldd	r24, Y+47	; 0x2f
    3666:	98 a9       	ldd	r25, Y+48	; 0x30
    3668:	9c a7       	std	Y+44, r25	; 0x2c
    366a:	8b a7       	std	Y+43, r24	; 0x2b
    366c:	8b a5       	ldd	r24, Y+43	; 0x2b
    366e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <LCD_displayCharacter+0x108>
    3674:	9c a7       	std	Y+44, r25	; 0x2c
    3676:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	66 e0       	ldi	r22, 0x06	; 6
    367c:	41 e0       	ldi	r20, 0x01	; 1
    367e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	a0 e8       	ldi	r26, 0x80	; 128
    3688:	bf e3       	ldi	r27, 0x3F	; 63
    368a:	8f a3       	std	Y+39, r24	; 0x27
    368c:	98 a7       	std	Y+40, r25	; 0x28
    368e:	a9 a7       	std	Y+41, r26	; 0x29
    3690:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3692:	6f a1       	ldd	r22, Y+39	; 0x27
    3694:	78 a5       	ldd	r23, Y+40	; 0x28
    3696:	89 a5       	ldd	r24, Y+41	; 0x29
    3698:	9a a5       	ldd	r25, Y+42	; 0x2a
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	4a e7       	ldi	r20, 0x7A	; 122
    36a0:	53 e4       	ldi	r21, 0x43	; 67
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	8b a3       	std	Y+35, r24	; 0x23
    36ac:	9c a3       	std	Y+36, r25	; 0x24
    36ae:	ad a3       	std	Y+37, r26	; 0x25
    36b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36b2:	6b a1       	ldd	r22, Y+35	; 0x23
    36b4:	7c a1       	ldd	r23, Y+36	; 0x24
    36b6:	8d a1       	ldd	r24, Y+37	; 0x25
    36b8:	9e a1       	ldd	r25, Y+38	; 0x26
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	40 e8       	ldi	r20, 0x80	; 128
    36c0:	5f e3       	ldi	r21, 0x3F	; 63
    36c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c6:	88 23       	and	r24, r24
    36c8:	2c f4       	brge	.+10     	; 0x36d4 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	9a a3       	std	Y+34, r25	; 0x22
    36d0:	89 a3       	std	Y+33, r24	; 0x21
    36d2:	3f c0       	rjmp	.+126    	; 0x3752 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    36d4:	6b a1       	ldd	r22, Y+35	; 0x23
    36d6:	7c a1       	ldd	r23, Y+36	; 0x24
    36d8:	8d a1       	ldd	r24, Y+37	; 0x25
    36da:	9e a1       	ldd	r25, Y+38	; 0x26
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	3f ef       	ldi	r19, 0xFF	; 255
    36e0:	4f e7       	ldi	r20, 0x7F	; 127
    36e2:	57 e4       	ldi	r21, 0x47	; 71
    36e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36e8:	18 16       	cp	r1, r24
    36ea:	4c f5       	brge	.+82     	; 0x373e <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ec:	6f a1       	ldd	r22, Y+39	; 0x27
    36ee:	78 a5       	ldd	r23, Y+40	; 0x28
    36f0:	89 a5       	ldd	r24, Y+41	; 0x29
    36f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e2       	ldi	r20, 0x20	; 32
    36fa:	51 e4       	ldi	r21, 0x41	; 65
    36fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	9a a3       	std	Y+34, r25	; 0x22
    3712:	89 a3       	std	Y+33, r24	; 0x21
    3714:	0f c0       	rjmp	.+30     	; 0x3734 <LCD_displayCharacter+0x1cc>
    3716:	89 e1       	ldi	r24, 0x19	; 25
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	98 a3       	std	Y+32, r25	; 0x20
    371c:	8f 8f       	std	Y+31, r24	; 0x1f
    371e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3720:	98 a1       	ldd	r25, Y+32	; 0x20
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	f1 f7       	brne	.-4      	; 0x3722 <LCD_displayCharacter+0x1ba>
    3726:	98 a3       	std	Y+32, r25	; 0x20
    3728:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372a:	89 a1       	ldd	r24, Y+33	; 0x21
    372c:	9a a1       	ldd	r25, Y+34	; 0x22
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	9a a3       	std	Y+34, r25	; 0x22
    3732:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3734:	89 a1       	ldd	r24, Y+33	; 0x21
    3736:	9a a1       	ldd	r25, Y+34	; 0x22
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	69 f7       	brne	.-38     	; 0x3716 <LCD_displayCharacter+0x1ae>
    373c:	14 c0       	rjmp	.+40     	; 0x3766 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373e:	6b a1       	ldd	r22, Y+35	; 0x23
    3740:	7c a1       	ldd	r23, Y+36	; 0x24
    3742:	8d a1       	ldd	r24, Y+37	; 0x25
    3744:	9e a1       	ldd	r25, Y+38	; 0x26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9a a3       	std	Y+34, r25	; 0x22
    3750:	89 a3       	std	Y+33, r24	; 0x21
    3752:	89 a1       	ldd	r24, Y+33	; 0x21
    3754:	9a a1       	ldd	r25, Y+34	; 0x22
    3756:	9e 8f       	std	Y+30, r25	; 0x1e
    3758:	8d 8f       	std	Y+29, r24	; 0x1d
    375a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    375c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_displayCharacter+0x1f6>
    3762:	9e 8f       	std	Y+30, r25	; 0x1e
    3764:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	6a ad       	ldd	r22, Y+58	; 0x3a
    376a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <GPIO_writePort>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	a0 e8       	ldi	r26, 0x80	; 128
    3774:	bf e3       	ldi	r27, 0x3F	; 63
    3776:	89 8f       	std	Y+25, r24	; 0x19
    3778:	9a 8f       	std	Y+26, r25	; 0x1a
    377a:	ab 8f       	std	Y+27, r26	; 0x1b
    377c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377e:	69 8d       	ldd	r22, Y+25	; 0x19
    3780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	4a e7       	ldi	r20, 0x7A	; 122
    378c:	53 e4       	ldi	r21, 0x43	; 67
    378e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	8d 8b       	std	Y+21, r24	; 0x15
    3798:	9e 8b       	std	Y+22, r25	; 0x16
    379a:	af 8b       	std	Y+23, r26	; 0x17
    379c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    379e:	6d 89       	ldd	r22, Y+21	; 0x15
    37a0:	7e 89       	ldd	r23, Y+22	; 0x16
    37a2:	8f 89       	ldd	r24, Y+23	; 0x17
    37a4:	98 8d       	ldd	r25, Y+24	; 0x18
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e8       	ldi	r20, 0x80	; 128
    37ac:	5f e3       	ldi	r21, 0x3F	; 63
    37ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37b2:	88 23       	and	r24, r24
    37b4:	2c f4       	brge	.+10     	; 0x37c0 <LCD_displayCharacter+0x258>
		__ticks = 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9c 8b       	std	Y+20, r25	; 0x14
    37bc:	8b 8b       	std	Y+19, r24	; 0x13
    37be:	3f c0       	rjmp	.+126    	; 0x383e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    37c0:	6d 89       	ldd	r22, Y+21	; 0x15
    37c2:	7e 89       	ldd	r23, Y+22	; 0x16
    37c4:	8f 89       	ldd	r24, Y+23	; 0x17
    37c6:	98 8d       	ldd	r25, Y+24	; 0x18
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	3f ef       	ldi	r19, 0xFF	; 255
    37cc:	4f e7       	ldi	r20, 0x7F	; 127
    37ce:	57 e4       	ldi	r21, 0x47	; 71
    37d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d4:	18 16       	cp	r1, r24
    37d6:	4c f5       	brge	.+82     	; 0x382a <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d8:	69 8d       	ldd	r22, Y+25	; 0x19
    37da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e2       	ldi	r20, 0x20	; 32
    37e6:	51 e4       	ldi	r21, 0x41	; 65
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	9c 8b       	std	Y+20, r25	; 0x14
    37fe:	8b 8b       	std	Y+19, r24	; 0x13
    3800:	0f c0       	rjmp	.+30     	; 0x3820 <LCD_displayCharacter+0x2b8>
    3802:	89 e1       	ldi	r24, 0x19	; 25
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	9a 8b       	std	Y+18, r25	; 0x12
    3808:	89 8b       	std	Y+17, r24	; 0x11
    380a:	89 89       	ldd	r24, Y+17	; 0x11
    380c:	9a 89       	ldd	r25, Y+18	; 0x12
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	f1 f7       	brne	.-4      	; 0x380e <LCD_displayCharacter+0x2a6>
    3812:	9a 8b       	std	Y+18, r25	; 0x12
    3814:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3816:	8b 89       	ldd	r24, Y+19	; 0x13
    3818:	9c 89       	ldd	r25, Y+20	; 0x14
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	9c 8b       	std	Y+20, r25	; 0x14
    381e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3820:	8b 89       	ldd	r24, Y+19	; 0x13
    3822:	9c 89       	ldd	r25, Y+20	; 0x14
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	69 f7       	brne	.-38     	; 0x3802 <LCD_displayCharacter+0x29a>
    3828:	14 c0       	rjmp	.+40     	; 0x3852 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	9c 8b       	std	Y+20, r25	; 0x14
    383c:	8b 8b       	std	Y+19, r24	; 0x13
    383e:	8b 89       	ldd	r24, Y+19	; 0x13
    3840:	9c 89       	ldd	r25, Y+20	; 0x14
    3842:	98 8b       	std	Y+16, r25	; 0x10
    3844:	8f 87       	std	Y+15, r24	; 0x0f
    3846:	8f 85       	ldd	r24, Y+15	; 0x0f
    3848:	98 89       	ldd	r25, Y+16	; 0x10
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_displayCharacter+0x2e2>
    384e:	98 8b       	std	Y+16, r25	; 0x10
    3850:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3852:	83 e0       	ldi	r24, 0x03	; 3
    3854:	66 e0       	ldi	r22, 0x06	; 6
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <GPIO_writePin>
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	a0 e8       	ldi	r26, 0x80	; 128
    3862:	bf e3       	ldi	r27, 0x3F	; 63
    3864:	8b 87       	std	Y+11, r24	; 0x0b
    3866:	9c 87       	std	Y+12, r25	; 0x0c
    3868:	ad 87       	std	Y+13, r26	; 0x0d
    386a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6b 85       	ldd	r22, Y+11	; 0x0b
    386e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a e7       	ldi	r20, 0x7A	; 122
    387a:	53 e4       	ldi	r21, 0x43	; 67
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	8f 83       	std	Y+7, r24	; 0x07
    3886:	98 87       	std	Y+8, r25	; 0x08
    3888:	a9 87       	std	Y+9, r26	; 0x09
    388a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	89 85       	ldd	r24, Y+9	; 0x09
    3892:	9a 85       	ldd	r25, Y+10	; 0x0a
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <LCD_displayCharacter+0x346>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    38ae:	6f 81       	ldd	r22, Y+7	; 0x07
    38b0:	78 85       	ldd	r23, Y+8	; 0x08
    38b2:	89 85       	ldd	r24, Y+9	; 0x09
    38b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    38cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9e 83       	std	Y+6, r25	; 0x06
    38ec:	8d 83       	std	Y+5, r24	; 0x05
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <LCD_displayCharacter+0x3a6>
    38f0:	89 e1       	ldi	r24, 0x19	; 25
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9c 83       	std	Y+4, r25	; 0x04
    38f6:	8b 83       	std	Y+3, r24	; 0x03
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <LCD_displayCharacter+0x394>
    3900:	9c 83       	std	Y+4, r25	; 0x04
    3902:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8d 81       	ldd	r24, Y+5	; 0x05
    3906:	9e 81       	ldd	r25, Y+6	; 0x06
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <LCD_displayCharacter+0x388>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9e 83       	std	Y+6, r25	; 0x06
    392a:	8d 83       	std	Y+5, r24	; 0x05
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_displayCharacter+0x3d0>
    393c:	9a 83       	std	Y+2, r25	; 0x02
    393e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3940:	ea 96       	adiw	r28, 0x3a	; 58
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	00 d0       	rcall	.+0      	; 0x3958 <LCD_displayString+0x6>
    3958:	0f 92       	push	r0
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	9b 83       	std	Y+3, r25	; 0x03
    3960:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3962:	19 82       	std	Y+1, r1	; 0x01
    3964:	0e c0       	rjmp	.+28     	; 0x3982 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	28 2f       	mov	r18, r24
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	8a 81       	ldd	r24, Y+2	; 0x02
    396e:	9b 81       	ldd	r25, Y+3	; 0x03
    3970:	fc 01       	movw	r30, r24
    3972:	e2 0f       	add	r30, r18
    3974:	f3 1f       	adc	r31, r19
    3976:	80 81       	ld	r24, Z
    3978:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_displayCharacter>
		i++;
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	8f 5f       	subi	r24, 0xFF	; 255
    3980:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	28 2f       	mov	r18, r24
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
    398a:	9b 81       	ldd	r25, Y+3	; 0x03
    398c:	fc 01       	movw	r30, r24
    398e:	e2 0f       	add	r30, r18
    3990:	f3 1f       	adc	r31, r19
    3992:	80 81       	ld	r24, Z
    3994:	88 23       	and	r24, r24
    3996:	39 f7       	brne	.-50     	; 0x3966 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <LCD_moveCursor+0x6>
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <LCD_moveCursor+0x8>
    39ac:	0f 92       	push	r0
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	8a 83       	std	Y+2, r24	; 0x02
    39b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	28 2f       	mov	r18, r24
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	3d 83       	std	Y+5, r19	; 0x05
    39be:	2c 83       	std	Y+4, r18	; 0x04
    39c0:	8c 81       	ldd	r24, Y+4	; 0x04
    39c2:	9d 81       	ldd	r25, Y+5	; 0x05
    39c4:	81 30       	cpi	r24, 0x01	; 1
    39c6:	91 05       	cpc	r25, r1
    39c8:	c1 f0       	breq	.+48     	; 0x39fa <LCD_moveCursor+0x56>
    39ca:	2c 81       	ldd	r18, Y+4	; 0x04
    39cc:	3d 81       	ldd	r19, Y+5	; 0x05
    39ce:	22 30       	cpi	r18, 0x02	; 2
    39d0:	31 05       	cpc	r19, r1
    39d2:	2c f4       	brge	.+10     	; 0x39de <LCD_moveCursor+0x3a>
    39d4:	8c 81       	ldd	r24, Y+4	; 0x04
    39d6:	9d 81       	ldd	r25, Y+5	; 0x05
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	61 f0       	breq	.+24     	; 0x39f4 <LCD_moveCursor+0x50>
    39dc:	19 c0       	rjmp	.+50     	; 0x3a10 <LCD_moveCursor+0x6c>
    39de:	2c 81       	ldd	r18, Y+4	; 0x04
    39e0:	3d 81       	ldd	r19, Y+5	; 0x05
    39e2:	22 30       	cpi	r18, 0x02	; 2
    39e4:	31 05       	cpc	r19, r1
    39e6:	69 f0       	breq	.+26     	; 0x3a02 <LCD_moveCursor+0x5e>
    39e8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ea:	9d 81       	ldd	r25, Y+5	; 0x05
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	91 05       	cpc	r25, r1
    39f0:	61 f0       	breq	.+24     	; 0x3a0a <LCD_moveCursor+0x66>
    39f2:	0e c0       	rjmp	.+28     	; 0x3a10 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	0b c0       	rjmp	.+22     	; 0x3a10 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    39fa:	8b 81       	ldd	r24, Y+3	; 0x03
    39fc:	80 5c       	subi	r24, 0xC0	; 192
    39fe:	89 83       	std	Y+1, r24	; 0x01
    3a00:	07 c0       	rjmp	.+14     	; 0x3a10 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	80 5f       	subi	r24, 0xF0	; 240
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	03 c0       	rjmp	.+6      	; 0x3a10 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	80 5b       	subi	r24, 0xB0	; 176
    3a0e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	80 68       	ori	r24, 0x80	; 128
    3a14:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_sendCommand>
}
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <LCD_displayStringRowColumn+0x6>
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <LCD_displayStringRowColumn+0x8>
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	89 83       	std	Y+1, r24	; 0x01
    3a36:	6a 83       	std	Y+2, r22	; 0x02
    3a38:	5c 83       	std	Y+4, r21	; 0x04
    3a3a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	6a 81       	ldd	r22, Y+2	; 0x02
    3a40:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	9c 81       	ldd	r25, Y+4	; 0x04
    3a48:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
}
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	08 95       	ret

00003a5a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	62 97       	sbiw	r28, 0x12	; 18
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	9a 8b       	std	Y+18, r25	; 0x12
    3a70:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3a72:	89 89       	ldd	r24, Y+17	; 0x11
    3a74:	9a 89       	ldd	r25, Y+18	; 0x12
    3a76:	9e 01       	movw	r18, r28
    3a78:	2f 5f       	subi	r18, 0xFF	; 255
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	b9 01       	movw	r22, r18
    3a7e:	4a e0       	ldi	r20, 0x0A	; 10
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <itoa>
   LCD_displayString(buff); /* Display the string */
    3a86:	ce 01       	movw	r24, r28
    3a88:	01 96       	adiw	r24, 0x01	; 1
    3a8a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayString>
}
    3a8e:	62 96       	adiw	r28, 0x12	; 18
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_sendCommand>
}
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * uartConfig)
{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <UART_init+0x6>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <UART_init+0x8>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9c 83       	std	Y+4, r25	; 0x04
    3ac2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3ac4:	1a 82       	std	Y+2, r1	; 0x02
    3ac6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	if(uartConfig->syncMode == Async_Double_Speed_mode)
    3ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    3aca:	fc 81       	ldd	r31, Y+4	; 0x04
    3acc:	84 81       	ldd	r24, Z+4	; 0x04
    3ace:	81 30       	cpi	r24, 0x01	; 1
    3ad0:	21 f4       	brne	.+8      	; 0x3ada <UART_init+0x26>
	{
		UCSRA = (1<<U2X);
    3ad2:	eb e2       	ldi	r30, 0x2B	; 43
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3ada:	ea e2       	ldi	r30, 0x2A	; 42
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	88 e1       	ldi	r24, 0x18	; 24
    3ae0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 1 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3ae2:	e0 e4       	ldi	r30, 0x40	; 64
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	86 e8       	ldi	r24, 0x86	; 134
    3ae8:	80 83       	st	Z, r24
	// if frame size = 9 bits
	if(uartConfig->bitSize == BIT_9)
    3aea:	eb 81       	ldd	r30, Y+3	; 0x03
    3aec:	fc 81       	ldd	r31, Y+4	; 0x04
    3aee:	86 81       	ldd	r24, Z+6	; 0x06
    3af0:	87 30       	cpi	r24, 0x07	; 7
    3af2:	39 f4       	brne	.+14     	; 0x3b02 <UART_init+0x4e>
	{
		UCSRB |= (1 << UCSZ2);
    3af4:	aa e2       	ldi	r26, 0x2A	; 42
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	ea e2       	ldi	r30, 0x2A	; 42
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	84 60       	ori	r24, 0x04	; 4
    3b00:	8c 93       	st	X, r24
	}

	//parity mode configure
	if(uartConfig->parityMode == ODD_parity)
    3b02:	eb 81       	ldd	r30, Y+3	; 0x03
    3b04:	fc 81       	ldd	r31, Y+4	; 0x04
    3b06:	85 81       	ldd	r24, Z+5	; 0x05
    3b08:	82 30       	cpi	r24, 0x02	; 2
    3b0a:	41 f4       	brne	.+16     	; 0x3b1c <UART_init+0x68>
	{
		UCSRC |= (1 << UPM1);
    3b0c:	a0 e4       	ldi	r26, 0x40	; 64
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	e0 e4       	ldi	r30, 0x40	; 64
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	80 62       	ori	r24, 0x20	; 32
    3b18:	8c 93       	st	X, r24
    3b1a:	0c c0       	rjmp	.+24     	; 0x3b34 <UART_init+0x80>
	}
	else if(uartConfig->parityMode == EVEN_parity)
    3b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b20:	85 81       	ldd	r24, Z+5	; 0x05
    3b22:	83 30       	cpi	r24, 0x03	; 3
    3b24:	39 f4       	brne	.+14     	; 0x3b34 <UART_init+0x80>
	{
		UCSRC |= (1 << UPM1) |(1 << UPM0) ;
    3b26:	a0 e4       	ldi	r26, 0x40	; 64
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	e0 e4       	ldi	r30, 0x40	; 64
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	80 63       	ori	r24, 0x30	; 48
    3b32:	8c 93       	st	X, r24
	}

	//Stop Bit Configure
	if(uartConfig->stopBit == Enable)
    3b34:	eb 81       	ldd	r30, Y+3	; 0x03
    3b36:	fc 81       	ldd	r31, Y+4	; 0x04
    3b38:	87 81       	ldd	r24, Z+7	; 0x07
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	39 f4       	brne	.+14     	; 0x3b4c <UART_init+0x98>
	{
		UCSRC |= (1 << USBS);
    3b3e:	a0 e4       	ldi	r26, 0x40	; 64
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e0 e4       	ldi	r30, 0x40	; 64
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	88 60       	ori	r24, 0x08	; 8
    3b4a:	8c 93       	st	X, r24
	}

	//BUAD Rate configure
	if(uartConfig->bitSize == BIT_6)
    3b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b50:	86 81       	ldd	r24, Z+6	; 0x06
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	41 f4       	brne	.+16     	; 0x3b66 <UART_init+0xb2>
		UCSRC |= (1 << UCSZ0);
    3b56:	a0 e4       	ldi	r26, 0x40	; 64
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e0 e4       	ldi	r30, 0x40	; 64
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	82 60       	ori	r24, 0x02	; 2
    3b62:	8c 93       	st	X, r24
    3b64:	1e c0       	rjmp	.+60     	; 0x3ba2 <UART_init+0xee>
	else if(uartConfig->bitSize == BIT_7)
    3b66:	eb 81       	ldd	r30, Y+3	; 0x03
    3b68:	fc 81       	ldd	r31, Y+4	; 0x04
    3b6a:	86 81       	ldd	r24, Z+6	; 0x06
    3b6c:	82 30       	cpi	r24, 0x02	; 2
    3b6e:	41 f4       	brne	.+16     	; 0x3b80 <UART_init+0xcc>
		UCSRC |= (1 << UCSZ1);
    3b70:	a0 e4       	ldi	r26, 0x40	; 64
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	e0 e4       	ldi	r30, 0x40	; 64
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	84 60       	ori	r24, 0x04	; 4
    3b7c:	8c 93       	st	X, r24
    3b7e:	11 c0       	rjmp	.+34     	; 0x3ba2 <UART_init+0xee>
	else if(uartConfig->bitSize == BIT_8 || uartConfig->bitSize == BIT_9 )
    3b80:	eb 81       	ldd	r30, Y+3	; 0x03
    3b82:	fc 81       	ldd	r31, Y+4	; 0x04
    3b84:	86 81       	ldd	r24, Z+6	; 0x06
    3b86:	83 30       	cpi	r24, 0x03	; 3
    3b88:	29 f0       	breq	.+10     	; 0x3b94 <UART_init+0xe0>
    3b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b8e:	86 81       	ldd	r24, Z+6	; 0x06
    3b90:	87 30       	cpi	r24, 0x07	; 7
    3b92:	39 f4       	brne	.+14     	; 0x3ba2 <UART_init+0xee>
		UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    3b94:	a0 e4       	ldi	r26, 0x40	; 64
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	e0 e4       	ldi	r30, 0x40	; 64
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	86 60       	ori	r24, 0x06	; 6
    3ba0:	8c 93       	st	X, r24



		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / (uartConfig->buadRate * 8UL))) - 1);
    3ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba6:	80 81       	ld	r24, Z
    3ba8:	91 81       	ldd	r25, Z+1	; 0x01
    3baa:	a2 81       	ldd	r26, Z+2	; 0x02
    3bac:	b3 81       	ldd	r27, Z+3	; 0x03
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	aa 1f       	adc	r26, r26
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	aa 1f       	adc	r26, r26
    3bc4:	bb 1f       	adc	r27, r27
    3bc6:	9c 01       	movw	r18, r24
    3bc8:	ad 01       	movw	r20, r26
    3bca:	80 e4       	ldi	r24, 0x40	; 64
    3bcc:	92 e4       	ldi	r25, 0x42	; 66
    3bce:	af e0       	ldi	r26, 0x0F	; 15
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    3bda:	da 01       	movw	r26, r20
    3bdc:	c9 01       	movw	r24, r18
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	9a 83       	std	Y+2, r25	; 0x02
    3be2:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    3be4:	e0 e4       	ldi	r30, 0x40	; 64
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	89 2f       	mov	r24, r25
    3bee:	99 27       	eor	r25, r25
    3bf0:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    3bf2:	e9 e2       	ldi	r30, 0x29	; 41
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	80 83       	st	Z, r24
}
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	cf 91       	pop	r28
    3c04:	df 91       	pop	r29
    3c06:	08 95       	ret

00003c08 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	0f 92       	push	r0
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c14:	eb e2       	ldi	r30, 0x2B	; 43
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	88 2f       	mov	r24, r24
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	80 72       	andi	r24, 0x20	; 32
    3c20:	90 70       	andi	r25, 0x00	; 0
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	b9 f3       	breq	.-18     	; 0x3c14 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3c26:	ec e2       	ldi	r30, 0x2C	; 44
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3c2e:	0f 90       	pop	r0
    3c30:	cf 91       	pop	r28
    3c32:	df 91       	pop	r29
    3c34:	08 95       	ret

00003c36 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3c36:	df 93       	push	r29
    3c38:	cf 93       	push	r28
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c3e:	eb e2       	ldi	r30, 0x2B	; 43
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	88 23       	and	r24, r24
    3c46:	dc f7       	brge	.-10     	; 0x3c3e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3c48:	ec e2       	ldi	r30, 0x2C	; 44
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
}
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	00 d0       	rcall	.+0      	; 0x3c5a <UART_sendString+0x6>
    3c5a:	0f 92       	push	r0
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	9b 83       	std	Y+3, r25	; 0x03
    3c62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c64:	19 82       	std	Y+1, r1	; 0x01
    3c66:	0e c0       	rjmp	.+28     	; 0x3c84 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	28 2f       	mov	r18, r24
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	9b 81       	ldd	r25, Y+3	; 0x03
    3c72:	fc 01       	movw	r30, r24
    3c74:	e2 0f       	add	r30, r18
    3c76:	f3 1f       	adc	r31, r19
    3c78:	80 81       	ld	r24, Z
    3c7a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
		i++;
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	8f 5f       	subi	r24, 0xFF	; 255
    3c82:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	28 2f       	mov	r18, r24
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8e:	fc 01       	movw	r30, r24
    3c90:	e2 0f       	add	r30, r18
    3c92:	f3 1f       	adc	r31, r19
    3c94:	80 81       	ld	r24, Z
    3c96:	88 23       	and	r24, r24
    3c98:	39 f7       	brne	.-50     	; 0x3c68 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('\0');
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <UART_receiveString+0xa>
    3cb6:	0f 92       	push	r0
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	9b 83       	std	Y+3, r25	; 0x03
    3cbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3cc0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	9b 81       	ldd	r25, Y+3	; 0x03
    3ccc:	8c 01       	movw	r16, r24
    3cce:	02 0f       	add	r16, r18
    3cd0:	13 1f       	adc	r17, r19
    3cd2:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <UART_recieveByte>
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	80 83       	st	Z, r24
    3cda:	0f c0       	rjmp	.+30     	; 0x3cfa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
	{
		i++;
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	8f 5f       	subi	r24, 0xFF	; 255
    3ce0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	8c 01       	movw	r16, r24
    3cee:	02 0f       	add	r16, r18
    3cf0:	13 1f       	adc	r17, r19
    3cf2:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <UART_recieveByte>
    3cf6:	f8 01       	movw	r30, r16
    3cf8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	8a 81       	ldd	r24, Y+2	; 0x02
    3d02:	9b 81       	ldd	r25, Y+3	; 0x03
    3d04:	fc 01       	movw	r30, r24
    3d06:	e2 0f       	add	r30, r18
    3d08:	f3 1f       	adc	r31, r19
    3d0a:	80 81       	ld	r24, Z
    3d0c:	88 23       	and	r24, r24
    3d0e:	31 f7       	brne	.-52     	; 0x3cdc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
    3d12:	28 2f       	mov	r18, r24
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	8a 81       	ldd	r24, Y+2	; 0x02
    3d18:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	e2 0f       	add	r30, r18
    3d1e:	f3 1f       	adc	r31, r19
    3d20:	10 82       	st	Z, r1
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	1f 91       	pop	r17
    3d2e:	0f 91       	pop	r16
    3d30:	08 95       	ret

00003d32 <__udivmodhi4>:
    3d32:	aa 1b       	sub	r26, r26
    3d34:	bb 1b       	sub	r27, r27
    3d36:	51 e1       	ldi	r21, 0x11	; 17
    3d38:	07 c0       	rjmp	.+14     	; 0x3d48 <__udivmodhi4_ep>

00003d3a <__udivmodhi4_loop>:
    3d3a:	aa 1f       	adc	r26, r26
    3d3c:	bb 1f       	adc	r27, r27
    3d3e:	a6 17       	cp	r26, r22
    3d40:	b7 07       	cpc	r27, r23
    3d42:	10 f0       	brcs	.+4      	; 0x3d48 <__udivmodhi4_ep>
    3d44:	a6 1b       	sub	r26, r22
    3d46:	b7 0b       	sbc	r27, r23

00003d48 <__udivmodhi4_ep>:
    3d48:	88 1f       	adc	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	5a 95       	dec	r21
    3d4e:	a9 f7       	brne	.-22     	; 0x3d3a <__udivmodhi4_loop>
    3d50:	80 95       	com	r24
    3d52:	90 95       	com	r25
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	08 95       	ret

00003d5a <__udivmodsi4>:
    3d5a:	a1 e2       	ldi	r26, 0x21	; 33
    3d5c:	1a 2e       	mov	r1, r26
    3d5e:	aa 1b       	sub	r26, r26
    3d60:	bb 1b       	sub	r27, r27
    3d62:	fd 01       	movw	r30, r26
    3d64:	0d c0       	rjmp	.+26     	; 0x3d80 <__udivmodsi4_ep>

00003d66 <__udivmodsi4_loop>:
    3d66:	aa 1f       	adc	r26, r26
    3d68:	bb 1f       	adc	r27, r27
    3d6a:	ee 1f       	adc	r30, r30
    3d6c:	ff 1f       	adc	r31, r31
    3d6e:	a2 17       	cp	r26, r18
    3d70:	b3 07       	cpc	r27, r19
    3d72:	e4 07       	cpc	r30, r20
    3d74:	f5 07       	cpc	r31, r21
    3d76:	20 f0       	brcs	.+8      	; 0x3d80 <__udivmodsi4_ep>
    3d78:	a2 1b       	sub	r26, r18
    3d7a:	b3 0b       	sbc	r27, r19
    3d7c:	e4 0b       	sbc	r30, r20
    3d7e:	f5 0b       	sbc	r31, r21

00003d80 <__udivmodsi4_ep>:
    3d80:	66 1f       	adc	r22, r22
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 1f       	adc	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	1a 94       	dec	r1
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <__udivmodsi4_loop>
    3d8c:	60 95       	com	r22
    3d8e:	70 95       	com	r23
    3d90:	80 95       	com	r24
    3d92:	90 95       	com	r25
    3d94:	9b 01       	movw	r18, r22
    3d96:	ac 01       	movw	r20, r24
    3d98:	bd 01       	movw	r22, r26
    3d9a:	cf 01       	movw	r24, r30
    3d9c:	08 95       	ret

00003d9e <__prologue_saves__>:
    3d9e:	2f 92       	push	r2
    3da0:	3f 92       	push	r3
    3da2:	4f 92       	push	r4
    3da4:	5f 92       	push	r5
    3da6:	6f 92       	push	r6
    3da8:	7f 92       	push	r7
    3daa:	8f 92       	push	r8
    3dac:	9f 92       	push	r9
    3dae:	af 92       	push	r10
    3db0:	bf 92       	push	r11
    3db2:	cf 92       	push	r12
    3db4:	df 92       	push	r13
    3db6:	ef 92       	push	r14
    3db8:	ff 92       	push	r15
    3dba:	0f 93       	push	r16
    3dbc:	1f 93       	push	r17
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	ca 1b       	sub	r28, r26
    3dc8:	db 0b       	sbc	r29, r27
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	09 94       	ijmp

00003dd6 <__epilogue_restores__>:
    3dd6:	2a 88       	ldd	r2, Y+18	; 0x12
    3dd8:	39 88       	ldd	r3, Y+17	; 0x11
    3dda:	48 88       	ldd	r4, Y+16	; 0x10
    3ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dde:	6e 84       	ldd	r6, Y+14	; 0x0e
    3de0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3de2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3de4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3de6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3de8:	b9 84       	ldd	r11, Y+9	; 0x09
    3dea:	c8 84       	ldd	r12, Y+8	; 0x08
    3dec:	df 80       	ldd	r13, Y+7	; 0x07
    3dee:	ee 80       	ldd	r14, Y+6	; 0x06
    3df0:	fd 80       	ldd	r15, Y+5	; 0x05
    3df2:	0c 81       	ldd	r16, Y+4	; 0x04
    3df4:	1b 81       	ldd	r17, Y+3	; 0x03
    3df6:	aa 81       	ldd	r26, Y+2	; 0x02
    3df8:	b9 81       	ldd	r27, Y+1	; 0x01
    3dfa:	ce 0f       	add	r28, r30
    3dfc:	d1 1d       	adc	r29, r1
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	ed 01       	movw	r28, r26
    3e0a:	08 95       	ret

00003e0c <itoa>:
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	9f 01       	movw	r18, r30
    3e10:	e8 94       	clt
    3e12:	42 30       	cpi	r20, 0x02	; 2
    3e14:	c4 f0       	brlt	.+48     	; 0x3e46 <itoa+0x3a>
    3e16:	45 32       	cpi	r20, 0x25	; 37
    3e18:	b4 f4       	brge	.+44     	; 0x3e46 <itoa+0x3a>
    3e1a:	4a 30       	cpi	r20, 0x0A	; 10
    3e1c:	29 f4       	brne	.+10     	; 0x3e28 <itoa+0x1c>
    3e1e:	97 fb       	bst	r25, 7
    3e20:	1e f4       	brtc	.+6      	; 0x3e28 <itoa+0x1c>
    3e22:	90 95       	com	r25
    3e24:	81 95       	neg	r24
    3e26:	9f 4f       	sbci	r25, 0xFF	; 255
    3e28:	64 2f       	mov	r22, r20
    3e2a:	77 27       	eor	r23, r23
    3e2c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__udivmodhi4>
    3e30:	80 5d       	subi	r24, 0xD0	; 208
    3e32:	8a 33       	cpi	r24, 0x3A	; 58
    3e34:	0c f0       	brlt	.+2      	; 0x3e38 <itoa+0x2c>
    3e36:	89 5d       	subi	r24, 0xD9	; 217
    3e38:	81 93       	st	Z+, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	a1 f7       	brne	.-24     	; 0x3e28 <itoa+0x1c>
    3e40:	16 f4       	brtc	.+4      	; 0x3e46 <itoa+0x3a>
    3e42:	5d e2       	ldi	r21, 0x2D	; 45
    3e44:	51 93       	st	Z+, r21
    3e46:	10 82       	st	Z, r1
    3e48:	c9 01       	movw	r24, r18
    3e4a:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <strrev>

00003e4e <strrev>:
    3e4e:	dc 01       	movw	r26, r24
    3e50:	fc 01       	movw	r30, r24
    3e52:	67 2f       	mov	r22, r23
    3e54:	71 91       	ld	r23, Z+
    3e56:	77 23       	and	r23, r23
    3e58:	e1 f7       	brne	.-8      	; 0x3e52 <strrev+0x4>
    3e5a:	32 97       	sbiw	r30, 0x02	; 2
    3e5c:	04 c0       	rjmp	.+8      	; 0x3e66 <strrev+0x18>
    3e5e:	7c 91       	ld	r23, X
    3e60:	6d 93       	st	X+, r22
    3e62:	70 83       	st	Z, r23
    3e64:	62 91       	ld	r22, -Z
    3e66:	ae 17       	cp	r26, r30
    3e68:	bf 07       	cpc	r27, r31
    3e6a:	c8 f3       	brcs	.-14     	; 0x3e5e <strrev+0x10>
    3e6c:	08 95       	ret

00003e6e <_exit>:
    3e6e:	f8 94       	cli

00003e70 <__stop_program>:
    3e70:	ff cf       	rjmp	.-2      	; 0x3e70 <__stop_program>
