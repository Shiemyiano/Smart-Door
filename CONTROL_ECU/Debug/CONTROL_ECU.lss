
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003cb0  00003d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  00003d54  2**0
                  ALLOC
  3 .stab         000032dc  00000000  00000000  00003d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a2  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000083d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008512  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c351  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_3>
      10:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_8>
      24:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 0c 	call	0x1996	; 0x1996 <main>
      8a:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include "Buzzer.h"
#include "gpio.h"
#include "TIMER.h"

void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID,Buzzer_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_ON>:
void Buzzer_ON()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID,Buzzer_PIN_ID,LOGIC_HIGH);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_OFF>:
void Buzzer_OFF()
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID,Buzzer_PIN_ID,LOGIC_LOW);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_Init>:
#include "PMW.h"
#include "gpio.h"
#include "DCMOTOR.h"

/*Functions initiate the DC_MOTOR (H/W layer) to configure with MC */
void DcMotor_Init(void){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	/* configure DC_MOTOR pins (PB0,PB1) as output pins */
	GPIO_setupPinDirection(MOTOR1_PORT_ID,MOTOR1_PIN_ID, PIN_OUTPUT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR2_PORT_ID,MOTOR2_PIN_ID, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	/*
	 * Motor is stop at the beginning
	 * ideal case Motor is stopped
	 * */
	GPIO_writePin(MOTOR1_PORT_ID,MOTOR1_PIN_ID,LOGIC_LOW);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(MOTOR2_PORT_ID,MOTOR2_PIN_ID,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <DcMotor_Rotate>:
 * Function definition to control direction and speed of motor
 * speed of motor depend on current temperature
 * we make all direction possible for motor but in our case we work only with CW
 * */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <DcMotor_Rotate+0x6>
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	8a 83       	std	Y+2, r24	; 0x02
     bd2:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * DutyCycle is a local var to store Duty_Cycle
	 * This equation convert from (0 to 100 ) speed into ( 0 to 255 ) Bits
	 * */
	uint8 DutyCycle = (speed*TOTAL_NUMBER_OF_ROTATE)/100;
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	48 2f       	mov	r20, r24
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	ca 01       	movw	r24, r20
     bdc:	9c 01       	movw	r18, r24
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	c9 01       	movw	r24, r18
     be4:	96 95       	lsr	r25
     be6:	98 2f       	mov	r25, r24
     be8:	88 27       	eor	r24, r24
     bea:	97 95       	ror	r25
     bec:	87 95       	ror	r24
     bee:	82 1b       	sub	r24, r18
     bf0:	93 0b       	sbc	r25, r19
     bf2:	84 0f       	add	r24, r20
     bf4:	95 1f       	adc	r25, r21
     bf6:	24 e6       	ldi	r18, 0x64	; 100
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	b9 01       	movw	r22, r18
     bfc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__divmodhi4>
     c00:	cb 01       	movw	r24, r22
     c02:	89 83       	std	Y+1, r24	; 0x01
	 * configure Motor pins depend on direction
	 * applying high to one pin and zero to other pin
	 *
	 * in case stop, applying zero to both of pins
	 * */
	if (state == CW){
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	88 23       	and	r24, r24
     c08:	71 f4       	brne	.+28     	; 0xc26 <DcMotor_Rotate+0x62>
		Timer0_PWM_Init(DutyCycle);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_PWM_Init>
		GPIO_writePin(MOTOR2_PORT_ID,MOTOR1_PIN_ID,LOGIC_HIGH);
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(MOTOR1_PORT_ID,MOTOR2_PIN_ID,LOGIC_LOW);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
     c24:	1e c0       	rjmp	.+60     	; 0xc62 <DcMotor_Rotate+0x9e>
	}
	else if (state == A_CW){
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	71 f4       	brne	.+28     	; 0xc48 <DcMotor_Rotate+0x84>
		Timer0_PWM_Init(DutyCycle );
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_PWM_Init>
		GPIO_writePin(MOTOR2_PORT_ID,MOTOR2_PIN_ID,LOGIC_HIGH);
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(MOTOR1_PORT_ID,MOTOR1_PIN_ID,LOGIC_LOW);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <DcMotor_Rotate+0x9e>
	}
	else if (state == Stop)
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	51 f4       	brne	.+20     	; 0xc62 <DcMotor_Rotate+0x9e>
	{
		GPIO_writePin(MOTOR1_PORT_ID,MOTOR1_PIN_ID,LOGIC_LOW);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(MOTOR2_PORT_ID,MOTOR2_PIN_ID,LOGIC_LOW);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	}
}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <DcMotor_DE_Init>:

void DcMotor_DE_Init()
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(MOTOR2_PORT_ID,MOTOR1_PIN_ID,LOGIC_LOW);
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(MOTOR1_PORT_ID,MOTOR2_PIN_ID,LOGIC_LOW);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <Timer0_PWM_Init>:
#include <avr/io.h>
#include "gpio.h"
#include <util/delay.h>

void Timer0_PWM_Init(uint8 set_duty_cycle)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
     c9c:	e2 e5       	ldi	r30, 0x52	; 82
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; //Set Compare value
     ca2:	ec e5       	ldi	r30, 0x5C	; 92
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	80 83       	st	Z, r24

	 // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID ,PIN_OUTPUT);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	63 e0       	ldi	r22, 0x03	; 3
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8a e6       	ldi	r24, 0x6A	; 106
     cba:	80 83       	st	Z, r24
}
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <__vector_9>:
static volatile void (*g_callBackPtr0)(void) = NULL_PTR;
static volatile void (*g_callBackPtr1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     cee:	80 91 70 00 	lds	r24, 0x0070
     cf2:	90 91 71 00 	lds	r25, 0x0071
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	29 f0       	breq	.+10     	; 0xd04 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     cfa:	e0 91 70 00 	lds	r30, 0x0070
     cfe:	f0 91 71 00 	lds	r31, 0x0071
     d02:	09 95       	icall
	}
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     d54:	80 91 70 00 	lds	r24, 0x0070
     d58:	90 91 71 00 	lds	r25, 0x0071
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	29 f0       	breq	.+10     	; 0xd6a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     d60:	e0 91 70 00 	lds	r30, 0x0070
     d64:	f0 91 71 00 	lds	r31, 0x0071
     d68:	09 95       	icall
	}
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	ff 91       	pop	r31
     d70:	ef 91       	pop	r30
     d72:	bf 91       	pop	r27
     d74:	af 91       	pop	r26
     d76:	9f 91       	pop	r25
     d78:	8f 91       	pop	r24
     d7a:	7f 91       	pop	r23
     d7c:	6f 91       	pop	r22
     d7e:	5f 91       	pop	r21
     d80:	4f 91       	pop	r20
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     dba:	80 91 72 00 	lds	r24, 0x0072
     dbe:	90 91 73 00 	lds	r25, 0x0073
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     dc6:	e0 91 72 00 	lds	r30, 0x0072
     dca:	f0 91 73 00 	lds	r31, 0x0073
     dce:	09 95       	icall
	}
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     e20:	80 91 72 00 	lds	r24, 0x0072
     e24:	90 91 73 00 	lds	r25, 0x0073
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	29 f0       	breq	.+10     	; 0xe36 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e2c:	e0 91 72 00 	lds	r30, 0x0072
     e30:	f0 91 73 00 	lds	r31, 0x0073
     e34:	09 95       	icall
	}
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_4>:
ISR(TIMER2_OVF_vect)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     e86:	80 91 74 00 	lds	r24, 0x0074
     e8a:	90 91 75 00 	lds	r25, 0x0075
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	29 f0       	breq	.+10     	; 0xe9c <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e92:	e0 91 74 00 	lds	r30, 0x0074
     e96:	f0 91 75 00 	lds	r31, 0x0075
     e9a:	09 95       	icall
	}
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     eec:	80 91 74 00 	lds	r24, 0x0074
     ef0:	90 91 75 00 	lds	r25, 0x0075
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	29 f0       	breq	.+10     	; 0xf02 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ef8:	e0 91 74 00 	lds	r30, 0x0074
     efc:	f0 91 75 00 	lds	r31, 0x0075
     f00:	09 95       	icall
	}
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <Timer_init>:

void Timer_init(const Timer_ConfigType * timerConfig)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <Timer_init+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	if(timerConfig->Timer_no == Timer0){
     f36:	e9 81       	ldd	r30, Y+1	; 0x01
     f38:	fa 81       	ldd	r31, Y+2	; 0x02
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	09 f0       	breq	.+2      	; 0xf42 <Timer_init+0x1a>
     f40:	4b c0       	rjmp	.+150    	; 0xfd8 <Timer_init+0xb0>
		if(timerConfig->mode == normalMode)
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	88 23       	and	r24, r24
     f4a:	d9 f4       	brne	.+54     	; 0xf82 <Timer_init+0x5a>
		{
			//initial value
			TCNT0 = timerConfig->init_value;
     f4c:	a2 e5       	ldi	r26, 0x52	; 82
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e9 81       	ldd	r30, Y+1	; 0x01
     f52:	fa 81       	ldd	r31, Y+2	; 0x02
     f54:	83 81       	ldd	r24, Z+3	; 0x03
     f56:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0);
     f58:	a9 e5       	ldi	r26, 0x59	; 89
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e9 e5       	ldi	r30, 0x59	; 89
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	81 60       	ori	r24, 0x01	; 1
     f64:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0xF0) | (timerConfig->clk & 0x07);
     f66:	a3 e5       	ldi	r26, 0x53	; 83
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e5       	ldi	r30, 0x53	; 83
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	98 2f       	mov	r25, r24
     f72:	90 7f       	andi	r25, 0xF0	; 240
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	87 70       	andi	r24, 0x07	; 7
     f7c:	89 2b       	or	r24, r25
     f7e:	8c 93       	st	X, r24
     f80:	d2 c0       	rjmp	.+420    	; 0x1126 <Timer_init+0x1fe>
		}
		else if(timerConfig->mode == CTC)
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f0       	breq	.+2      	; 0xf8e <Timer_init+0x66>
     f8c:	cc c0       	rjmp	.+408    	; 0x1126 <Timer_init+0x1fe>
		{
			//initial value
			TCNT0 = timerConfig->init_value;
     f8e:	a2 e5       	ldi	r26, 0x52	; 82
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e9 81       	ldd	r30, Y+1	; 0x01
     f94:	fa 81       	ldd	r31, Y+2	; 0x02
     f96:	83 81       	ldd	r24, Z+3	; 0x03
     f98:	8c 93       	st	X, r24
			//final value
			OCR0 = timerConfig->comp_value;
     f9a:	ac e5       	ldi	r26, 0x5C	; 92
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	84 81       	ldd	r24, Z+4	; 0x04
     fa4:	8c 93       	st	X, r24
			// ctc mode and non inverting mode
			TCCR0 = (1<<FOC0) | (1<<WGM01);
     fa6:	e3 e5       	ldi	r30, 0x53	; 83
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	88 e8       	ldi	r24, 0x88	; 136
     fac:	80 83       	st	Z, r24
			TIMSK |= (1<<OCIE0);
     fae:	a9 e5       	ldi	r26, 0x59	; 89
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e9 e5       	ldi	r30, 0x59	; 89
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0xF0) | (timerConfig->clk & 0x07);
     fbc:	a3 e5       	ldi	r26, 0x53	; 83
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e3 e5       	ldi	r30, 0x53	; 83
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	98 2f       	mov	r25, r24
     fc8:	90 7f       	andi	r25, 0xF0	; 240
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	87 70       	andi	r24, 0x07	; 7
     fd2:	89 2b       	or	r24, r25
     fd4:	8c 93       	st	X, r24
     fd6:	a7 c0       	rjmp	.+334    	; 0x1126 <Timer_init+0x1fe>
		}
	}
	else if(timerConfig->Timer_no == Timer1){
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	80 81       	ld	r24, Z
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <Timer_init+0xbc>
     fe2:	52 c0       	rjmp	.+164    	; 0x1088 <Timer_init+0x160>
		if(timerConfig->mode == normalMode)
     fe4:	e9 81       	ldd	r30, Y+1	; 0x01
     fe6:	fa 81       	ldd	r31, Y+2	; 0x02
     fe8:	81 81       	ldd	r24, Z+1	; 0x01
     fea:	88 23       	and	r24, r24
     fec:	f9 f4       	brne	.+62     	; 0x102c <Timer_init+0x104>
		{
			TCNT1 = timerConfig->init_value;
     fee:	ac e4       	ldi	r26, 0x4C	; 76
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e9 81       	ldd	r30, Y+1	; 0x01
     ff4:	fa 81       	ldd	r31, Y+2	; 0x02
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
			TIMSK |= (1<<TOIE1);
    1002:	a9 e5       	ldi	r26, 0x59	; 89
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e9 e5       	ldi	r30, 0x59	; 89
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0xF0) | (timerConfig->clk & 0x07);
    1010:	ae e4       	ldi	r26, 0x4E	; 78
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ee e4       	ldi	r30, 0x4E	; 78
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	98 2f       	mov	r25, r24
    101c:	90 7f       	andi	r25, 0xF0	; 240
    101e:	e9 81       	ldd	r30, Y+1	; 0x01
    1020:	fa 81       	ldd	r31, Y+2	; 0x02
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	87 70       	andi	r24, 0x07	; 7
    1026:	89 2b       	or	r24, r25
    1028:	8c 93       	st	X, r24
    102a:	7d c0       	rjmp	.+250    	; 0x1126 <Timer_init+0x1fe>

		}
		else if(timerConfig->mode == CTC)
    102c:	e9 81       	ldd	r30, Y+1	; 0x01
    102e:	fa 81       	ldd	r31, Y+2	; 0x02
    1030:	81 81       	ldd	r24, Z+1	; 0x01
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	09 f0       	breq	.+2      	; 0x1038 <Timer_init+0x110>
    1036:	77 c0       	rjmp	.+238    	; 0x1126 <Timer_init+0x1fe>
		{
			TCNT1 = timerConfig->init_value;		/* Set timer1 initial count to zero */
    1038:	ac e4       	ldi	r26, 0x4C	; 76
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	9c 93       	st	X, r25
    104a:	8e 93       	st	-X, r24
			OCR1A = timerConfig->comp_value;    /* Set the Compare value to 125 ((125/500) * 100 = 25%) */
    104c:	aa e4       	ldi	r26, 0x4A	; 74
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 81       	ldd	r30, Y+1	; 0x01
    1052:	fa 81       	ldd	r31, Y+2	; 0x02
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	9c 93       	st	X, r25
    105e:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    1060:	a9 e5       	ldi	r26, 0x59	; 89
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e9 e5       	ldi	r30, 0x59	; 89
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    106e:	ef e4       	ldi	r30, 0x4F	; 79
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler =
			 */
			TCCR1B = (1<<WGM12) | (timerConfig->clk & 0x07);
    1076:	ae e4       	ldi	r26, 0x4E	; 78
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 81       	ldd	r30, Y+1	; 0x01
    107c:	fa 81       	ldd	r31, Y+2	; 0x02
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	87 70       	andi	r24, 0x07	; 7
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	8c 93       	st	X, r24
    1086:	4f c0       	rjmp	.+158    	; 0x1126 <Timer_init+0x1fe>


		}
	}
	else if(timerConfig->Timer_no == Timer2){
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	80 81       	ld	r24, Z
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	09 f0       	breq	.+2      	; 0x1094 <Timer_init+0x16c>
    1092:	49 c0       	rjmp	.+146    	; 0x1126 <Timer_init+0x1fe>
		if(timerConfig->mode == normalMode)
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	81 81       	ldd	r24, Z+1	; 0x01
    109a:	88 23       	and	r24, r24
    109c:	d9 f4       	brne	.+54     	; 0x10d4 <Timer_init+0x1ac>
		{
			//initial value
			TCNT2 = timerConfig->init_value;
    109e:	a4 e4       	ldi	r26, 0x44	; 68
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	83 81       	ldd	r24, Z+3	; 0x03
    10a8:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2);
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF0) | (timerConfig->clk & 0x0F);
    10b8:	a5 e4       	ldi	r26, 0x45	; 69
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e4       	ldi	r30, 0x45	; 69
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	98 2f       	mov	r25, r24
    10c4:	90 7f       	andi	r25, 0xF0	; 240
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	8f 70       	andi	r24, 0x0F	; 15
    10ce:	89 2b       	or	r24, r25
    10d0:	8c 93       	st	X, r24
    10d2:	29 c0       	rjmp	.+82     	; 0x1126 <Timer_init+0x1fe>
		}
		else if(timerConfig->mode == CTC)
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	81 81       	ldd	r24, Z+1	; 0x01
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	21 f5       	brne	.+72     	; 0x1126 <Timer_init+0x1fe>
		{
			//initial value
			TCNT2 = timerConfig->init_value;
    10de:	a4 e4       	ldi	r26, 0x44	; 68
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	83 81       	ldd	r24, Z+3	; 0x03
    10e8:	8c 93       	st	X, r24
			//final value
			OCR2 = timerConfig->comp_value;
    10ea:	a3 e4       	ldi	r26, 0x43	; 67
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	84 81       	ldd	r24, Z+4	; 0x04
    10f4:	8c 93       	st	X, r24
			// ctc mode and non inverting mode
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    10f6:	e5 e4       	ldi	r30, 0x45	; 69
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	88 e8       	ldi	r24, 0x88	; 136
    10fc:	80 83       	st	Z, r24
			TIMSK |= (1<<OCIE2);
    10fe:	a9 e5       	ldi	r26, 0x59	; 89
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e9 e5       	ldi	r30, 0x59	; 89
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF0) | (timerConfig->clk & 0x0F);
    110c:	a5 e4       	ldi	r26, 0x45	; 69
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e4       	ldi	r30, 0x45	; 69
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	98 2f       	mov	r25, r24
    1118:	90 7f       	andi	r25, 0xF0	; 240
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	8f 70       	andi	r24, 0x0F	; 15
    1122:	89 2b       	or	r24, r25
    1124:	8c 93       	st	X, r24
		}
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <Timer0_De_init>:

void Timer0_De_init()
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	10 82       	st	Z, r1
}
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <Timer1_De_init>:
void Timer1_De_init()
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
    114c:	ee e4       	ldi	r30, 0x4E	; 78
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	10 82       	st	Z, r1
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <Timer2_De_init>:
void Timer2_De_init()
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	TCCR2  = 0;
    1160:	e5 e4       	ldi	r30, 0x45	; 69
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	10 82       	st	Z, r1
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <Timer0_setCallBack+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	90 93 71 00 	sts	0x0071, r25
    1182:	80 93 70 00 	sts	0x0070, r24
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <Timer1_setCallBack+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	90 93 73 00 	sts	0x0073, r25
    11a6:	80 93 72 00 	sts	0x0072, r24
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <Timer2_setCallBack+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	90 93 75 00 	sts	0x0075, r25
    11ca:	80 93 74 00 	sts	0x0074, r24
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <EEPROM_writeByte+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <EEPROM_writeByte+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ea:	0e 94 30 1c 	call	0x3860	; 0x3860 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11ee:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	11 f0       	breq	.+4      	; 0x11fa <EEPROM_writeByte+0x22>
        return ERROR;
    11f6:	1c 82       	std	Y+4, r1	; 0x04
    11f8:	28 c0       	rjmp	.+80     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	80 70       	andi	r24, 0x00	; 0
    1200:	97 70       	andi	r25, 0x07	; 7
    1202:	88 0f       	add	r24, r24
    1204:	89 2f       	mov	r24, r25
    1206:	88 1f       	adc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	91 95       	neg	r25
    120c:	80 6a       	ori	r24, 0xA0	; 160
    120e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1212:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    1216:	88 31       	cpi	r24, 0x18	; 24
    1218:	11 f0       	breq	.+4      	; 0x121e <EEPROM_writeByte+0x46>
        return ERROR; 
    121a:	1c 82       	std	Y+4, r1	; 0x04
    121c:	16 c0       	rjmp	.+44     	; 0x124a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1224:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    1228:	88 32       	cpi	r24, 0x28	; 40
    122a:	11 f0       	breq	.+4      	; 0x1230 <EEPROM_writeByte+0x58>
        return ERROR;
    122c:	1c 82       	std	Y+4, r1	; 0x04
    122e:	0d c0       	rjmp	.+26     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1236:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    123a:	88 32       	cpi	r24, 0x28	; 40
    123c:	11 f0       	breq	.+4      	; 0x1242 <EEPROM_writeByte+0x6a>
        return ERROR;
    123e:	1c 82       	std	Y+4, r1	; 0x04
    1240:	04 c0       	rjmp	.+8      	; 0x124a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1242:	0e 94 40 1c 	call	0x3880	; 0x3880 <TWI_stop>
	
    return SUCCESS;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8c 83       	std	Y+4, r24	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <EEPROM_readByte+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <EEPROM_readByte+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	7c 83       	std	Y+4, r23	; 0x04
    126e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1270:	0e 94 30 1c 	call	0x3860	; 0x3860 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1274:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	11 f0       	breq	.+4      	; 0x1280 <EEPROM_readByte+0x26>
        return ERROR;
    127c:	1d 82       	std	Y+5, r1	; 0x05
    127e:	44 c0       	rjmp	.+136    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	80 70       	andi	r24, 0x00	; 0
    1286:	97 70       	andi	r25, 0x07	; 7
    1288:	88 0f       	add	r24, r24
    128a:	89 2f       	mov	r24, r25
    128c:	88 1f       	adc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	91 95       	neg	r25
    1292:	80 6a       	ori	r24, 0xA0	; 160
    1294:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1298:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    129c:	88 31       	cpi	r24, 0x18	; 24
    129e:	11 f0       	breq	.+4      	; 0x12a4 <EEPROM_readByte+0x4a>
        return ERROR;
    12a0:	1d 82       	std	Y+5, r1	; 0x05
    12a2:	32 c0       	rjmp	.+100    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12aa:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    12ae:	88 32       	cpi	r24, 0x28	; 40
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <EEPROM_readByte+0x5c>
        return ERROR;
    12b2:	1d 82       	std	Y+5, r1	; 0x05
    12b4:	29 c0       	rjmp	.+82     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12b6:	0e 94 30 1c 	call	0x3860	; 0x3860 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12ba:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <EEPROM_readByte+0x6c>
        return ERROR;
    12c2:	1d 82       	std	Y+5, r1	; 0x05
    12c4:	21 c0       	rjmp	.+66     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	80 70       	andi	r24, 0x00	; 0
    12cc:	97 70       	andi	r25, 0x07	; 7
    12ce:	88 0f       	add	r24, r24
    12d0:	89 2f       	mov	r24, r25
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	91 95       	neg	r25
    12d8:	81 6a       	ori	r24, 0xA1	; 161
    12da:	0e 94 4b 1c 	call	0x3896	; 0x3896 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12de:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    12e2:	80 34       	cpi	r24, 0x40	; 64
    12e4:	11 f0       	breq	.+4      	; 0x12ea <EEPROM_readByte+0x90>
        return ERROR;
    12e6:	1d 82       	std	Y+5, r1	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12ea:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_readByteWithNACK>
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12f4:	0e 94 88 1c 	call	0x3910	; 0x3910 <TWI_getStatus>
    12f8:	88 35       	cpi	r24, 0x58	; 88
    12fa:	11 f0       	breq	.+4      	; 0x1300 <EEPROM_readByte+0xa6>
        return ERROR;
    12fc:	1d 82       	std	Y+5, r1	; 0x05
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1300:	0e 94 40 1c 	call	0x3880	; 0x3880 <TWI_stop>

    return SUCCESS;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_setupPinDirection+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_setupPinDirection+0x8>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	6a 83       	std	Y+2, r22	; 0x02
    132c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	08 f0       	brcs	.+2      	; 0x1336 <GPIO_setupPinDirection+0x1c>
    1334:	d5 c0       	rjmp	.+426    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	08 f0       	brcs	.+2      	; 0x133e <GPIO_setupPinDirection+0x24>
    133c:	d1 c0       	rjmp	.+418    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3d 83       	std	Y+5, r19	; 0x05
    1346:	2c 83       	std	Y+4, r18	; 0x04
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <GPIO_setupPinDirection+0x3a>
    1352:	43 c0       	rjmp	.+134    	; 0x13da <GPIO_setupPinDirection+0xc0>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <GPIO_setupPinDirection+0x4e>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <GPIO_setupPinDirection+0x68>
    1366:	bc c0       	rjmp	.+376    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x5a>
    1372:	5f c0       	rjmp	.+190    	; 0x1432 <GPIO_setupPinDirection+0x118>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_setupPinDirection+0x66>
    137e:	85 c0       	rjmp	.+266    	; 0x148a <GPIO_setupPinDirection+0x170>
    1380:	af c0       	rjmp	.+350    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_setupPinDirection+0x8c>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_setupPinDirection+0x88>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	98 c0       	rjmp	.+304    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13b0:	aa e3       	ldi	r26, 0x3A	; 58
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_setupPinDirection+0xb4>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_setupPinDirection+0xb0>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	83 c0       	rjmp	.+262    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_setupPinDirection+0xe4>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_setupPinDirection+0xe0>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	6c c0       	rjmp	.+216    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1408:	a7 e3       	ldi	r26, 0x37	; 55
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_setupPinDirection+0x10c>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_setupPinDirection+0x108>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	57 c0       	rjmp	.+174    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1438:	a4 e3       	ldi	r26, 0x34	; 52
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e4 e3       	ldi	r30, 0x34	; 52
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_setupPinDirection+0x13c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_setupPinDirection+0x138>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	40 c0       	rjmp	.+128    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1460:	a4 e3       	ldi	r26, 0x34	; 52
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_setupPinDirection+0x164>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_setupPinDirection+0x160>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	2b c0       	rjmp	.+86     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	a1 f4       	brne	.+40     	; 0x14b8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1490:	a1 e3       	ldi	r26, 0x31	; 49
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_setupPinDirection+0x194>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_setupPinDirection+0x190>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <GPIO_setupPinDirection+0x1bc>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <GPIO_setupPinDirection+0x1b8>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_writePin+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_writePin+0x8>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
    1502:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 30       	cpi	r24, 0x08	; 8
    1508:	08 f0       	brcs	.+2      	; 0x150c <GPIO_writePin+0x1c>
    150a:	d5 c0       	rjmp	.+426    	; 0x16b6 <GPIO_writePin+0x1c6>
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	08 f0       	brcs	.+2      	; 0x1514 <GPIO_writePin+0x24>
    1512:	d1 c0       	rjmp	.+418    	; 0x16b6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <GPIO_writePin+0x3a>
    1528:	43 c0       	rjmp	.+134    	; 0x15b0 <GPIO_writePin+0xc0>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	2c f4       	brge	.+10     	; 0x153e <GPIO_writePin+0x4e>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	71 f0       	breq	.+28     	; 0x1558 <GPIO_writePin+0x68>
    153c:	bc c0       	rjmp	.+376    	; 0x16b6 <GPIO_writePin+0x1c6>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x5a>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <GPIO_writePin+0x118>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <GPIO_writePin+0x66>
    1554:	85 c0       	rjmp	.+266    	; 0x1660 <GPIO_writePin+0x170>
    1556:	af c0       	rjmp	.+350    	; 0x16b6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_writePin+0x8c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_writePin+0x88>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	98 c0       	rjmp	.+304    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1586:	ab e3       	ldi	r26, 0x3B	; 59
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_writePin+0xb4>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_writePin+0xb0>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	83 c0       	rjmp	.+262    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15b6:	a8 e3       	ldi	r26, 0x38	; 56
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_writePin+0xe4>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_writePin+0xe0>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	6c c0       	rjmp	.+216    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15de:	a8 e3       	ldi	r26, 0x38	; 56
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e8 e3       	ldi	r30, 0x38	; 56
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_writePin+0x10c>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_writePin+0x108>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	a1 f4       	brne	.+40     	; 0x1636 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    160e:	a5 e3       	ldi	r26, 0x35	; 53
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e3       	ldi	r30, 0x35	; 53
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_writePin+0x13c>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_writePin+0x138>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	40 c0       	rjmp	.+128    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_writePin+0x164>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_writePin+0x160>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	2b c0       	rjmp	.+86     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a1 f4       	brne	.+40     	; 0x168e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1666:	a2 e3       	ldi	r26, 0x32	; 50
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_writePin+0x194>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_writePin+0x190>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <GPIO_writePin+0x1bc>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <GPIO_writePin+0x1b8>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_readPin+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <GPIO_readPin+0x8>
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16d8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 30       	cpi	r24, 0x08	; 8
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <GPIO_readPin+0x1c>
    16e0:	84 c0       	rjmp	.+264    	; 0x17ea <GPIO_readPin+0x124>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_readPin+0x24>
    16e8:	80 c0       	rjmp	.+256    	; 0x17ea <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3d 83       	std	Y+5, r19	; 0x05
    16f2:	2c 83       	std	Y+4, r18	; 0x04
    16f4:	4c 81       	ldd	r20, Y+4	; 0x04
    16f6:	5d 81       	ldd	r21, Y+5	; 0x05
    16f8:	41 30       	cpi	r20, 0x01	; 1
    16fa:	51 05       	cpc	r21, r1
    16fc:	79 f1       	breq	.+94     	; 0x175c <GPIO_readPin+0x96>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	91 05       	cpc	r25, r1
    1706:	34 f4       	brge	.+12     	; 0x1714 <GPIO_readPin+0x4e>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	21 15       	cp	r18, r1
    170e:	31 05       	cpc	r19, r1
    1710:	69 f0       	breq	.+26     	; 0x172c <GPIO_readPin+0x66>
    1712:	6b c0       	rjmp	.+214    	; 0x17ea <GPIO_readPin+0x124>
    1714:	4c 81       	ldd	r20, Y+4	; 0x04
    1716:	5d 81       	ldd	r21, Y+5	; 0x05
    1718:	42 30       	cpi	r20, 0x02	; 2
    171a:	51 05       	cpc	r21, r1
    171c:	b9 f1       	breq	.+110    	; 0x178c <GPIO_readPin+0xc6>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <GPIO_readPin+0x64>
    1728:	49 c0       	rjmp	.+146    	; 0x17bc <GPIO_readPin+0xf6>
    172a:	5f c0       	rjmp	.+190    	; 0x17ea <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    172c:	e9 e3       	ldi	r30, 0x39	; 57
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_readPin+0x7e>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_readPin+0x7a>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	88 23       	and	r24, r24
    1750:	19 f0       	breq	.+6      	; 0x1758 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	49 c0       	rjmp	.+146    	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	47 c0       	rjmp	.+142    	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    175c:	e6 e3       	ldi	r30, 0x36	; 54
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_readPin+0xae>
    1770:	55 95       	asr	r21
    1772:	47 95       	ror	r20
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_readPin+0xaa>
    1778:	ca 01       	movw	r24, r20
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	88 23       	and	r24, r24
    1780:	19 f0       	breq	.+6      	; 0x1788 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	31 c0       	rjmp	.+98     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	2f c0       	rjmp	.+94     	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    178c:	e3 e3       	ldi	r30, 0x33	; 51
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_readPin+0xde>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_readPin+0xda>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	88 23       	and	r24, r24
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	19 c0       	rjmp	.+50     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	17 c0       	rjmp	.+46     	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17bc:	e0 e3       	ldi	r30, 0x30	; 48
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <GPIO_readPin+0x10e>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <GPIO_readPin+0x10a>
    17d8:	ca 01       	movw	r24, r20
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	88 23       	and	r24, r24
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPortDirection+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPortDirection+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	90 f5       	brcc	.+100    	; 0x1876 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3c 83       	std	Y+4, r19	; 0x04
    181a:	2b 83       	std	Y+3, r18	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	d1 f0       	breq	.+52     	; 0x185a <GPIO_setupPortDirection+0x5e>
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <GPIO_setupPortDirection+0x3e>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <GPIO_setupPortDirection+0x54>
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <GPIO_setupPortDirection+0x7a>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <GPIO_setupPortDirection+0x68>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	81 f0       	breq	.+32     	; 0x186e <GPIO_setupPortDirection+0x72>
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1850:	ea e3       	ldi	r30, 0x3A	; 58
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 83       	st	Z, r24
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1864:	e4 e3       	ldi	r30, 0x34	; 52
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
			break;
		}
	}
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_writePort+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_writePort+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	90 f5       	brcc	.+100    	; 0x18fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <GPIO_writePort+0x5e>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <GPIO_writePort+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <GPIO_writePort+0x54>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <GPIO_writePort+0x7a>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <GPIO_writePort+0x68>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <GPIO_writePort+0x72>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18d8:	eb e3       	ldi	r30, 0x3B	; 59
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_readPort+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_readPort+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    191a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	90 f5       	brcc	.+100    	; 0x1986 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <GPIO_readPort+0x5e>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <GPIO_readPort+0x3e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <GPIO_readPort+0x54>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <GPIO_readPort+0x7a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_readPort+0x68>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_readPort+0x72>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    196a:	e6 e3       	ldi	r30, 0x36	; 54
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <main>:
};

UART_ConfigType uartConfig = {9600 , 1 , 0 , BIT_8 , 0};

int main(void)
{
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	cc 53       	subi	r28, 0x3C	; 60
    19a4:	d1 40       	sbci	r29, 0x01	; 1
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
	// var for pass
	union fullPass Password;
	union fullPass checkPassword;
	uint8 wrong = 0 ;
    19b0:	fe 01       	movw	r30, r28
    19b2:	e8 5c       	subi	r30, 0xC8	; 200
    19b4:	fe 4f       	sbci	r31, 0xFE	; 254
    19b6:	10 82       	st	Z, r1
	uint16 val ;
	uint8 optionVar;
	UART_init(&uartConfig);
    19b8:	88 e6       	ldi	r24, 0x68	; 104
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 97 1c 	call	0x392e	; 0x392e <UART_init>
    19c0:	fe 01       	movw	r30, r28
    19c2:	ef 5c       	subi	r30, 0xCF	; 207
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	aa e7       	ldi	r26, 0x7A	; 122
    19cc:	b4 e4       	ldi	r27, 0x44	; 68
    19ce:	80 83       	st	Z, r24
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	a2 83       	std	Z+2, r26	; 0x02
    19d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	8e 01       	movw	r16, r28
    19d8:	03 5d       	subi	r16, 0xD3	; 211
    19da:	1e 4f       	sbci	r17, 0xFE	; 254
    19dc:	fe 01       	movw	r30, r28
    19de:	ef 5c       	subi	r30, 0xCF	; 207
    19e0:	fe 4f       	sbci	r31, 0xFE	; 254
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	80 83       	st	Z, r24
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	a2 83       	std	Z+2, r26	; 0x02
    1a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a04:	fe 01       	movw	r30, r28
    1a06:	e3 5d       	subi	r30, 0xD3	; 211
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	44 f4       	brge	.+16     	; 0x1a32 <main+0x9c>
		__ticks = 1;
    1a22:	fe 01       	movw	r30, r28
    1a24:	e5 5d       	subi	r30, 0xD5	; 213
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	64 c0       	rjmp	.+200    	; 0x1afa <main+0x164>
	else if (__tmp > 65535)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e3 5d       	subi	r30, 0xD3	; 211
    1a36:	fe 4f       	sbci	r31, 0xFE	; 254
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <main+0xbc>
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	fe 01       	movw	r30, r28
    1a54:	ef 5c       	subi	r30, 0xCF	; 207
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8e 01       	movw	r16, r28
    1a72:	05 5d       	subi	r16, 0xD5	; 213
    1a74:	1e 4f       	sbci	r17, 0xFE	; 254
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	1f c0       	rjmp	.+62     	; 0x1ac8 <main+0x132>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5d       	subi	r30, 0xD7	; 215
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	89 e1       	ldi	r24, 0x19	; 25
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e7 5d       	subi	r30, 0xD7	; 215
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <main+0x10c>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 5d       	subi	r30, 0xD7	; 215
    1aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	de 01       	movw	r26, r28
    1ab2:	a5 5d       	subi	r26, 0xD5	; 213
    1ab4:	be 4f       	sbci	r27, 0xFE	; 254
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e5 5d       	subi	r30, 0xD5	; 213
    1aba:	fe 4f       	sbci	r31, 0xFE	; 254
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e5 5d       	subi	r30, 0xD5	; 213
    1acc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	d1 f6       	brne	.-76     	; 0x1a8a <main+0xf4>
    1ad6:	27 c0       	rjmp	.+78     	; 0x1b26 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	05 5d       	subi	r16, 0xD5	; 213
    1adc:	1e 4f       	sbci	r17, 0xFE	; 254
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e3 5d       	subi	r30, 0xD3	; 211
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
    1afa:	de 01       	movw	r26, r28
    1afc:	a9 5d       	subi	r26, 0xD9	; 217
    1afe:	be 4f       	sbci	r27, 0xFE	; 254
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 5d       	subi	r30, 0xD5	; 213
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	8d 93       	st	X+, r24
    1b0c:	9c 93       	st	X, r25
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 5d       	subi	r30, 0xD9	; 217
    1b12:	fe 4f       	sbci	r31, 0xFE	; 254
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <main+0x182>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e9 5d       	subi	r30, 0xD9	; 217
    1b20:	fe 4f       	sbci	r31, 0xFE	; 254
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
	_delay_ms(1000);
	TWI_init();
    1b26:	0e 94 1a 1c 	call	0x3834	; 0x3834 <TWI_init>
	Buzzer_init();
    1b2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	DcMotor_Init();
    1b2e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_Init>
    1b32:	fe 01       	movw	r30, r28
    1b34:	ed 5d       	subi	r30, 0xDD	; 221
    1b36:	fe 4f       	sbci	r31, 0xFE	; 254
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a8 ec       	ldi	r26, 0xC8	; 200
    1b3e:	b2 e4       	ldi	r27, 0x42	; 66
    1b40:	80 83       	st	Z, r24
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	8e 01       	movw	r16, r28
    1b4a:	01 5e       	subi	r16, 0xE1	; 225
    1b4c:	1e 4f       	sbci	r17, 0xFE	; 254
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ed 5d       	subi	r30, 0xDD	; 221
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	53 e4       	ldi	r21, 0x43	; 67
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	80 83       	st	Z, r24
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	a2 83       	std	Z+2, r26	; 0x02
    1b74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b76:	fe 01       	movw	r30, r28
    1b78:	e1 5e       	subi	r30, 0xE1	; 225
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	44 f4       	brge	.+16     	; 0x1ba4 <main+0x20e>
		__ticks = 1;
    1b94:	fe 01       	movw	r30, r28
    1b96:	e3 5e       	subi	r30, 0xE3	; 227
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	64 c0       	rjmp	.+200    	; 0x1c6c <main+0x2d6>
	else if (__tmp > 65535)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e1 5e       	subi	r30, 0xE1	; 225
    1ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	0c f0       	brlt	.+2      	; 0x1bc4 <main+0x22e>
    1bc2:	43 c0       	rjmp	.+134    	; 0x1c4a <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ed 5d       	subi	r30, 0xDD	; 221
    1bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8e 01       	movw	r16, r28
    1be4:	03 5e       	subi	r16, 0xE3	; 227
    1be6:	1e 4f       	sbci	r17, 0xFE	; 254
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
    1bfa:	1f c0       	rjmp	.+62     	; 0x1c3a <main+0x2a4>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e5 5e       	subi	r30, 0xE5	; 229
    1c00:	fe 4f       	sbci	r31, 0xFE	; 254
    1c02:	89 e1       	ldi	r24, 0x19	; 25
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e5 5e       	subi	r30, 0xE5	; 229
    1c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <main+0x27e>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e5 5e       	subi	r30, 0xE5	; 229
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	de 01       	movw	r26, r28
    1c24:	a3 5e       	subi	r26, 0xE3	; 227
    1c26:	be 4f       	sbci	r27, 0xFE	; 254
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e3 5e       	subi	r30, 0xE3	; 227
    1c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2e:	80 81       	ld	r24, Z
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	9c 93       	st	X, r25
    1c38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e3 5e       	subi	r30, 0xE3	; 227
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	d1 f6       	brne	.-76     	; 0x1bfc <main+0x266>
    1c48:	27 c0       	rjmp	.+78     	; 0x1c98 <main+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	03 5e       	subi	r16, 0xE3	; 227
    1c4e:	1e 4f       	sbci	r17, 0xFE	; 254
    1c50:	fe 01       	movw	r30, r28
    1c52:	e1 5e       	subi	r30, 0xE1	; 225
    1c54:	fe 4f       	sbci	r31, 0xFE	; 254
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	f8 01       	movw	r30, r16
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	de 01       	movw	r26, r28
    1c6e:	a7 5e       	subi	r26, 0xE7	; 231
    1c70:	be 4f       	sbci	r27, 0xFE	; 254
    1c72:	fe 01       	movw	r30, r28
    1c74:	e3 5e       	subi	r30, 0xE3	; 227
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	8d 93       	st	X+, r24
    1c7e:	9c 93       	st	X, r25
    1c80:	fe 01       	movw	r30, r28
    1c82:	e7 5e       	subi	r30, 0xE7	; 231
    1c84:	fe 4f       	sbci	r31, 0xFE	; 254
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <main+0x2f4>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5e       	subi	r30, 0xE7	; 231
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
	_delay_ms(100);

	EEPROM_readByte(0x0311,&Password.oct[0]);
    1c98:	9e 01       	movw	r18, r28
    1c9a:	27 5c       	subi	r18, 0xC7	; 199
    1c9c:	3e 4f       	sbci	r19, 0xFE	; 254
    1c9e:	81 e1       	ldi	r24, 0x11	; 17
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	0e 94 2d 09 	call	0x125a	; 0x125a <EEPROM_readByte>
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 5e       	subi	r30, 0xEB	; 235
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a8 ec       	ldi	r26, 0xC8	; 200
    1cb4:	b2 e4       	ldi	r27, 0x42	; 66
    1cb6:	80 83       	st	Z, r24
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	a2 83       	std	Z+2, r26	; 0x02
    1cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0f 5e       	subi	r16, 0xEF	; 239
    1cc2:	1e 4f       	sbci	r17, 0xFE	; 254
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	eb 5e       	subi	r30, 0xEB	; 235
    1cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	53 e4       	ldi	r21, 0x43	; 67
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cec:	fe 01       	movw	r30, r28
    1cee:	ef 5e       	subi	r30, 0xEF	; 239
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	44 f4       	brge	.+16     	; 0x1d1a <main+0x384>
		__ticks = 1;
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e1 5f       	subi	r30, 0xF1	; 241
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
    1d18:	64 c0       	rjmp	.+200    	; 0x1de2 <main+0x44c>
	else if (__tmp > 65535)
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ef 5e       	subi	r30, 0xEF	; 239
    1d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	0c f0       	brlt	.+2      	; 0x1d3a <main+0x3a4>
    1d38:	43 c0       	rjmp	.+134    	; 0x1dc0 <main+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	eb 5e       	subi	r30, 0xEB	; 235
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8e 01       	movw	r16, r28
    1d5a:	01 5f       	subi	r16, 0xF1	; 241
    1d5c:	1e 4f       	sbci	r17, 0xFE	; 254
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
    1d70:	1f c0       	rjmp	.+62     	; 0x1db0 <main+0x41a>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e3 5f       	subi	r30, 0xF3	; 243
    1d76:	fe 4f       	sbci	r31, 0xFE	; 254
    1d78:	89 e1       	ldi	r24, 0x19	; 25
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	fe 01       	movw	r30, r28
    1d82:	e3 5f       	subi	r30, 0xF3	; 243
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <main+0x3f4>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e3 5f       	subi	r30, 0xF3	; 243
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	de 01       	movw	r26, r28
    1d9a:	a1 5f       	subi	r26, 0xF1	; 241
    1d9c:	be 4f       	sbci	r27, 0xFE	; 254
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e1 5f       	subi	r30, 0xF1	; 241
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	11 96       	adiw	r26, 0x01	; 1
    1dac:	9c 93       	st	X, r25
    1dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	fe 01       	movw	r30, r28
    1db2:	e1 5f       	subi	r30, 0xF1	; 241
    1db4:	fe 4f       	sbci	r31, 0xFE	; 254
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	d1 f6       	brne	.-76     	; 0x1d72 <main+0x3dc>
    1dbe:	27 c0       	rjmp	.+78     	; 0x1e0e <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	01 5f       	subi	r16, 0xF1	; 241
    1dc4:	1e 4f       	sbci	r17, 0xFE	; 254
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ef 5e       	subi	r30, 0xEF	; 239
    1dca:	fe 4f       	sbci	r31, 0xFE	; 254
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	de 01       	movw	r26, r28
    1de4:	a5 5f       	subi	r26, 0xF5	; 245
    1de6:	be 4f       	sbci	r27, 0xFE	; 254
    1de8:	fe 01       	movw	r30, r28
    1dea:	e1 5f       	subi	r30, 0xF1	; 241
    1dec:	fe 4f       	sbci	r31, 0xFE	; 254
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	8d 93       	st	X+, r24
    1df4:	9c 93       	st	X, r25
    1df6:	fe 01       	movw	r30, r28
    1df8:	e5 5f       	subi	r30, 0xF5	; 245
    1dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <main+0x46a>
    1e04:	fe 01       	movw	r30, r28
    1e06:	e5 5f       	subi	r30, 0xF5	; 245
    1e08:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	80 83       	st	Z, r24
	_delay_ms(100);
	EEPROM_readByte(0x0319,&Password.oct[1]);
    1e0e:	ce 01       	movw	r24, r28
    1e10:	87 5c       	subi	r24, 0xC7	; 199
    1e12:	9e 4f       	sbci	r25, 0xFE	; 254
    1e14:	9c 01       	movw	r18, r24
    1e16:	2f 5f       	subi	r18, 0xFF	; 255
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	b9 01       	movw	r22, r18
    1e20:	0e 94 2d 09 	call	0x125a	; 0x125a <EEPROM_readByte>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 5f       	subi	r30, 0xF9	; 249
    1e28:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a8 ec       	ldi	r26, 0xC8	; 200
    1e30:	b2 e4       	ldi	r27, 0x42	; 66
    1e32:	80 83       	st	Z, r24
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	a2 83       	std	Z+2, r26	; 0x02
    1e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	0d 5f       	subi	r16, 0xFD	; 253
    1e3e:	1e 4f       	sbci	r17, 0xFE	; 254
    1e40:	fe 01       	movw	r30, r28
    1e42:	e9 5f       	subi	r30, 0xF9	; 249
    1e44:	fe 4f       	sbci	r31, 0xFE	; 254
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a e7       	ldi	r20, 0x7A	; 122
    1e54:	53 e4       	ldi	r21, 0x43	; 67
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 83       	st	Z, r24
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	a2 83       	std	Z+2, r26	; 0x02
    1e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 5f       	subi	r30, 0xFD	; 253
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	44 f4       	brge	.+16     	; 0x1e96 <main+0x500>
		__ticks = 1;
    1e86:	fe 01       	movw	r30, r28
    1e88:	ef 5f       	subi	r30, 0xFF	; 255
    1e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
    1e94:	64 c0       	rjmp	.+200    	; 0x1f5e <main+0x5c8>
	else if (__tmp > 65535)
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 5f       	subi	r30, 0xFD	; 253
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	0c f0       	brlt	.+2      	; 0x1eb6 <main+0x520>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <main+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e9 5f       	subi	r30, 0xF9	; 249
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	0f 5f       	subi	r16, 0xFF	; 255
    1ed8:	1e 4f       	sbci	r17, 0xFE	; 254
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	1f c0       	rjmp	.+62     	; 0x1f2c <main+0x596>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e1 50       	subi	r30, 0x01	; 1
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	e1 50       	subi	r30, 0x01	; 1
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <main+0x570>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e1 50       	subi	r30, 0x01	; 1
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	de 01       	movw	r26, r28
    1f16:	af 5f       	subi	r26, 0xFF	; 255
    1f18:	be 4f       	sbci	r27, 0xFE	; 254
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ef 5f       	subi	r30, 0xFF	; 255
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	9c 93       	st	X, r25
    1f2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ef 5f       	subi	r30, 0xFF	; 255
    1f30:	fe 4f       	sbci	r31, 0xFE	; 254
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	d1 f6       	brne	.-76     	; 0x1eee <main+0x558>
    1f3a:	27 c0       	rjmp	.+78     	; 0x1f8a <main+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	0f 5f       	subi	r16, 0xFF	; 255
    1f40:	1e 4f       	sbci	r17, 0xFE	; 254
    1f42:	fe 01       	movw	r30, r28
    1f44:	ed 5f       	subi	r30, 0xFD	; 253
    1f46:	fe 4f       	sbci	r31, 0xFE	; 254
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	de 01       	movw	r26, r28
    1f60:	a3 50       	subi	r26, 0x03	; 3
    1f62:	bf 4f       	sbci	r27, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	ef 5f       	subi	r30, 0xFF	; 255
    1f68:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	8d 93       	st	X+, r24
    1f70:	9c 93       	st	X, r25
    1f72:	fe 01       	movw	r30, r28
    1f74:	e3 50       	subi	r30, 0x03	; 3
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <main+0x5e6>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e3 50       	subi	r30, 0x03	; 3
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
	_delay_ms(100);
	val = Password.fullPass;
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ea 5c       	subi	r30, 0xCA	; 202
    1f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f90:	de 01       	movw	r26, r28
    1f92:	a7 5c       	subi	r26, 0xC7	; 199
    1f94:	be 4f       	sbci	r27, 0xFE	; 254
    1f96:	8d 91       	ld	r24, X+
    1f98:	9c 91       	ld	r25, X
    1f9a:	11 97       	sbiw	r26, 0x01	; 1
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24

	while(1)
	{
		if(val == 0xFFFF)
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ea 5c       	subi	r30, 0xCA	; 202
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	ff ef       	ldi	r31, 0xFF	; 255
    1fac:	8f 3f       	cpi	r24, 0xFF	; 255
    1fae:	9f 07       	cpc	r25, r31
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <main+0x61e>
    1fb2:	f9 c2       	rjmp	.+1522   	; 0x25a6 <main+0xc10>
		{
			UART_sendByte(0);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
			Password.oct[0] = UART_recieveByte();
    1fba:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e7 5c       	subi	r30, 0xC7	; 199
    1fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc4:	80 83       	st	Z, r24
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 50       	subi	r30, 0x07	; 7
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a8 ec       	ldi	r26, 0xC8	; 200
    1fd2:	b2 e4       	ldi	r27, 0x42	; 66
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	a2 83       	std	Z+2, r26	; 0x02
    1fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	8e 01       	movw	r16, r28
    1fde:	0b 50       	subi	r16, 0x0B	; 11
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e7 50       	subi	r30, 0x07	; 7
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	53 e4       	ldi	r21, 0x43	; 67
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200a:	fe 01       	movw	r30, r28
    200c:	eb 50       	subi	r30, 0x0B	; 11
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	44 f4       	brge	.+16     	; 0x2038 <main+0x6a2>
		__ticks = 1;
    2028:	fe 01       	movw	r30, r28
    202a:	ed 50       	subi	r30, 0x0D	; 13
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	64 c0       	rjmp	.+200    	; 0x2100 <main+0x76a>
	else if (__tmp > 65535)
    2038:	fe 01       	movw	r30, r28
    203a:	eb 50       	subi	r30, 0x0B	; 11
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	0c f0       	brlt	.+2      	; 0x2058 <main+0x6c2>
    2056:	43 c0       	rjmp	.+134    	; 0x20de <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	fe 01       	movw	r30, r28
    205a:	e7 50       	subi	r30, 0x07	; 7
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e2       	ldi	r20, 0x20	; 32
    206c:	51 e4       	ldi	r21, 0x41	; 65
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8e 01       	movw	r16, r28
    2078:	0d 50       	subi	r16, 0x0D	; 13
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	f8 01       	movw	r30, r16
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
    208e:	1f c0       	rjmp	.+62     	; 0x20ce <main+0x738>
    2090:	fe 01       	movw	r30, r28
    2092:	ef 50       	subi	r30, 0x0F	; 15
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	89 e1       	ldi	r24, 0x19	; 25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	fe 01       	movw	r30, r28
    20a0:	ef 50       	subi	r30, 0x0F	; 15
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <main+0x712>
    20ac:	fe 01       	movw	r30, r28
    20ae:	ef 50       	subi	r30, 0x0F	; 15
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	de 01       	movw	r26, r28
    20b8:	ad 50       	subi	r26, 0x0D	; 13
    20ba:	bf 4f       	sbci	r27, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	ed 50       	subi	r30, 0x0D	; 13
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	fe 01       	movw	r30, r28
    20d0:	ed 50       	subi	r30, 0x0D	; 13
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	d1 f6       	brne	.-76     	; 0x2090 <main+0x6fa>
    20dc:	27 c0       	rjmp	.+78     	; 0x212c <main+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	8e 01       	movw	r16, r28
    20e0:	0d 50       	subi	r16, 0x0D	; 13
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	fe 01       	movw	r30, r28
    20e6:	eb 50       	subi	r30, 0x0B	; 11
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	de 01       	movw	r26, r28
    2102:	a1 51       	subi	r26, 0x11	; 17
    2104:	bf 4f       	sbci	r27, 0xFF	; 255
    2106:	fe 01       	movw	r30, r28
    2108:	ed 50       	subi	r30, 0x0D	; 13
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	8d 93       	st	X+, r24
    2112:	9c 93       	st	X, r25
    2114:	fe 01       	movw	r30, r28
    2116:	e1 51       	subi	r30, 0x11	; 17
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <main+0x788>
    2122:	fe 01       	movw	r30, r28
    2124:	e1 51       	subi	r30, 0x11	; 17
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
			_delay_ms(100);
			Password.oct[1] = UART_recieveByte();
    212c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    2130:	fe 01       	movw	r30, r28
    2132:	e7 5c       	subi	r30, 0xC7	; 199
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	81 83       	std	Z+1, r24	; 0x01
    2138:	fe 01       	movw	r30, r28
    213a:	e5 51       	subi	r30, 0x15	; 21
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a8 ec       	ldi	r26, 0xC8	; 200
    2144:	b2 e4       	ldi	r27, 0x42	; 66
    2146:	80 83       	st	Z, r24
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	a2 83       	std	Z+2, r26	; 0x02
    214c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	8e 01       	movw	r16, r28
    2150:	09 51       	subi	r16, 0x19	; 25
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	e5 51       	subi	r30, 0x15	; 21
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	53 e4       	ldi	r21, 0x43	; 67
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	f8 01       	movw	r30, r16
    2174:	80 83       	st	Z, r24
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	a2 83       	std	Z+2, r26	; 0x02
    217a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    217c:	fe 01       	movw	r30, r28
    217e:	e9 51       	subi	r30, 0x19	; 25
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	44 f4       	brge	.+16     	; 0x21aa <main+0x814>
		__ticks = 1;
    219a:	fe 01       	movw	r30, r28
    219c:	eb 51       	subi	r30, 0x1B	; 27
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	64 c0       	rjmp	.+200    	; 0x2272 <main+0x8dc>
	else if (__tmp > 65535)
    21aa:	fe 01       	movw	r30, r28
    21ac:	e9 51       	subi	r30, 0x19	; 25
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <main+0x834>
    21c8:	43 c0       	rjmp	.+134    	; 0x2250 <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	fe 01       	movw	r30, r28
    21cc:	e5 51       	subi	r30, 0x15	; 21
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8e 01       	movw	r16, r28
    21ea:	0b 51       	subi	r16, 0x1B	; 27
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	1f c0       	rjmp	.+62     	; 0x2240 <main+0x8aa>
    2202:	fe 01       	movw	r30, r28
    2204:	ed 51       	subi	r30, 0x1D	; 29
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	fe 01       	movw	r30, r28
    2212:	ed 51       	subi	r30, 0x1D	; 29
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <main+0x884>
    221e:	fe 01       	movw	r30, r28
    2220:	ed 51       	subi	r30, 0x1D	; 29
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	de 01       	movw	r26, r28
    222a:	ab 51       	subi	r26, 0x1B	; 27
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	eb 51       	subi	r30, 0x1B	; 27
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	9c 93       	st	X, r25
    223e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	fe 01       	movw	r30, r28
    2242:	eb 51       	subi	r30, 0x1B	; 27
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	d1 f6       	brne	.-76     	; 0x2202 <main+0x86c>
    224e:	27 c0       	rjmp	.+78     	; 0x229e <main+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	8e 01       	movw	r16, r28
    2252:	0b 51       	subi	r16, 0x1B	; 27
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e9 51       	subi	r30, 0x19	; 25
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	de 01       	movw	r26, r28
    2274:	af 51       	subi	r26, 0x1F	; 31
    2276:	bf 4f       	sbci	r27, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	eb 51       	subi	r30, 0x1B	; 27
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	8d 93       	st	X+, r24
    2284:	9c 93       	st	X, r25
    2286:	fe 01       	movw	r30, r28
    2288:	ef 51       	subi	r30, 0x1F	; 31
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <main+0x8fa>
    2294:	fe 01       	movw	r30, r28
    2296:	ef 51       	subi	r30, 0x1F	; 31
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
			_delay_ms(100);
			EEPROM_writeByte(0x0311,Password.oct[0]);
    229e:	fe 01       	movw	r30, r28
    22a0:	e7 5c       	subi	r30, 0xC7	; 199
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	20 81       	ld	r18, Z
    22a6:	81 e1       	ldi	r24, 0x11	; 17
    22a8:	93 e0       	ldi	r25, 0x03	; 3
    22aa:	62 2f       	mov	r22, r18
    22ac:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e3 52       	subi	r30, 0x23	; 35
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a8 ec       	ldi	r26, 0xC8	; 200
    22bc:	b2 e4       	ldi	r27, 0x42	; 66
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	8e 01       	movw	r16, r28
    22c8:	07 52       	subi	r16, 0x27	; 39
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	e3 52       	subi	r30, 0x23	; 35
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a e7       	ldi	r20, 0x7A	; 122
    22e0:	53 e4       	ldi	r21, 0x43	; 67
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f4:	fe 01       	movw	r30, r28
    22f6:	e7 52       	subi	r30, 0x27	; 39
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	44 f4       	brge	.+16     	; 0x2322 <main+0x98c>
		__ticks = 1;
    2312:	fe 01       	movw	r30, r28
    2314:	e9 52       	subi	r30, 0x29	; 41
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	64 c0       	rjmp	.+200    	; 0x23ea <main+0xa54>
	else if (__tmp > 65535)
    2322:	fe 01       	movw	r30, r28
    2324:	e7 52       	subi	r30, 0x27	; 39
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	0c f0       	brlt	.+2      	; 0x2342 <main+0x9ac>
    2340:	43 c0       	rjmp	.+134    	; 0x23c8 <main+0xa32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	fe 01       	movw	r30, r28
    2344:	e3 52       	subi	r30, 0x23	; 35
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8e 01       	movw	r16, r28
    2362:	09 52       	subi	r16, 0x29	; 41
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	1f c0       	rjmp	.+62     	; 0x23b8 <main+0xa22>
    237a:	fe 01       	movw	r30, r28
    237c:	eb 52       	subi	r30, 0x2B	; 43
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	89 e1       	ldi	r24, 0x19	; 25
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	fe 01       	movw	r30, r28
    238a:	eb 52       	subi	r30, 0x2B	; 43
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <main+0x9fc>
    2396:	fe 01       	movw	r30, r28
    2398:	eb 52       	subi	r30, 0x2B	; 43
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	de 01       	movw	r26, r28
    23a2:	a9 52       	subi	r26, 0x29	; 41
    23a4:	bf 4f       	sbci	r27, 0xFF	; 255
    23a6:	fe 01       	movw	r30, r28
    23a8:	e9 52       	subi	r30, 0x29	; 41
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	fe 01       	movw	r30, r28
    23ba:	e9 52       	subi	r30, 0x29	; 41
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	d1 f6       	brne	.-76     	; 0x237a <main+0x9e4>
    23c6:	27 c0       	rjmp	.+78     	; 0x2416 <main+0xa80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	8e 01       	movw	r16, r28
    23ca:	09 52       	subi	r16, 0x29	; 41
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e7 52       	subi	r30, 0x27	; 39
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	de 01       	movw	r26, r28
    23ec:	ad 52       	subi	r26, 0x2D	; 45
    23ee:	bf 4f       	sbci	r27, 0xFF	; 255
    23f0:	fe 01       	movw	r30, r28
    23f2:	e9 52       	subi	r30, 0x29	; 41
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	8d 93       	st	X+, r24
    23fc:	9c 93       	st	X, r25
    23fe:	fe 01       	movw	r30, r28
    2400:	ed 52       	subi	r30, 0x2D	; 45
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0xa72>
    240c:	fe 01       	movw	r30, r28
    240e:	ed 52       	subi	r30, 0x2D	; 45
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
			_delay_ms(100);
			EEPROM_writeByte(0x0319,Password.oct[1]);
    2416:	fe 01       	movw	r30, r28
    2418:	e7 5c       	subi	r30, 0xC7	; 199
    241a:	fe 4f       	sbci	r31, 0xFE	; 254
    241c:	21 81       	ldd	r18, Z+1	; 0x01
    241e:	89 e1       	ldi	r24, 0x19	; 25
    2420:	93 e0       	ldi	r25, 0x03	; 3
    2422:	62 2f       	mov	r22, r18
    2424:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
    2428:	fe 01       	movw	r30, r28
    242a:	e1 53       	subi	r30, 0x31	; 49
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a8 ec       	ldi	r26, 0xC8	; 200
    2434:	b2 e4       	ldi	r27, 0x42	; 66
    2436:	80 83       	st	Z, r24
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	a2 83       	std	Z+2, r26	; 0x02
    243c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	8e 01       	movw	r16, r28
    2440:	05 53       	subi	r16, 0x35	; 53
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e1 53       	subi	r30, 0x31	; 49
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	53 e4       	ldi	r21, 0x43	; 67
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	f8 01       	movw	r30, r16
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    246c:	fe 01       	movw	r30, r28
    246e:	e5 53       	subi	r30, 0x35	; 53
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	44 f4       	brge	.+16     	; 0x249a <main+0xb04>
		__ticks = 1;
    248a:	fe 01       	movw	r30, r28
    248c:	e7 53       	subi	r30, 0x37	; 55
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	64 c0       	rjmp	.+200    	; 0x2562 <main+0xbcc>
	else if (__tmp > 65535)
    249a:	fe 01       	movw	r30, r28
    249c:	e5 53       	subi	r30, 0x35	; 53
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <main+0xb24>
    24b8:	43 c0       	rjmp	.+134    	; 0x2540 <main+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	fe 01       	movw	r30, r28
    24bc:	e1 53       	subi	r30, 0x31	; 49
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8e 01       	movw	r16, r28
    24da:	07 53       	subi	r16, 0x37	; 55
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	f8 01       	movw	r30, r16
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	1f c0       	rjmp	.+62     	; 0x2530 <main+0xb9a>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e9 53       	subi	r30, 0x39	; 57
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	89 e1       	ldi	r24, 0x19	; 25
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	fe 01       	movw	r30, r28
    2502:	e9 53       	subi	r30, 0x39	; 57
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <main+0xb74>
    250e:	fe 01       	movw	r30, r28
    2510:	e9 53       	subi	r30, 0x39	; 57
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	de 01       	movw	r26, r28
    251a:	a7 53       	subi	r26, 0x37	; 55
    251c:	bf 4f       	sbci	r27, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	e7 53       	subi	r30, 0x37	; 55
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 93       	st	X, r25
    252e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	fe 01       	movw	r30, r28
    2532:	e7 53       	subi	r30, 0x37	; 55
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	d1 f6       	brne	.-76     	; 0x24f2 <main+0xb5c>
    253e:	27 c0       	rjmp	.+78     	; 0x258e <main+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	8e 01       	movw	r16, r28
    2542:	07 53       	subi	r16, 0x37	; 55
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	fe 01       	movw	r30, r28
    2548:	e5 53       	subi	r30, 0x35	; 53
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	f8 01       	movw	r30, r16
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	de 01       	movw	r26, r28
    2564:	ab 53       	subi	r26, 0x3B	; 59
    2566:	bf 4f       	sbci	r27, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e7 53       	subi	r30, 0x37	; 55
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	8d 93       	st	X+, r24
    2574:	9c 93       	st	X, r25
    2576:	fe 01       	movw	r30, r28
    2578:	eb 53       	subi	r30, 0x3B	; 59
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0xbea>
    2584:	fe 01       	movw	r30, r28
    2586:	eb 53       	subi	r30, 0x3B	; 59
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
			_delay_ms(100);

			val = Password.fullPass;
    258e:	fe 01       	movw	r30, r28
    2590:	ea 5c       	subi	r30, 0xCA	; 202
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	de 01       	movw	r26, r28
    2596:	a7 5c       	subi	r26, 0xC7	; 199
    2598:	be 4f       	sbci	r27, 0xFE	; 254
    259a:	8d 91       	ld	r24, X+
    259c:	9c 91       	ld	r25, X
    259e:	11 97       	sbiw	r26, 0x01	; 1
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	09 c0       	rjmp	.+18     	; 0x25b8 <main+0xc22>

		}
		else
		{
			UART_sendByte(1);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
			optionVar = UART_recieveByte();
    25ac:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    25b0:	fe 01       	movw	r30, r28
    25b2:	eb 5c       	subi	r30, 0xCB	; 203
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	80 83       	st	Z, r24
		}

		if(optionVar == '+')
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 5c       	subi	r30, 0xCB	; 203
    25bc:	fe 4f       	sbci	r31, 0xFE	; 254
    25be:	80 81       	ld	r24, Z
    25c0:	8b 32       	cpi	r24, 0x2B	; 43
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <main+0xc30>
    25c4:	4c c5       	rjmp	.+2712   	; 0x305e <main+0x16c8>
		{
			//check pass
			checkPassword.oct[0] = UART_recieveByte();
    25c6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    25ca:	fe 01       	movw	r30, r28
    25cc:	e5 5c       	subi	r30, 0xC5	; 197
    25ce:	fe 4f       	sbci	r31, 0xFE	; 254
    25d0:	80 83       	st	Z, r24
    25d2:	fe 01       	movw	r30, r28
    25d4:	ef 53       	subi	r30, 0x3F	; 63
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a8 ec       	ldi	r26, 0xC8	; 200
    25de:	b2 e4       	ldi	r27, 0x42	; 66
    25e0:	80 83       	st	Z, r24
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	a2 83       	std	Z+2, r26	; 0x02
    25e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	8e 01       	movw	r16, r28
    25ea:	03 54       	subi	r16, 0x43	; 67
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	fe 01       	movw	r30, r28
    25f0:	ef 53       	subi	r30, 0x3F	; 63
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a e7       	ldi	r20, 0x7A	; 122
    2602:	53 e4       	ldi	r21, 0x43	; 67
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	f8 01       	movw	r30, r16
    260e:	80 83       	st	Z, r24
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	a2 83       	std	Z+2, r26	; 0x02
    2614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2616:	fe 01       	movw	r30, r28
    2618:	e3 54       	subi	r30, 0x43	; 67
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	44 f4       	brge	.+16     	; 0x2644 <main+0xcae>
		__ticks = 1;
    2634:	fe 01       	movw	r30, r28
    2636:	e5 54       	subi	r30, 0x45	; 69
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	64 c0       	rjmp	.+200    	; 0x270c <main+0xd76>
	else if (__tmp > 65535)
    2644:	fe 01       	movw	r30, r28
    2646:	e3 54       	subi	r30, 0x43	; 67
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	0c f0       	brlt	.+2      	; 0x2664 <main+0xcce>
    2662:	43 c0       	rjmp	.+134    	; 0x26ea <main+0xd54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2664:	fe 01       	movw	r30, r28
    2666:	ef 53       	subi	r30, 0x3F	; 63
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8e 01       	movw	r16, r28
    2684:	05 54       	subi	r16, 0x45	; 69
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	f8 01       	movw	r30, r16
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	1f c0       	rjmp	.+62     	; 0x26da <main+0xd44>
    269c:	fe 01       	movw	r30, r28
    269e:	e7 54       	subi	r30, 0x47	; 71
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	89 e1       	ldi	r24, 0x19	; 25
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	fe 01       	movw	r30, r28
    26ac:	e7 54       	subi	r30, 0x47	; 71
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <main+0xd1e>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e7 54       	subi	r30, 0x47	; 71
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	de 01       	movw	r26, r28
    26c4:	a5 54       	subi	r26, 0x45	; 69
    26c6:	bf 4f       	sbci	r27, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	e5 54       	subi	r30, 0x45	; 69
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	11 96       	adiw	r26, 0x01	; 1
    26d6:	9c 93       	st	X, r25
    26d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 54       	subi	r30, 0x45	; 69
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	d1 f6       	brne	.-76     	; 0x269c <main+0xd06>
    26e8:	27 c0       	rjmp	.+78     	; 0x2738 <main+0xda2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	8e 01       	movw	r16, r28
    26ec:	05 54       	subi	r16, 0x45	; 69
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	e3 54       	subi	r30, 0x43	; 67
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	de 01       	movw	r26, r28
    270e:	a9 54       	subi	r26, 0x49	; 73
    2710:	bf 4f       	sbci	r27, 0xFF	; 255
    2712:	fe 01       	movw	r30, r28
    2714:	e5 54       	subi	r30, 0x45	; 69
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	8d 93       	st	X+, r24
    271e:	9c 93       	st	X, r25
    2720:	fe 01       	movw	r30, r28
    2722:	e9 54       	subi	r30, 0x49	; 73
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <main+0xd94>
    272e:	fe 01       	movw	r30, r28
    2730:	e9 54       	subi	r30, 0x49	; 73
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
			_delay_ms(100);
			checkPassword.oct[1] = UART_recieveByte();
    2738:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    273c:	fe 01       	movw	r30, r28
    273e:	e5 5c       	subi	r30, 0xC5	; 197
    2740:	fe 4f       	sbci	r31, 0xFE	; 254
    2742:	81 83       	std	Z+1, r24	; 0x01
    2744:	fe 01       	movw	r30, r28
    2746:	ed 54       	subi	r30, 0x4D	; 77
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a8 ec       	ldi	r26, 0xC8	; 200
    2750:	b2 e4       	ldi	r27, 0x42	; 66
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	8e 01       	movw	r16, r28
    275c:	01 55       	subi	r16, 0x51	; 81
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	ed 54       	subi	r30, 0x4D	; 77
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a e7       	ldi	r20, 0x7A	; 122
    2774:	53 e4       	ldi	r21, 0x43	; 67
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	f8 01       	movw	r30, r16
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2788:	fe 01       	movw	r30, r28
    278a:	e1 55       	subi	r30, 0x51	; 81
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	5f e3       	ldi	r21, 0x3F	; 63
    279e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	44 f4       	brge	.+16     	; 0x27b6 <main+0xe20>
		__ticks = 1;
    27a6:	fe 01       	movw	r30, r28
    27a8:	e3 55       	subi	r30, 0x53	; 83
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	64 c0       	rjmp	.+200    	; 0x287e <main+0xee8>
	else if (__tmp > 65535)
    27b6:	fe 01       	movw	r30, r28
    27b8:	e1 55       	subi	r30, 0x51	; 81
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <main+0xe40>
    27d4:	43 c0       	rjmp	.+134    	; 0x285c <main+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	fe 01       	movw	r30, r28
    27d8:	ed 54       	subi	r30, 0x4D	; 77
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8e 01       	movw	r16, r28
    27f6:	03 55       	subi	r16, 0x53	; 83
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	1f c0       	rjmp	.+62     	; 0x284c <main+0xeb6>
    280e:	fe 01       	movw	r30, r28
    2810:	e5 55       	subi	r30, 0x55	; 85
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	89 e1       	ldi	r24, 0x19	; 25
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	fe 01       	movw	r30, r28
    281e:	e5 55       	subi	r30, 0x55	; 85
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <main+0xe90>
    282a:	fe 01       	movw	r30, r28
    282c:	e5 55       	subi	r30, 0x55	; 85
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	de 01       	movw	r26, r28
    2836:	a3 55       	subi	r26, 0x53	; 83
    2838:	bf 4f       	sbci	r27, 0xFF	; 255
    283a:	fe 01       	movw	r30, r28
    283c:	e3 55       	subi	r30, 0x53	; 83
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	fe 01       	movw	r30, r28
    284e:	e3 55       	subi	r30, 0x53	; 83
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	d1 f6       	brne	.-76     	; 0x280e <main+0xe78>
    285a:	28 c0       	rjmp	.+80     	; 0x28ac <main+0xf16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	8e 01       	movw	r16, r28
    285e:	03 55       	subi	r16, 0x53	; 83
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	e1 55       	subi	r30, 0x51	; 81
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	de 01       	movw	r26, r28
    2880:	a7 55       	subi	r26, 0x57	; 87
    2882:	bf 4f       	sbci	r27, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	e3 55       	subi	r30, 0x53	; 83
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	11 96       	adiw	r26, 0x01	; 1
    2890:	9c 93       	st	X, r25
    2892:	8e 93       	st	-X, r24
    2894:	fe 01       	movw	r30, r28
    2896:	e7 55       	subi	r30, 0x57	; 87
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0xf08>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 55       	subi	r30, 0x57	; 87
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
			// han3mel do while 3shan net2ked mn right pass 3 marat
			//if correct sent 2
			// open door for 5 sec
			do{

				if(checkPassword.fullPass == Password.fullPass)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e5 5c       	subi	r30, 0xC5	; 197
    28b0:	fe 4f       	sbci	r31, 0xFE	; 254
    28b2:	20 81       	ld	r18, Z
    28b4:	31 81       	ldd	r19, Z+1	; 0x01
    28b6:	fe 01       	movw	r30, r28
    28b8:	e7 5c       	subi	r30, 0xC7	; 199
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	28 17       	cp	r18, r24
    28c2:	39 07       	cpc	r19, r25
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <main+0xf32>
    28c6:	2d c2       	rjmp	.+1114   	; 0x2d22 <main+0x138c>
				{
					UART_sendByte(2);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
    28ce:	fe 01       	movw	r30, r28
    28d0:	eb 55       	subi	r30, 0x5B	; 91
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	aa ef       	ldi	r26, 0xFA	; 250
    28da:	b3 e4       	ldi	r27, 0x43	; 67
    28dc:	80 83       	st	Z, r24
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	a2 83       	std	Z+2, r26	; 0x02
    28e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	8e 01       	movw	r16, r28
    28e6:	0f 55       	subi	r16, 0x5F	; 95
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	eb 55       	subi	r30, 0x5B	; 91
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	53 e4       	ldi	r21, 0x43	; 67
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2912:	fe 01       	movw	r30, r28
    2914:	ef 55       	subi	r30, 0x5F	; 95
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	44 f4       	brge	.+16     	; 0x2940 <main+0xfaa>
		__ticks = 1;
    2930:	fe 01       	movw	r30, r28
    2932:	e1 56       	subi	r30, 0x61	; 97
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	64 c0       	rjmp	.+200    	; 0x2a08 <main+0x1072>
	else if (__tmp > 65535)
    2940:	fe 01       	movw	r30, r28
    2942:	ef 55       	subi	r30, 0x5F	; 95
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	0c f0       	brlt	.+2      	; 0x2960 <main+0xfca>
    295e:	43 c0       	rjmp	.+134    	; 0x29e6 <main+0x1050>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	fe 01       	movw	r30, r28
    2962:	eb 55       	subi	r30, 0x5B	; 91
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8e 01       	movw	r16, r28
    2980:	01 56       	subi	r16, 0x61	; 97
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	f8 01       	movw	r30, r16
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
    2996:	1f c0       	rjmp	.+62     	; 0x29d6 <main+0x1040>
    2998:	fe 01       	movw	r30, r28
    299a:	e3 56       	subi	r30, 0x63	; 99
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	89 e1       	ldi	r24, 0x19	; 25
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	fe 01       	movw	r30, r28
    29a8:	e3 56       	subi	r30, 0x63	; 99
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <main+0x101a>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 56       	subi	r30, 0x63	; 99
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	de 01       	movw	r26, r28
    29c0:	a1 56       	subi	r26, 0x61	; 97
    29c2:	bf 4f       	sbci	r27, 0xFF	; 255
    29c4:	fe 01       	movw	r30, r28
    29c6:	e1 56       	subi	r30, 0x61	; 97
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	9c 93       	st	X, r25
    29d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	fe 01       	movw	r30, r28
    29d8:	e1 56       	subi	r30, 0x61	; 97
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	d1 f6       	brne	.-76     	; 0x2998 <main+0x1002>
    29e4:	27 c0       	rjmp	.+78     	; 0x2a34 <main+0x109e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	8e 01       	movw	r16, r28
    29e8:	01 56       	subi	r16, 0x61	; 97
    29ea:	1f 4f       	sbci	r17, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	ef 55       	subi	r30, 0x5F	; 95
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	de 01       	movw	r26, r28
    2a0a:	a5 56       	subi	r26, 0x65	; 101
    2a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e1 56       	subi	r30, 0x61	; 97
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	8d 93       	st	X+, r24
    2a1a:	9c 93       	st	X, r25
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e5 56       	subi	r30, 0x65	; 101
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <main+0x1090>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e5 56       	subi	r30, 0x65	; 101
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
					_delay_ms(500);
					wrong = 0;
    2a34:	fe 01       	movw	r30, r28
    2a36:	e8 5c       	subi	r30, 0xC8	; 200
    2a38:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3a:	10 82       	st	Z, r1
					// Motor On
					DcMotor_Rotate(A_CW,100);
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	64 e6       	ldi	r22, 0x64	; 100
    2a40:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
    2a44:	fe 01       	movw	r30, r28
    2a46:	e9 56       	subi	r30, 0x69	; 105
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 ea       	ldi	r25, 0xA0	; 160
    2a4e:	ac e0       	ldi	r26, 0x0C	; 12
    2a50:	b6 e4       	ldi	r27, 0x46	; 70
    2a52:	80 83       	st	Z, r24
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	a2 83       	std	Z+2, r26	; 0x02
    2a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	8e 01       	movw	r16, r28
    2a5c:	0d 56       	subi	r16, 0x6D	; 109
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	fe 01       	movw	r30, r28
    2a62:	e9 56       	subi	r30, 0x69	; 105
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4a e7       	ldi	r20, 0x7A	; 122
    2a74:	53 e4       	ldi	r21, 0x43	; 67
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	f8 01       	movw	r30, r16
    2a80:	80 83       	st	Z, r24
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	a2 83       	std	Z+2, r26	; 0x02
    2a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ed 56       	subi	r30, 0x6D	; 109
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	44 f4       	brge	.+16     	; 0x2ab6 <main+0x1120>
		__ticks = 1;
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ef 56       	subi	r30, 0x6F	; 111
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	64 c0       	rjmp	.+200    	; 0x2b7e <main+0x11e8>
	else if (__tmp > 65535)
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 56       	subi	r30, 0x6D	; 109
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	0c f0       	brlt	.+2      	; 0x2ad6 <main+0x1140>
    2ad4:	43 c0       	rjmp	.+134    	; 0x2b5c <main+0x11c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e9 56       	subi	r30, 0x69	; 105
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8e 01       	movw	r16, r28
    2af6:	0f 56       	subi	r16, 0x6F	; 111
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    2b0c:	1f c0       	rjmp	.+62     	; 0x2b4c <main+0x11b6>
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e1 57       	subi	r30, 0x71	; 113
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	89 e1       	ldi	r24, 0x19	; 25
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e1 57       	subi	r30, 0x71	; 113
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <main+0x1190>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e1 57       	subi	r30, 0x71	; 113
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	de 01       	movw	r26, r28
    2b36:	af 56       	subi	r26, 0x6F	; 111
    2b38:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ef 56       	subi	r30, 0x6F	; 111
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	11 96       	adiw	r26, 0x01	; 1
    2b48:	9c 93       	st	X, r25
    2b4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ef 56       	subi	r30, 0x6F	; 111
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	d1 f6       	brne	.-76     	; 0x2b0e <main+0x1178>
    2b5a:	27 c0       	rjmp	.+78     	; 0x2baa <main+0x1214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	8e 01       	movw	r16, r28
    2b5e:	0f 56       	subi	r16, 0x6F	; 111
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	fe 01       	movw	r30, r28
    2b64:	ed 56       	subi	r30, 0x6D	; 109
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	f8 01       	movw	r30, r16
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	de 01       	movw	r26, r28
    2b80:	a3 57       	subi	r26, 0x73	; 115
    2b82:	bf 4f       	sbci	r27, 0xFF	; 255
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 56       	subi	r30, 0x6F	; 111
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	8d 93       	st	X+, r24
    2b90:	9c 93       	st	X, r25
    2b92:	fe 01       	movw	r30, r28
    2b94:	e3 57       	subi	r30, 0x73	; 115
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	91 81       	ldd	r25, Z+1	; 0x01
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <main+0x1206>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e3 57       	subi	r30, 0x73	; 115
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
					_delay_ms(9000);
					DcMotor_Rotate(CW,100);
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	64 e6       	ldi	r22, 0x64	; 100
    2bae:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 57       	subi	r30, 0x77	; 119
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 ea       	ldi	r25, 0xA0	; 160
    2bbc:	ac e0       	ldi	r26, 0x0C	; 12
    2bbe:	b6 e4       	ldi	r27, 0x46	; 70
    2bc0:	80 83       	st	Z, r24
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	a2 83       	std	Z+2, r26	; 0x02
    2bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	8e 01       	movw	r16, r28
    2bca:	0b 57       	subi	r16, 0x7B	; 123
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 57       	subi	r30, 0x77	; 119
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	4a e7       	ldi	r20, 0x7A	; 122
    2be2:	53 e4       	ldi	r21, 0x43	; 67
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	f8 01       	movw	r30, r16
    2bee:	80 83       	st	Z, r24
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	a2 83       	std	Z+2, r26	; 0x02
    2bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	eb 57       	subi	r30, 0x7B	; 123
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	44 f4       	brge	.+16     	; 0x2c24 <main+0x128e>
		__ticks = 1;
    2c14:	fe 01       	movw	r30, r28
    2c16:	ed 57       	subi	r30, 0x7D	; 125
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	64 c0       	rjmp	.+200    	; 0x2cec <main+0x1356>
	else if (__tmp > 65535)
    2c24:	fe 01       	movw	r30, r28
    2c26:	eb 57       	subi	r30, 0x7B	; 123
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	0c f0       	brlt	.+2      	; 0x2c44 <main+0x12ae>
    2c42:	43 c0       	rjmp	.+134    	; 0x2cca <main+0x1334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	fe 01       	movw	r30, r28
    2c46:	e7 57       	subi	r30, 0x77	; 119
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8e 01       	movw	r16, r28
    2c64:	0d 57       	subi	r16, 0x7D	; 125
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	bc 01       	movw	r22, r24
    2c6a:	cd 01       	movw	r24, r26
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	1f c0       	rjmp	.+62     	; 0x2cba <main+0x1324>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 57       	subi	r30, 0x7F	; 127
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	89 e1       	ldi	r24, 0x19	; 25
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 57       	subi	r30, 0x7F	; 127
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	91 81       	ldd	r25, Z+1	; 0x01
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <main+0x12fe>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ef 57       	subi	r30, 0x7F	; 127
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	de 01       	movw	r26, r28
    2ca4:	ad 57       	subi	r26, 0x7D	; 125
    2ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 57       	subi	r30, 0x7D	; 125
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	9c 93       	st	X, r25
    2cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ed 57       	subi	r30, 0x7D	; 125
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	d1 f6       	brne	.-76     	; 0x2c7c <main+0x12e6>
    2cc8:	27 c0       	rjmp	.+78     	; 0x2d18 <main+0x1382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	8e 01       	movw	r16, r28
    2ccc:	0d 57       	subi	r16, 0x7D	; 125
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	eb 57       	subi	r30, 0x7B	; 123
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	f8 01       	movw	r30, r16
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
    2cec:	de 01       	movw	r26, r28
    2cee:	a1 58       	subi	r26, 0x81	; 129
    2cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 57       	subi	r30, 0x7D	; 125
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	8d 93       	st	X+, r24
    2cfe:	9c 93       	st	X, r25
    2d00:	fe 01       	movw	r30, r28
    2d02:	e1 58       	subi	r30, 0x81	; 129
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <main+0x1374>
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e1 58       	subi	r30, 0x81	; 129
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	80 83       	st	Z, r24
					_delay_ms(9000);
					DcMotor_Rotate(Stop,100);
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	64 e6       	ldi	r22, 0x64	; 100
    2d1c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
    2d20:	3f c9       	rjmp	.-3458   	; 0x1fa0 <main+0x60a>
					break;
				}

				else if(wrong <2)
    2d22:	fe 01       	movw	r30, r28
    2d24:	e8 5c       	subi	r30, 0xC8	; 200
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	68 f4       	brcc	.+26     	; 0x2d48 <main+0x13b2>
				{
					UART_sendByte(3);
    2d2e:	83 e0       	ldi	r24, 0x03	; 3
    2d30:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
					wrong++;
    2d34:	de 01       	movw	r26, r28
    2d36:	a8 5c       	subi	r26, 0xC8	; 200
    2d38:	be 4f       	sbci	r27, 0xFE	; 254
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e8 5c       	subi	r30, 0xC8	; 200
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 81       	ld	r24, Z
    2d42:	8f 5f       	subi	r24, 0xFF	; 255
    2d44:	8c 93       	st	X, r24
    2d46:	2c c9       	rjmp	.-3496   	; 0x1fa0 <main+0x60a>
					break;
				}
				else if(wrong == 2)
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e8 5c       	subi	r30, 0xC8	; 200
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	80 81       	ld	r24, Z
    2d50:	82 30       	cpi	r24, 0x02	; 2
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <main+0x13c0>
    2d54:	74 c1       	rjmp	.+744    	; 0x303e <main+0x16a8>
				{
					UART_sendByte(4);
    2d56:	84 e0       	ldi	r24, 0x04	; 4
    2d58:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
					//Buzzer_ON();
					// alarm on for 15 sec
					Buzzer_ON();
    2d5c:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
    2d60:	fe 01       	movw	r30, r28
    2d62:	e5 58       	subi	r30, 0x85	; 133
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	94 e2       	ldi	r25, 0x24	; 36
    2d6a:	a4 e7       	ldi	r26, 0x74	; 116
    2d6c:	b9 e4       	ldi	r27, 0x49	; 73
    2d6e:	80 83       	st	Z, r24
    2d70:	91 83       	std	Z+1, r25	; 0x01
    2d72:	a2 83       	std	Z+2, r26	; 0x02
    2d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	8e 01       	movw	r16, r28
    2d78:	09 58       	subi	r16, 0x89	; 137
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e5 58       	subi	r30, 0x85	; 133
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	4a e7       	ldi	r20, 0x7A	; 122
    2d90:	53 e4       	ldi	r21, 0x43	; 67
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	80 83       	st	Z, r24
    2d9e:	91 83       	std	Z+1, r25	; 0x01
    2da0:	a2 83       	std	Z+2, r26	; 0x02
    2da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2da4:	fe 01       	movw	r30, r28
    2da6:	e9 58       	subi	r30, 0x89	; 137
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	44 f4       	brge	.+16     	; 0x2dd2 <main+0x143c>
		__ticks = 1;
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	eb 58       	subi	r30, 0x8B	; 139
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	64 c0       	rjmp	.+200    	; 0x2e9a <main+0x1504>
	else if (__tmp > 65535)
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e9 58       	subi	r30, 0x89	; 137
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	57 e4       	ldi	r21, 0x47	; 71
    2de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dec:	18 16       	cp	r1, r24
    2dee:	0c f0       	brlt	.+2      	; 0x2df2 <main+0x145c>
    2df0:	43 c0       	rjmp	.+134    	; 0x2e78 <main+0x14e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df2:	fe 01       	movw	r30, r28
    2df4:	e5 58       	subi	r30, 0x85	; 133
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8e 01       	movw	r16, r28
    2e12:	0b 58       	subi	r16, 0x8B	; 139
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	f8 01       	movw	r30, r16
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
    2e28:	1f c0       	rjmp	.+62     	; 0x2e68 <main+0x14d2>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ed 58       	subi	r30, 0x8D	; 141
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
    2e38:	fe 01       	movw	r30, r28
    2e3a:	ed 58       	subi	r30, 0x8D	; 141
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <main+0x14ac>
    2e46:	fe 01       	movw	r30, r28
    2e48:	ed 58       	subi	r30, 0x8D	; 141
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e50:	de 01       	movw	r26, r28
    2e52:	ab 58       	subi	r26, 0x8B	; 139
    2e54:	bf 4f       	sbci	r27, 0xFF	; 255
    2e56:	fe 01       	movw	r30, r28
    2e58:	eb 58       	subi	r30, 0x8B	; 139
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	11 96       	adiw	r26, 0x01	; 1
    2e64:	9c 93       	st	X, r25
    2e66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	fe 01       	movw	r30, r28
    2e6a:	eb 58       	subi	r30, 0x8B	; 139
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	d1 f6       	brne	.-76     	; 0x2e2a <main+0x1494>
    2e76:	27 c0       	rjmp	.+78     	; 0x2ec6 <main+0x1530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e78:	8e 01       	movw	r16, r28
    2e7a:	0b 58       	subi	r16, 0x8B	; 139
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e9 58       	subi	r30, 0x89	; 137
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	60 81       	ld	r22, Z
    2e86:	71 81       	ldd	r23, Z+1	; 0x01
    2e88:	82 81       	ldd	r24, Z+2	; 0x02
    2e8a:	93 81       	ldd	r25, Z+3	; 0x03
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	f8 01       	movw	r30, r16
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	de 01       	movw	r26, r28
    2e9c:	af 58       	subi	r26, 0x8F	; 143
    2e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	eb 58       	subi	r30, 0x8B	; 139
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	8d 93       	st	X+, r24
    2eac:	9c 93       	st	X, r25
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ef 58       	subi	r30, 0x8F	; 143
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <main+0x1522>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ef 58       	subi	r30, 0x8F	; 143
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
					_delay_ms(1000000);
					Buzzer_OFF();
    2ec6:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_OFF>
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e3 59       	subi	r30, 0x93	; 147
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	94 e2       	ldi	r25, 0x24	; 36
    2ed4:	a4 e7       	ldi	r26, 0x74	; 116
    2ed6:	b9 e4       	ldi	r27, 0x49	; 73
    2ed8:	80 83       	st	Z, r24
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	a2 83       	std	Z+2, r26	; 0x02
    2ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	07 59       	subi	r16, 0x97	; 151
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e3 59       	subi	r30, 0x93	; 147
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a e7       	ldi	r20, 0x7A	; 122
    2efa:	53 e4       	ldi	r21, 0x43	; 67
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	f8 01       	movw	r30, r16
    2f06:	80 83       	st	Z, r24
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	a2 83       	std	Z+2, r26	; 0x02
    2f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e7 59       	subi	r30, 0x97	; 151
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	44 f4       	brge	.+16     	; 0x2f3c <main+0x15a6>
		__ticks = 1;
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e9 59       	subi	r30, 0x99	; 153
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
    2f3a:	64 c0       	rjmp	.+200    	; 0x3004 <main+0x166e>
	else if (__tmp > 65535)
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 59       	subi	r30, 0x97	; 151
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	0c f0       	brlt	.+2      	; 0x2f5c <main+0x15c6>
    2f5a:	43 c0       	rjmp	.+134    	; 0x2fe2 <main+0x164c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e3 59       	subi	r30, 0x93	; 147
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e2       	ldi	r20, 0x20	; 32
    2f70:	51 e4       	ldi	r21, 0x41	; 65
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	09 59       	subi	r16, 0x99	; 153
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	1f c0       	rjmp	.+62     	; 0x2fd2 <main+0x163c>
    2f94:	fe 01       	movw	r30, r28
    2f96:	eb 59       	subi	r30, 0x9B	; 155
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	89 e1       	ldi	r24, 0x19	; 25
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	eb 59       	subi	r30, 0x9B	; 155
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <main+0x1616>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 59       	subi	r30, 0x9B	; 155
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	de 01       	movw	r26, r28
    2fbc:	a9 59       	subi	r26, 0x99	; 153
    2fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e9 59       	subi	r30, 0x99	; 153
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	11 96       	adiw	r26, 0x01	; 1
    2fce:	9c 93       	st	X, r25
    2fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e9 59       	subi	r30, 0x99	; 153
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	d1 f6       	brne	.-76     	; 0x2f94 <main+0x15fe>
    2fe0:	28 c0       	rjmp	.+80     	; 0x3032 <main+0x169c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe2:	8e 01       	movw	r16, r28
    2fe4:	09 59       	subi	r16, 0x99	; 153
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e7 59       	subi	r30, 0x97	; 151
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	f8 01       	movw	r30, r16
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
    3004:	de 01       	movw	r26, r28
    3006:	ad 59       	subi	r26, 0x9D	; 157
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e9 59       	subi	r30, 0x99	; 153
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	11 96       	adiw	r26, 0x01	; 1
    3016:	9c 93       	st	X, r25
    3018:	8e 93       	st	-X, r24
    301a:	fe 01       	movw	r30, r28
    301c:	ed 59       	subi	r30, 0x9D	; 157
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <main+0x168e>
    3028:	fe 01       	movw	r30, r28
    302a:	ed 59       	subi	r30, 0x9D	; 157
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
					_delay_ms(1000000);
					wrong = 0;
    3032:	fe 01       	movw	r30, r28
    3034:	e8 5c       	subi	r30, 0xC8	; 200
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	10 82       	st	Z, r1
    303a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <main+0x60a>
				}

				// if * = 3 then alarm sent 5
				//

			}while(checkPassword.fullPass != Password.fullPass);
    303e:	fe 01       	movw	r30, r28
    3040:	e5 5c       	subi	r30, 0xC5	; 197
    3042:	fe 4f       	sbci	r31, 0xFE	; 254
    3044:	20 81       	ld	r18, Z
    3046:	31 81       	ldd	r19, Z+1	; 0x01
    3048:	fe 01       	movw	r30, r28
    304a:	e7 5c       	subi	r30, 0xC7	; 199
    304c:	fe 4f       	sbci	r31, 0xFE	; 254
    304e:	80 81       	ld	r24, Z
    3050:	91 81       	ldd	r25, Z+1	; 0x01
    3052:	28 17       	cp	r18, r24
    3054:	39 07       	cpc	r19, r25
    3056:	09 f0       	breq	.+2      	; 0x305a <main+0x16c4>
    3058:	29 cc       	rjmp	.-1966   	; 0x28ac <main+0xf16>
    305a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <main+0x60a>


		}
		else if(optionVar == '-')
    305e:	fe 01       	movw	r30, r28
    3060:	eb 5c       	subi	r30, 0xCB	; 203
    3062:	fe 4f       	sbci	r31, 0xFE	; 254
    3064:	80 81       	ld	r24, Z
    3066:	8d 32       	cpi	r24, 0x2D	; 45
    3068:	11 f0       	breq	.+4      	; 0x306e <main+0x16d8>
    306a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <main+0x60a>
		{
			// sent (3)
			//receive pass
			// rewrite pass inside eeprom
			//check pass
			checkPassword.oct[0] = UART_recieveByte();
    306e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    3072:	fe 01       	movw	r30, r28
    3074:	e5 5c       	subi	r30, 0xC5	; 197
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	80 83       	st	Z, r24
    307a:	fe 01       	movw	r30, r28
    307c:	e1 5a       	subi	r30, 0xA1	; 161
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a8 ec       	ldi	r26, 0xC8	; 200
    3086:	b2 e4       	ldi	r27, 0x42	; 66
    3088:	80 83       	st	Z, r24
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	a2 83       	std	Z+2, r26	; 0x02
    308e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	8e 01       	movw	r16, r28
    3092:	05 5a       	subi	r16, 0xA5	; 165
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	e1 5a       	subi	r30, 0xA1	; 161
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a e7       	ldi	r20, 0x7A	; 122
    30aa:	53 e4       	ldi	r21, 0x43	; 67
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 83       	st	Z, r24
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	a2 83       	std	Z+2, r26	; 0x02
    30bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30be:	fe 01       	movw	r30, r28
    30c0:	e5 5a       	subi	r30, 0xA5	; 165
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	44 f4       	brge	.+16     	; 0x30ec <main+0x1756>
		__ticks = 1;
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 5a       	subi	r30, 0xA7	; 167
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	64 c0       	rjmp	.+200    	; 0x31b4 <main+0x181e>
	else if (__tmp > 65535)
    30ec:	fe 01       	movw	r30, r28
    30ee:	e5 5a       	subi	r30, 0xA5	; 165
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	0c f0       	brlt	.+2      	; 0x310c <main+0x1776>
    310a:	43 c0       	rjmp	.+134    	; 0x3192 <main+0x17fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	fe 01       	movw	r30, r28
    310e:	e1 5a       	subi	r30, 0xA1	; 161
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8e 01       	movw	r16, r28
    312c:	07 5a       	subi	r16, 0xA7	; 167
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	f8 01       	movw	r30, r16
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
    3142:	1f c0       	rjmp	.+62     	; 0x3182 <main+0x17ec>
    3144:	fe 01       	movw	r30, r28
    3146:	e9 5a       	subi	r30, 0xA9	; 169
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	89 e1       	ldi	r24, 0x19	; 25
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
    3152:	fe 01       	movw	r30, r28
    3154:	e9 5a       	subi	r30, 0xA9	; 169
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <main+0x17c6>
    3160:	fe 01       	movw	r30, r28
    3162:	e9 5a       	subi	r30, 0xA9	; 169
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	de 01       	movw	r26, r28
    316c:	a7 5a       	subi	r26, 0xA7	; 167
    316e:	bf 4f       	sbci	r27, 0xFF	; 255
    3170:	fe 01       	movw	r30, r28
    3172:	e7 5a       	subi	r30, 0xA7	; 167
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	11 96       	adiw	r26, 0x01	; 1
    317e:	9c 93       	st	X, r25
    3180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	fe 01       	movw	r30, r28
    3184:	e7 5a       	subi	r30, 0xA7	; 167
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	d1 f6       	brne	.-76     	; 0x3144 <main+0x17ae>
    3190:	27 c0       	rjmp	.+78     	; 0x31e0 <main+0x184a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	8e 01       	movw	r16, r28
    3194:	07 5a       	subi	r16, 0xA7	; 167
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5a       	subi	r30, 0xA5	; 165
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	f8 01       	movw	r30, r16
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
    31b4:	de 01       	movw	r26, r28
    31b6:	ab 5a       	subi	r26, 0xAB	; 171
    31b8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ba:	fe 01       	movw	r30, r28
    31bc:	e7 5a       	subi	r30, 0xA7	; 167
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	8d 93       	st	X+, r24
    31c6:	9c 93       	st	X, r25
    31c8:	fe 01       	movw	r30, r28
    31ca:	eb 5a       	subi	r30, 0xAB	; 171
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <main+0x183c>
    31d6:	fe 01       	movw	r30, r28
    31d8:	eb 5a       	subi	r30, 0xAB	; 171
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
			_delay_ms(100);
			checkPassword.oct[1] = UART_recieveByte();
    31e0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    31e4:	fe 01       	movw	r30, r28
    31e6:	e5 5c       	subi	r30, 0xC5	; 197
    31e8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ea:	81 83       	std	Z+1, r24	; 0x01
    31ec:	fe 01       	movw	r30, r28
    31ee:	ef 5a       	subi	r30, 0xAF	; 175
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a8 ec       	ldi	r26, 0xC8	; 200
    31f8:	b2 e4       	ldi	r27, 0x42	; 66
    31fa:	80 83       	st	Z, r24
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	a2 83       	std	Z+2, r26	; 0x02
    3200:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	8e 01       	movw	r16, r28
    3204:	03 5b       	subi	r16, 0xB3	; 179
    3206:	1f 4f       	sbci	r17, 0xFF	; 255
    3208:	fe 01       	movw	r30, r28
    320a:	ef 5a       	subi	r30, 0xAF	; 175
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	60 81       	ld	r22, Z
    3210:	71 81       	ldd	r23, Z+1	; 0x01
    3212:	82 81       	ldd	r24, Z+2	; 0x02
    3214:	93 81       	ldd	r25, Z+3	; 0x03
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	4a e7       	ldi	r20, 0x7A	; 122
    321c:	53 e4       	ldi	r21, 0x43	; 67
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	f8 01       	movw	r30, r16
    3228:	80 83       	st	Z, r24
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	a2 83       	std	Z+2, r26	; 0x02
    322e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3230:	fe 01       	movw	r30, r28
    3232:	e3 5b       	subi	r30, 0xB3	; 179
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	44 f4       	brge	.+16     	; 0x325e <main+0x18c8>
		__ticks = 1;
    324e:	fe 01       	movw	r30, r28
    3250:	e5 5b       	subi	r30, 0xB5	; 181
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	64 c0       	rjmp	.+200    	; 0x3326 <main+0x1990>
	else if (__tmp > 65535)
    325e:	fe 01       	movw	r30, r28
    3260:	e3 5b       	subi	r30, 0xB3	; 179
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	3f ef       	ldi	r19, 0xFF	; 255
    3270:	4f e7       	ldi	r20, 0x7F	; 127
    3272:	57 e4       	ldi	r21, 0x47	; 71
    3274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3278:	18 16       	cp	r1, r24
    327a:	0c f0       	brlt	.+2      	; 0x327e <main+0x18e8>
    327c:	43 c0       	rjmp	.+134    	; 0x3304 <main+0x196e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327e:	fe 01       	movw	r30, r28
    3280:	ef 5a       	subi	r30, 0xAF	; 175
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e2       	ldi	r20, 0x20	; 32
    3292:	51 e4       	ldi	r21, 0x41	; 65
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8e 01       	movw	r16, r28
    329e:	05 5b       	subi	r16, 0xB5	; 181
    32a0:	1f 4f       	sbci	r17, 0xFF	; 255
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	f8 01       	movw	r30, r16
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	80 83       	st	Z, r24
    32b4:	1f c0       	rjmp	.+62     	; 0x32f4 <main+0x195e>
    32b6:	fe 01       	movw	r30, r28
    32b8:	e7 5b       	subi	r30, 0xB7	; 183
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	89 e1       	ldi	r24, 0x19	; 25
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	91 83       	std	Z+1, r25	; 0x01
    32c2:	80 83       	st	Z, r24
    32c4:	fe 01       	movw	r30, r28
    32c6:	e7 5b       	subi	r30, 0xB7	; 183
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <main+0x1938>
    32d2:	fe 01       	movw	r30, r28
    32d4:	e7 5b       	subi	r30, 0xB7	; 183
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32dc:	de 01       	movw	r26, r28
    32de:	a5 5b       	subi	r26, 0xB5	; 181
    32e0:	bf 4f       	sbci	r27, 0xFF	; 255
    32e2:	fe 01       	movw	r30, r28
    32e4:	e5 5b       	subi	r30, 0xB5	; 181
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	91 81       	ldd	r25, Z+1	; 0x01
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	11 96       	adiw	r26, 0x01	; 1
    32f0:	9c 93       	st	X, r25
    32f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	fe 01       	movw	r30, r28
    32f6:	e5 5b       	subi	r30, 0xB5	; 181
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	d1 f6       	brne	.-76     	; 0x32b6 <main+0x1920>
    3302:	27 c0       	rjmp	.+78     	; 0x3352 <main+0x19bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3304:	8e 01       	movw	r16, r28
    3306:	05 5b       	subi	r16, 0xB5	; 181
    3308:	1f 4f       	sbci	r17, 0xFF	; 255
    330a:	fe 01       	movw	r30, r28
    330c:	e3 5b       	subi	r30, 0xB3	; 179
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	f8 01       	movw	r30, r16
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
    3326:	de 01       	movw	r26, r28
    3328:	a9 5b       	subi	r26, 0xB9	; 185
    332a:	bf 4f       	sbci	r27, 0xFF	; 255
    332c:	fe 01       	movw	r30, r28
    332e:	e5 5b       	subi	r30, 0xB5	; 181
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	91 81       	ldd	r25, Z+1	; 0x01
    3336:	8d 93       	st	X+, r24
    3338:	9c 93       	st	X, r25
    333a:	fe 01       	movw	r30, r28
    333c:	e9 5b       	subi	r30, 0xB9	; 185
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 81       	ld	r24, Z
    3342:	91 81       	ldd	r25, Z+1	; 0x01
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <main+0x19ae>
    3348:	fe 01       	movw	r30, r28
    334a:	e9 5b       	subi	r30, 0xB9	; 185
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
			_delay_ms(100);
			UART_sendByte(5);
    3352:	85 e0       	ldi	r24, 0x05	; 5
    3354:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
    3358:	fe 01       	movw	r30, r28
    335a:	ed 5b       	subi	r30, 0xBD	; 189
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	aa ef       	ldi	r26, 0xFA	; 250
    3364:	b3 e4       	ldi	r27, 0x43	; 67
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	8e 01       	movw	r16, r28
    3370:	01 5c       	subi	r16, 0xC1	; 193
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	fe 01       	movw	r30, r28
    3376:	ed 5b       	subi	r30, 0xBD	; 189
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	53 e4       	ldi	r21, 0x43	; 67
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	f8 01       	movw	r30, r16
    3394:	80 83       	st	Z, r24
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	a2 83       	std	Z+2, r26	; 0x02
    339a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339c:	fe 01       	movw	r30, r28
    339e:	ff 96       	adiw	r30, 0x3f	; 63
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	5f e3       	ldi	r21, 0x3F	; 63
    33b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	2c f4       	brge	.+10     	; 0x33c2 <main+0x1a2c>
		__ticks = 1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9e af       	std	Y+62, r25	; 0x3e
    33be:	8d af       	std	Y+61, r24	; 0x3d
    33c0:	46 c0       	rjmp	.+140    	; 0x344e <main+0x1ab8>
	else if (__tmp > 65535)
    33c2:	fe 01       	movw	r30, r28
    33c4:	ff 96       	adiw	r30, 0x3f	; 63
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	3f ef       	ldi	r19, 0xFF	; 255
    33d2:	4f e7       	ldi	r20, 0x7F	; 127
    33d4:	57 e4       	ldi	r21, 0x47	; 71
    33d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	64 f5       	brge	.+88     	; 0x3436 <main+0x1aa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33de:	fe 01       	movw	r30, r28
    33e0:	ed 5b       	subi	r30, 0xBD	; 189
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	60 81       	ld	r22, Z
    33e6:	71 81       	ldd	r23, Z+1	; 0x01
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	93 81       	ldd	r25, Z+3	; 0x03
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e af       	std	Y+62, r25	; 0x3e
    340a:	8d af       	std	Y+61, r24	; 0x3d
    340c:	0f c0       	rjmp	.+30     	; 0x342c <main+0x1a96>
    340e:	89 e1       	ldi	r24, 0x19	; 25
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c af       	std	Y+60, r25	; 0x3c
    3414:	8b af       	std	Y+59, r24	; 0x3b
    3416:	8b ad       	ldd	r24, Y+59	; 0x3b
    3418:	9c ad       	ldd	r25, Y+60	; 0x3c
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <main+0x1a84>
    341e:	9c af       	std	Y+60, r25	; 0x3c
    3420:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	8d ad       	ldd	r24, Y+61	; 0x3d
    3424:	9e ad       	ldd	r25, Y+62	; 0x3e
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	9e af       	std	Y+62, r25	; 0x3e
    342a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	8d ad       	ldd	r24, Y+61	; 0x3d
    342e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	69 f7       	brne	.-38     	; 0x340e <main+0x1a78>
    3434:	16 c0       	rjmp	.+44     	; 0x3462 <main+0x1acc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	fe 01       	movw	r30, r28
    3438:	ff 96       	adiw	r30, 0x3f	; 63
    343a:	60 81       	ld	r22, Z
    343c:	71 81       	ldd	r23, Z+1	; 0x01
    343e:	82 81       	ldd	r24, Z+2	; 0x02
    3440:	93 81       	ldd	r25, Z+3	; 0x03
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9e af       	std	Y+62, r25	; 0x3e
    344c:	8d af       	std	Y+61, r24	; 0x3d
    344e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3450:	9e ad       	ldd	r25, Y+62	; 0x3e
    3452:	9a af       	std	Y+58, r25	; 0x3a
    3454:	89 af       	std	Y+57, r24	; 0x39
    3456:	89 ad       	ldd	r24, Y+57	; 0x39
    3458:	9a ad       	ldd	r25, Y+58	; 0x3a
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	f1 f7       	brne	.-4      	; 0x345a <main+0x1ac4>
    345e:	9a af       	std	Y+58, r25	; 0x3a
    3460:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			Password.oct[0] = UART_recieveByte();
    3462:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    3466:	fe 01       	movw	r30, r28
    3468:	e7 5c       	subi	r30, 0xC7	; 199
    346a:	fe 4f       	sbci	r31, 0xFE	; 254
    346c:	80 83       	st	Z, r24
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a8 ec       	ldi	r26, 0xC8	; 200
    3474:	b2 e4       	ldi	r27, 0x42	; 66
    3476:	8d ab       	std	Y+53, r24	; 0x35
    3478:	9e ab       	std	Y+54, r25	; 0x36
    347a:	af ab       	std	Y+55, r26	; 0x37
    347c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	6d a9       	ldd	r22, Y+53	; 0x35
    3480:	7e a9       	ldd	r23, Y+54	; 0x36
    3482:	8f a9       	ldd	r24, Y+55	; 0x37
    3484:	98 ad       	ldd	r25, Y+56	; 0x38
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a e7       	ldi	r20, 0x7A	; 122
    348c:	53 e4       	ldi	r21, 0x43	; 67
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	89 ab       	std	Y+49, r24	; 0x31
    3498:	9a ab       	std	Y+50, r25	; 0x32
    349a:	ab ab       	std	Y+51, r26	; 0x33
    349c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    349e:	69 a9       	ldd	r22, Y+49	; 0x31
    34a0:	7a a9       	ldd	r23, Y+50	; 0x32
    34a2:	8b a9       	ldd	r24, Y+51	; 0x33
    34a4:	9c a9       	ldd	r25, Y+52	; 0x34
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	2c f4       	brge	.+10     	; 0x34c0 <main+0x1b2a>
		__ticks = 1;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	98 ab       	std	Y+48, r25	; 0x30
    34bc:	8f a7       	std	Y+47, r24	; 0x2f
    34be:	3f c0       	rjmp	.+126    	; 0x353e <main+0x1ba8>
	else if (__tmp > 65535)
    34c0:	69 a9       	ldd	r22, Y+49	; 0x31
    34c2:	7a a9       	ldd	r23, Y+50	; 0x32
    34c4:	8b a9       	ldd	r24, Y+51	; 0x33
    34c6:	9c a9       	ldd	r25, Y+52	; 0x34
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	4c f5       	brge	.+82     	; 0x352a <main+0x1b94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	6d a9       	ldd	r22, Y+53	; 0x35
    34da:	7e a9       	ldd	r23, Y+54	; 0x36
    34dc:	8f a9       	ldd	r24, Y+55	; 0x37
    34de:	98 ad       	ldd	r25, Y+56	; 0x38
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	98 ab       	std	Y+48, r25	; 0x30
    34fe:	8f a7       	std	Y+47, r24	; 0x2f
    3500:	0f c0       	rjmp	.+30     	; 0x3520 <main+0x1b8a>
    3502:	89 e1       	ldi	r24, 0x19	; 25
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9e a7       	std	Y+46, r25	; 0x2e
    3508:	8d a7       	std	Y+45, r24	; 0x2d
    350a:	8d a5       	ldd	r24, Y+45	; 0x2d
    350c:	9e a5       	ldd	r25, Y+46	; 0x2e
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0x1b78>
    3512:	9e a7       	std	Y+46, r25	; 0x2e
    3514:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	8f a5       	ldd	r24, Y+47	; 0x2f
    3518:	98 a9       	ldd	r25, Y+48	; 0x30
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	98 ab       	std	Y+48, r25	; 0x30
    351e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3520:	8f a5       	ldd	r24, Y+47	; 0x2f
    3522:	98 a9       	ldd	r25, Y+48	; 0x30
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	69 f7       	brne	.-38     	; 0x3502 <main+0x1b6c>
    3528:	14 c0       	rjmp	.+40     	; 0x3552 <main+0x1bbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	69 a9       	ldd	r22, Y+49	; 0x31
    352c:	7a a9       	ldd	r23, Y+50	; 0x32
    352e:	8b a9       	ldd	r24, Y+51	; 0x33
    3530:	9c a9       	ldd	r25, Y+52	; 0x34
    3532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	98 ab       	std	Y+48, r25	; 0x30
    353c:	8f a7       	std	Y+47, r24	; 0x2f
    353e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3540:	98 a9       	ldd	r25, Y+48	; 0x30
    3542:	9c a7       	std	Y+44, r25	; 0x2c
    3544:	8b a7       	std	Y+43, r24	; 0x2b
    3546:	8b a5       	ldd	r24, Y+43	; 0x2b
    3548:	9c a5       	ldd	r25, Y+44	; 0x2c
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <main+0x1bb4>
    354e:	9c a7       	std	Y+44, r25	; 0x2c
    3550:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			Password.oct[1] = UART_recieveByte();
    3552:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    3556:	fe 01       	movw	r30, r28
    3558:	e7 5c       	subi	r30, 0xC7	; 199
    355a:	fe 4f       	sbci	r31, 0xFE	; 254
    355c:	81 83       	std	Z+1, r24	; 0x01
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	a8 ec       	ldi	r26, 0xC8	; 200
    3564:	b2 e4       	ldi	r27, 0x42	; 66
    3566:	8f a3       	std	Y+39, r24	; 0x27
    3568:	98 a7       	std	Y+40, r25	; 0x28
    356a:	a9 a7       	std	Y+41, r26	; 0x29
    356c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    356e:	6f a1       	ldd	r22, Y+39	; 0x27
    3570:	78 a5       	ldd	r23, Y+40	; 0x28
    3572:	89 a5       	ldd	r24, Y+41	; 0x29
    3574:	9a a5       	ldd	r25, Y+42	; 0x2a
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	4a e7       	ldi	r20, 0x7A	; 122
    357c:	53 e4       	ldi	r21, 0x43	; 67
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	8b a3       	std	Y+35, r24	; 0x23
    3588:	9c a3       	std	Y+36, r25	; 0x24
    358a:	ad a3       	std	Y+37, r26	; 0x25
    358c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    358e:	6b a1       	ldd	r22, Y+35	; 0x23
    3590:	7c a1       	ldd	r23, Y+36	; 0x24
    3592:	8d a1       	ldd	r24, Y+37	; 0x25
    3594:	9e a1       	ldd	r25, Y+38	; 0x26
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e8       	ldi	r20, 0x80	; 128
    359c:	5f e3       	ldi	r21, 0x3F	; 63
    359e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35a2:	88 23       	and	r24, r24
    35a4:	2c f4       	brge	.+10     	; 0x35b0 <main+0x1c1a>
		__ticks = 1;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	9a a3       	std	Y+34, r25	; 0x22
    35ac:	89 a3       	std	Y+33, r24	; 0x21
    35ae:	3f c0       	rjmp	.+126    	; 0x362e <main+0x1c98>
	else if (__tmp > 65535)
    35b0:	6b a1       	ldd	r22, Y+35	; 0x23
    35b2:	7c a1       	ldd	r23, Y+36	; 0x24
    35b4:	8d a1       	ldd	r24, Y+37	; 0x25
    35b6:	9e a1       	ldd	r25, Y+38	; 0x26
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	3f ef       	ldi	r19, 0xFF	; 255
    35bc:	4f e7       	ldi	r20, 0x7F	; 127
    35be:	57 e4       	ldi	r21, 0x47	; 71
    35c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	4c f5       	brge	.+82     	; 0x361a <main+0x1c84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c8:	6f a1       	ldd	r22, Y+39	; 0x27
    35ca:	78 a5       	ldd	r23, Y+40	; 0x28
    35cc:	89 a5       	ldd	r24, Y+41	; 0x29
    35ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e2       	ldi	r20, 0x20	; 32
    35d6:	51 e4       	ldi	r21, 0x41	; 65
    35d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9a a3       	std	Y+34, r25	; 0x22
    35ee:	89 a3       	std	Y+33, r24	; 0x21
    35f0:	0f c0       	rjmp	.+30     	; 0x3610 <main+0x1c7a>
    35f2:	89 e1       	ldi	r24, 0x19	; 25
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	98 a3       	std	Y+32, r25	; 0x20
    35f8:	8f 8f       	std	Y+31, r24	; 0x1f
    35fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35fc:	98 a1       	ldd	r25, Y+32	; 0x20
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	f1 f7       	brne	.-4      	; 0x35fe <main+0x1c68>
    3602:	98 a3       	std	Y+32, r25	; 0x20
    3604:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3606:	89 a1       	ldd	r24, Y+33	; 0x21
    3608:	9a a1       	ldd	r25, Y+34	; 0x22
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	9a a3       	std	Y+34, r25	; 0x22
    360e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3610:	89 a1       	ldd	r24, Y+33	; 0x21
    3612:	9a a1       	ldd	r25, Y+34	; 0x22
    3614:	00 97       	sbiw	r24, 0x00	; 0
    3616:	69 f7       	brne	.-38     	; 0x35f2 <main+0x1c5c>
    3618:	14 c0       	rjmp	.+40     	; 0x3642 <main+0x1cac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361a:	6b a1       	ldd	r22, Y+35	; 0x23
    361c:	7c a1       	ldd	r23, Y+36	; 0x24
    361e:	8d a1       	ldd	r24, Y+37	; 0x25
    3620:	9e a1       	ldd	r25, Y+38	; 0x26
    3622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	9a a3       	std	Y+34, r25	; 0x22
    362c:	89 a3       	std	Y+33, r24	; 0x21
    362e:	89 a1       	ldd	r24, Y+33	; 0x21
    3630:	9a a1       	ldd	r25, Y+34	; 0x22
    3632:	9e 8f       	std	Y+30, r25	; 0x1e
    3634:	8d 8f       	std	Y+29, r24	; 0x1d
    3636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <main+0x1ca4>
    363e:	9e 8f       	std	Y+30, r25	; 0x1e
    3640:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			EEPROM_writeByte(0x0311,Password.oct[0]);
    3642:	fe 01       	movw	r30, r28
    3644:	e7 5c       	subi	r30, 0xC7	; 199
    3646:	fe 4f       	sbci	r31, 0xFE	; 254
    3648:	20 81       	ld	r18, Z
    364a:	81 e1       	ldi	r24, 0x11	; 17
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	62 2f       	mov	r22, r18
    3650:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	a8 ec       	ldi	r26, 0xC8	; 200
    365a:	b2 e4       	ldi	r27, 0x42	; 66
    365c:	89 8f       	std	Y+25, r24	; 0x19
    365e:	9a 8f       	std	Y+26, r25	; 0x1a
    3660:	ab 8f       	std	Y+27, r26	; 0x1b
    3662:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	69 8d       	ldd	r22, Y+25	; 0x19
    3666:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4a e7       	ldi	r20, 0x7A	; 122
    3672:	53 e4       	ldi	r21, 0x43	; 67
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8d 8b       	std	Y+21, r24	; 0x15
    367e:	9e 8b       	std	Y+22, r25	; 0x16
    3680:	af 8b       	std	Y+23, r26	; 0x17
    3682:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3684:	6d 89       	ldd	r22, Y+21	; 0x15
    3686:	7e 89       	ldd	r23, Y+22	; 0x16
    3688:	8f 89       	ldd	r24, Y+23	; 0x17
    368a:	98 8d       	ldd	r25, Y+24	; 0x18
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	2c f4       	brge	.+10     	; 0x36a6 <main+0x1d10>
		__ticks = 1;
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9c 8b       	std	Y+20, r25	; 0x14
    36a2:	8b 8b       	std	Y+19, r24	; 0x13
    36a4:	3f c0       	rjmp	.+126    	; 0x3724 <main+0x1d8e>
	else if (__tmp > 65535)
    36a6:	6d 89       	ldd	r22, Y+21	; 0x15
    36a8:	7e 89       	ldd	r23, Y+22	; 0x16
    36aa:	8f 89       	ldd	r24, Y+23	; 0x17
    36ac:	98 8d       	ldd	r25, Y+24	; 0x18
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	3f ef       	ldi	r19, 0xFF	; 255
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	57 e4       	ldi	r21, 0x47	; 71
    36b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ba:	18 16       	cp	r1, r24
    36bc:	4c f5       	brge	.+82     	; 0x3710 <main+0x1d7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36be:	69 8d       	ldd	r22, Y+25	; 0x19
    36c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9c 8b       	std	Y+20, r25	; 0x14
    36e4:	8b 8b       	std	Y+19, r24	; 0x13
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <main+0x1d70>
    36e8:	89 e1       	ldi	r24, 0x19	; 25
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9a 8b       	std	Y+18, r25	; 0x12
    36ee:	89 8b       	std	Y+17, r24	; 0x11
    36f0:	89 89       	ldd	r24, Y+17	; 0x11
    36f2:	9a 89       	ldd	r25, Y+18	; 0x12
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <main+0x1d5e>
    36f8:	9a 8b       	std	Y+18, r25	; 0x12
    36fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fc:	8b 89       	ldd	r24, Y+19	; 0x13
    36fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	9c 8b       	std	Y+20, r25	; 0x14
    3704:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	8b 89       	ldd	r24, Y+19	; 0x13
    3708:	9c 89       	ldd	r25, Y+20	; 0x14
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	69 f7       	brne	.-38     	; 0x36e8 <main+0x1d52>
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <main+0x1da2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	6d 89       	ldd	r22, Y+21	; 0x15
    3712:	7e 89       	ldd	r23, Y+22	; 0x16
    3714:	8f 89       	ldd	r24, Y+23	; 0x17
    3716:	98 8d       	ldd	r25, Y+24	; 0x18
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9c 8b       	std	Y+20, r25	; 0x14
    3722:	8b 8b       	std	Y+19, r24	; 0x13
    3724:	8b 89       	ldd	r24, Y+19	; 0x13
    3726:	9c 89       	ldd	r25, Y+20	; 0x14
    3728:	98 8b       	std	Y+16, r25	; 0x10
    372a:	8f 87       	std	Y+15, r24	; 0x0f
    372c:	8f 85       	ldd	r24, Y+15	; 0x0f
    372e:	98 89       	ldd	r25, Y+16	; 0x10
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <main+0x1d9a>
    3734:	98 8b       	std	Y+16, r25	; 0x10
    3736:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			EEPROM_writeByte(0x0319,Password.oct[1]);
    3738:	fe 01       	movw	r30, r28
    373a:	e7 5c       	subi	r30, 0xC7	; 199
    373c:	fe 4f       	sbci	r31, 0xFE	; 254
    373e:	21 81       	ldd	r18, Z+1	; 0x01
    3740:	89 e1       	ldi	r24, 0x19	; 25
    3742:	93 e0       	ldi	r25, 0x03	; 3
    3744:	62 2f       	mov	r22, r18
    3746:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	a8 ec       	ldi	r26, 0xC8	; 200
    3750:	b2 e4       	ldi	r27, 0x42	; 66
    3752:	8b 87       	std	Y+11, r24	; 0x0b
    3754:	9c 87       	std	Y+12, r25	; 0x0c
    3756:	ad 87       	std	Y+13, r26	; 0x0d
    3758:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375a:	6b 85       	ldd	r22, Y+11	; 0x0b
    375c:	7c 85       	ldd	r23, Y+12	; 0x0c
    375e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3760:	9e 85       	ldd	r25, Y+14	; 0x0e
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	4a e7       	ldi	r20, 0x7A	; 122
    3768:	53 e4       	ldi	r21, 0x43	; 67
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	8f 83       	std	Y+7, r24	; 0x07
    3774:	98 87       	std	Y+8, r25	; 0x08
    3776:	a9 87       	std	Y+9, r26	; 0x09
    3778:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    377a:	6f 81       	ldd	r22, Y+7	; 0x07
    377c:	78 85       	ldd	r23, Y+8	; 0x08
    377e:	89 85       	ldd	r24, Y+9	; 0x09
    3780:	9a 85       	ldd	r25, Y+10	; 0x0a
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e8       	ldi	r20, 0x80	; 128
    3788:	5f e3       	ldi	r21, 0x3F	; 63
    378a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    378e:	88 23       	and	r24, r24
    3790:	2c f4       	brge	.+10     	; 0x379c <main+0x1e06>
		__ticks = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	40 c0       	rjmp	.+128    	; 0x381c <main+0x1e86>
	else if (__tmp > 65535)
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	3f ef       	ldi	r19, 0xFF	; 255
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	57 e4       	ldi	r21, 0x47	; 71
    37ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	54 f5       	brge	.+84     	; 0x3808 <main+0x1e72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	51 e4       	ldi	r21, 0x41	; 65
    37c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9e 83       	std	Y+6, r25	; 0x06
    37da:	8d 83       	std	Y+5, r24	; 0x05
    37dc:	0f c0       	rjmp	.+30     	; 0x37fc <main+0x1e66>
    37de:	89 e1       	ldi	r24, 0x19	; 25
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9c 83       	std	Y+4, r25	; 0x04
    37e4:	8b 83       	std	Y+3, r24	; 0x03
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <main+0x1e54>
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	69 f7       	brne	.-38     	; 0x37de <main+0x1e48>
    3804:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <main+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3808:	6f 81       	ldd	r22, Y+7	; 0x07
    380a:	78 85       	ldd	r23, Y+8	; 0x08
    380c:	89 85       	ldd	r24, Y+9	; 0x09
    380e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	9a 81       	ldd	r25, Y+2	; 0x02
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <main+0x1e92>
    382c:	9a 83       	std	Y+2, r25	; 0x02
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <main+0x60a>

00003834 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    383c:	e0 e2       	ldi	r30, 0x20	; 32
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	82 e0       	ldi	r24, 0x02	; 2
    3842:	80 83       	st	Z, r24
	TWSR = 0x00;
    3844:	e1 e2       	ldi	r30, 0x21	; 33
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    384a:	e2 e2       	ldi	r30, 0x22	; 34
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	82 e0       	ldi	r24, 0x02	; 2
    3850:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3852:	e6 e5       	ldi	r30, 0x56	; 86
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	84 e0       	ldi	r24, 0x04	; 4
    3858:	80 83       	st	Z, r24
}
    385a:	cf 91       	pop	r28
    385c:	df 91       	pop	r29
    385e:	08 95       	ret

00003860 <TWI_start>:

void TWI_start(void)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3868:	e6 e5       	ldi	r30, 0x56	; 86
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	84 ea       	ldi	r24, 0xA4	; 164
    386e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3870:	e6 e5       	ldi	r30, 0x56	; 86
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	88 23       	and	r24, r24
    3878:	dc f7       	brge	.-10     	; 0x3870 <TWI_start+0x10>
}
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <TWI_stop>:

void TWI_stop(void)
{
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3888:	e6 e5       	ldi	r30, 0x56	; 86
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	84 e9       	ldi	r24, 0x94	; 148
    388e:	80 83       	st	Z, r24
}
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	0f 92       	push	r0
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    38a2:	e3 e2       	ldi	r30, 0x23	; 35
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    38aa:	e6 e5       	ldi	r30, 0x56	; 86
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	84 e8       	ldi	r24, 0x84	; 132
    38b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38b2:	e6 e5       	ldi	r30, 0x56	; 86
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	88 23       	and	r24, r24
    38ba:	dc f7       	brge	.-10     	; 0x38b2 <TWI_writeByte+0x1c>
}
    38bc:	0f 90       	pop	r0
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    38cc:	e6 e5       	ldi	r30, 0x56	; 86
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	84 ec       	ldi	r24, 0xC4	; 196
    38d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38d4:	e6 e5       	ldi	r30, 0x56	; 86
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	88 23       	and	r24, r24
    38dc:	dc f7       	brge	.-10     	; 0x38d4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    38de:	e3 e2       	ldi	r30, 0x23	; 35
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
}
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    38f2:	e6 e5       	ldi	r30, 0x56	; 86
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	84 e8       	ldi	r24, 0x84	; 132
    38f8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38fa:	e6 e5       	ldi	r30, 0x56	; 86
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	88 23       	and	r24, r24
    3902:	dc f7       	brge	.-10     	; 0x38fa <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3904:	e3 e2       	ldi	r30, 0x23	; 35
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
}
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	0f 92       	push	r0
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    391a:	e1 e2       	ldi	r30, 0x21	; 33
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	88 7f       	andi	r24, 0xF8	; 248
    3922:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3924:	89 81       	ldd	r24, Y+1	; 0x01
}
    3926:	0f 90       	pop	r0
    3928:	cf 91       	pop	r28
    392a:	df 91       	pop	r29
    392c:	08 95       	ret

0000392e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * uartConfig)
{
    392e:	df 93       	push	r29
    3930:	cf 93       	push	r28
    3932:	00 d0       	rcall	.+0      	; 0x3934 <UART_init+0x6>
    3934:	00 d0       	rcall	.+0      	; 0x3936 <UART_init+0x8>
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	9c 83       	std	Y+4, r25	; 0x04
    393c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    393e:	1a 82       	std	Y+2, r1	; 0x02
    3940:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	if(uartConfig->syncMode == Async_Double_Speed_mode)
    3942:	eb 81       	ldd	r30, Y+3	; 0x03
    3944:	fc 81       	ldd	r31, Y+4	; 0x04
    3946:	84 81       	ldd	r24, Z+4	; 0x04
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	21 f4       	brne	.+8      	; 0x3954 <UART_init+0x26>
	{
		UCSRA = (1<<U2X);
    394c:	eb e2       	ldi	r30, 0x2B	; 43
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3954:	ea e2       	ldi	r30, 0x2A	; 42
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	88 e1       	ldi	r24, 0x18	; 24
    395a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 1 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    395c:	e0 e4       	ldi	r30, 0x40	; 64
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	86 e8       	ldi	r24, 0x86	; 134
    3962:	80 83       	st	Z, r24
	// if frame size = 9 bits
	if(uartConfig->bitSize == BIT_9)
    3964:	eb 81       	ldd	r30, Y+3	; 0x03
    3966:	fc 81       	ldd	r31, Y+4	; 0x04
    3968:	86 81       	ldd	r24, Z+6	; 0x06
    396a:	87 30       	cpi	r24, 0x07	; 7
    396c:	39 f4       	brne	.+14     	; 0x397c <UART_init+0x4e>
	{
		UCSRB |= (1 << UCSZ2);
    396e:	aa e2       	ldi	r26, 0x2A	; 42
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	ea e2       	ldi	r30, 0x2A	; 42
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	84 60       	ori	r24, 0x04	; 4
    397a:	8c 93       	st	X, r24
	}

	//parity mode configure
	if(uartConfig->parityMode == ODD_parity)
    397c:	eb 81       	ldd	r30, Y+3	; 0x03
    397e:	fc 81       	ldd	r31, Y+4	; 0x04
    3980:	85 81       	ldd	r24, Z+5	; 0x05
    3982:	82 30       	cpi	r24, 0x02	; 2
    3984:	41 f4       	brne	.+16     	; 0x3996 <UART_init+0x68>
	{
		UCSRC |= (1 << UPM1);
    3986:	a0 e4       	ldi	r26, 0x40	; 64
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e0 e4       	ldi	r30, 0x40	; 64
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	80 62       	ori	r24, 0x20	; 32
    3992:	8c 93       	st	X, r24
    3994:	0c c0       	rjmp	.+24     	; 0x39ae <UART_init+0x80>
	}
	else if(uartConfig->parityMode == EVEN_parity)
    3996:	eb 81       	ldd	r30, Y+3	; 0x03
    3998:	fc 81       	ldd	r31, Y+4	; 0x04
    399a:	85 81       	ldd	r24, Z+5	; 0x05
    399c:	83 30       	cpi	r24, 0x03	; 3
    399e:	39 f4       	brne	.+14     	; 0x39ae <UART_init+0x80>
	{
		UCSRC |= (1 << UPM1) |(1 << UPM0) ;
    39a0:	a0 e4       	ldi	r26, 0x40	; 64
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	e0 e4       	ldi	r30, 0x40	; 64
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	80 63       	ori	r24, 0x30	; 48
    39ac:	8c 93       	st	X, r24
	}

	//Stop Bit Configure
	if(uartConfig->stopBit == Enable)
    39ae:	eb 81       	ldd	r30, Y+3	; 0x03
    39b0:	fc 81       	ldd	r31, Y+4	; 0x04
    39b2:	87 81       	ldd	r24, Z+7	; 0x07
    39b4:	81 30       	cpi	r24, 0x01	; 1
    39b6:	39 f4       	brne	.+14     	; 0x39c6 <UART_init+0x98>
	{
		UCSRC |= (1 << USBS);
    39b8:	a0 e4       	ldi	r26, 0x40	; 64
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e0 e4       	ldi	r30, 0x40	; 64
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	88 60       	ori	r24, 0x08	; 8
    39c4:	8c 93       	st	X, r24
	}

	//BUAD Rate configure
	if(uartConfig->bitSize == BIT_6)
    39c6:	eb 81       	ldd	r30, Y+3	; 0x03
    39c8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ca:	86 81       	ldd	r24, Z+6	; 0x06
    39cc:	81 30       	cpi	r24, 0x01	; 1
    39ce:	41 f4       	brne	.+16     	; 0x39e0 <UART_init+0xb2>
			UCSRC |= (1 << UCSZ0);
    39d0:	a0 e4       	ldi	r26, 0x40	; 64
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e0 e4       	ldi	r30, 0x40	; 64
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	82 60       	ori	r24, 0x02	; 2
    39dc:	8c 93       	st	X, r24
    39de:	1e c0       	rjmp	.+60     	; 0x3a1c <UART_init+0xee>
		else if(uartConfig->bitSize == BIT_7)
    39e0:	eb 81       	ldd	r30, Y+3	; 0x03
    39e2:	fc 81       	ldd	r31, Y+4	; 0x04
    39e4:	86 81       	ldd	r24, Z+6	; 0x06
    39e6:	82 30       	cpi	r24, 0x02	; 2
    39e8:	41 f4       	brne	.+16     	; 0x39fa <UART_init+0xcc>
			UCSRC |= (1 << UCSZ1);
    39ea:	a0 e4       	ldi	r26, 0x40	; 64
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	e0 e4       	ldi	r30, 0x40	; 64
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	84 60       	ori	r24, 0x04	; 4
    39f6:	8c 93       	st	X, r24
    39f8:	11 c0       	rjmp	.+34     	; 0x3a1c <UART_init+0xee>
		else if(uartConfig->bitSize == BIT_8 || uartConfig->bitSize == BIT_9 )
    39fa:	eb 81       	ldd	r30, Y+3	; 0x03
    39fc:	fc 81       	ldd	r31, Y+4	; 0x04
    39fe:	86 81       	ldd	r24, Z+6	; 0x06
    3a00:	83 30       	cpi	r24, 0x03	; 3
    3a02:	29 f0       	breq	.+10     	; 0x3a0e <UART_init+0xe0>
    3a04:	eb 81       	ldd	r30, Y+3	; 0x03
    3a06:	fc 81       	ldd	r31, Y+4	; 0x04
    3a08:	86 81       	ldd	r24, Z+6	; 0x06
    3a0a:	87 30       	cpi	r24, 0x07	; 7
    3a0c:	39 f4       	brne	.+14     	; 0x3a1c <UART_init+0xee>
			UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    3a0e:	a0 e4       	ldi	r26, 0x40	; 64
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	e0 e4       	ldi	r30, 0x40	; 64
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	86 60       	ori	r24, 0x06	; 6
    3a1a:	8c 93       	st	X, r24



		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / (uartConfig->buadRate * 8UL))) - 1);
    3a1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	a2 81       	ldd	r26, Z+2	; 0x02
    3a26:	b3 81       	ldd	r27, Z+3	; 0x03
    3a28:	88 0f       	add	r24, r24
    3a2a:	99 1f       	adc	r25, r25
    3a2c:	aa 1f       	adc	r26, r26
    3a2e:	bb 1f       	adc	r27, r27
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	aa 1f       	adc	r26, r26
    3a36:	bb 1f       	adc	r27, r27
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	aa 1f       	adc	r26, r26
    3a3e:	bb 1f       	adc	r27, r27
    3a40:	9c 01       	movw	r18, r24
    3a42:	ad 01       	movw	r20, r26
    3a44:	80 e4       	ldi	r24, 0x40	; 64
    3a46:	92 e4       	ldi	r25, 0x42	; 66
    3a48:	af e0       	ldi	r26, 0x0F	; 15
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__udivmodsi4>
    3a54:	da 01       	movw	r26, r20
    3a56:	c9 01       	movw	r24, r18
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	9a 83       	std	Y+2, r25	; 0x02
    3a5c:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    3a5e:	e0 e4       	ldi	r30, 0x40	; 64
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	89 2f       	mov	r24, r25
    3a68:	99 27       	eor	r25, r25
    3a6a:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    3a6c:	e9 e2       	ldi	r30, 0x29	; 41
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	80 83       	st	Z, r24
}
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	0f 92       	push	r0
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a8e:	eb e2       	ldi	r30, 0x2B	; 43
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	88 2f       	mov	r24, r24
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	80 72       	andi	r24, 0x20	; 32
    3a9a:	90 70       	andi	r25, 0x00	; 0
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	b9 f3       	breq	.-18     	; 0x3a8e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3aa0:	ec e2       	ldi	r30, 0x2C	; 44
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3aa8:	0f 90       	pop	r0
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3ab8:	eb e2       	ldi	r30, 0x2B	; 43
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	88 23       	and	r24, r24
    3ac0:	dc f7       	brge	.-10     	; 0x3ab8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3ac2:	ec e2       	ldi	r30, 0x2C	; 44
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
}
    3ac8:	cf 91       	pop	r28
    3aca:	df 91       	pop	r29
    3acc:	08 95       	ret

00003ace <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3ace:	df 93       	push	r29
    3ad0:	cf 93       	push	r28
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <UART_sendString+0x6>
    3ad4:	0f 92       	push	r0
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	9b 83       	std	Y+3, r25	; 0x03
    3adc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ade:	19 82       	std	Y+1, r1	; 0x01
    3ae0:	0e c0       	rjmp	.+28     	; 0x3afe <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	28 2f       	mov	r18, r24
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aea:	9b 81       	ldd	r25, Y+3	; 0x03
    3aec:	fc 01       	movw	r30, r24
    3aee:	e2 0f       	add	r30, r18
    3af0:	f3 1f       	adc	r31, r19
    3af2:	80 81       	ld	r24, Z
    3af4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
		i++;
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	8f 5f       	subi	r24, 0xFF	; 255
    3afc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	28 2f       	mov	r18, r24
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	9b 81       	ldd	r25, Y+3	; 0x03
    3b08:	fc 01       	movw	r30, r24
    3b0a:	e2 0f       	add	r30, r18
    3b0c:	f3 1f       	adc	r31, r19
    3b0e:	80 81       	ld	r24, Z
    3b10:	88 23       	and	r24, r24
    3b12:	39 f7       	brne	.-50     	; 0x3ae2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('\0');
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3b1a:	0f 90       	pop	r0
    3b1c:	0f 90       	pop	r0
    3b1e:	0f 90       	pop	r0
    3b20:	cf 91       	pop	r28
    3b22:	df 91       	pop	r29
    3b24:	08 95       	ret

00003b26 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <UART_receiveString+0xa>
    3b30:	0f 92       	push	r0
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	9b 83       	std	Y+3, r25	; 0x03
    3b38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b3a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	9b 81       	ldd	r25, Y+3	; 0x03
    3b46:	8c 01       	movw	r16, r24
    3b48:	02 0f       	add	r16, r18
    3b4a:	13 1f       	adc	r17, r19
    3b4c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    3b50:	f8 01       	movw	r30, r16
    3b52:	80 83       	st	Z, r24
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
	{
		i++;
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	28 2f       	mov	r18, r24
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	9b 81       	ldd	r25, Y+3	; 0x03
    3b66:	8c 01       	movw	r16, r24
    3b68:	02 0f       	add	r16, r18
    3b6a:	13 1f       	adc	r17, r19
    3b6c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <UART_recieveByte>
    3b70:	f8 01       	movw	r30, r16
    3b72:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	28 2f       	mov	r18, r24
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7e:	fc 01       	movw	r30, r24
    3b80:	e2 0f       	add	r30, r18
    3b82:	f3 1f       	adc	r31, r19
    3b84:	80 81       	ld	r24, Z
    3b86:	88 23       	and	r24, r24
    3b88:	31 f7       	brne	.-52     	; 0x3b56 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	28 2f       	mov	r18, r24
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	9b 81       	ldd	r25, Y+3	; 0x03
    3b94:	fc 01       	movw	r30, r24
    3b96:	e2 0f       	add	r30, r18
    3b98:	f3 1f       	adc	r31, r19
    3b9a:	10 82       	st	Z, r1
}
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <__divmodhi4>:
    3bac:	97 fb       	bst	r25, 7
    3bae:	09 2e       	mov	r0, r25
    3bb0:	07 26       	eor	r0, r23
    3bb2:	0a d0       	rcall	.+20     	; 0x3bc8 <__divmodhi4_neg1>
    3bb4:	77 fd       	sbrc	r23, 7
    3bb6:	04 d0       	rcall	.+8      	; 0x3bc0 <__divmodhi4_neg2>
    3bb8:	2e d0       	rcall	.+92     	; 0x3c16 <__udivmodhi4>
    3bba:	06 d0       	rcall	.+12     	; 0x3bc8 <__divmodhi4_neg1>
    3bbc:	00 20       	and	r0, r0
    3bbe:	1a f4       	brpl	.+6      	; 0x3bc6 <__divmodhi4_exit>

00003bc0 <__divmodhi4_neg2>:
    3bc0:	70 95       	com	r23
    3bc2:	61 95       	neg	r22
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255

00003bc6 <__divmodhi4_exit>:
    3bc6:	08 95       	ret

00003bc8 <__divmodhi4_neg1>:
    3bc8:	f6 f7       	brtc	.-4      	; 0x3bc6 <__divmodhi4_exit>
    3bca:	90 95       	com	r25
    3bcc:	81 95       	neg	r24
    3bce:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd0:	08 95       	ret

00003bd2 <__udivmodsi4>:
    3bd2:	a1 e2       	ldi	r26, 0x21	; 33
    3bd4:	1a 2e       	mov	r1, r26
    3bd6:	aa 1b       	sub	r26, r26
    3bd8:	bb 1b       	sub	r27, r27
    3bda:	fd 01       	movw	r30, r26
    3bdc:	0d c0       	rjmp	.+26     	; 0x3bf8 <__udivmodsi4_ep>

00003bde <__udivmodsi4_loop>:
    3bde:	aa 1f       	adc	r26, r26
    3be0:	bb 1f       	adc	r27, r27
    3be2:	ee 1f       	adc	r30, r30
    3be4:	ff 1f       	adc	r31, r31
    3be6:	a2 17       	cp	r26, r18
    3be8:	b3 07       	cpc	r27, r19
    3bea:	e4 07       	cpc	r30, r20
    3bec:	f5 07       	cpc	r31, r21
    3bee:	20 f0       	brcs	.+8      	; 0x3bf8 <__udivmodsi4_ep>
    3bf0:	a2 1b       	sub	r26, r18
    3bf2:	b3 0b       	sbc	r27, r19
    3bf4:	e4 0b       	sbc	r30, r20
    3bf6:	f5 0b       	sbc	r31, r21

00003bf8 <__udivmodsi4_ep>:
    3bf8:	66 1f       	adc	r22, r22
    3bfa:	77 1f       	adc	r23, r23
    3bfc:	88 1f       	adc	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	1a 94       	dec	r1
    3c02:	69 f7       	brne	.-38     	; 0x3bde <__udivmodsi4_loop>
    3c04:	60 95       	com	r22
    3c06:	70 95       	com	r23
    3c08:	80 95       	com	r24
    3c0a:	90 95       	com	r25
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	ac 01       	movw	r20, r24
    3c10:	bd 01       	movw	r22, r26
    3c12:	cf 01       	movw	r24, r30
    3c14:	08 95       	ret

00003c16 <__udivmodhi4>:
    3c16:	aa 1b       	sub	r26, r26
    3c18:	bb 1b       	sub	r27, r27
    3c1a:	51 e1       	ldi	r21, 0x11	; 17
    3c1c:	07 c0       	rjmp	.+14     	; 0x3c2c <__udivmodhi4_ep>

00003c1e <__udivmodhi4_loop>:
    3c1e:	aa 1f       	adc	r26, r26
    3c20:	bb 1f       	adc	r27, r27
    3c22:	a6 17       	cp	r26, r22
    3c24:	b7 07       	cpc	r27, r23
    3c26:	10 f0       	brcs	.+4      	; 0x3c2c <__udivmodhi4_ep>
    3c28:	a6 1b       	sub	r26, r22
    3c2a:	b7 0b       	sbc	r27, r23

00003c2c <__udivmodhi4_ep>:
    3c2c:	88 1f       	adc	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	5a 95       	dec	r21
    3c32:	a9 f7       	brne	.-22     	; 0x3c1e <__udivmodhi4_loop>
    3c34:	80 95       	com	r24
    3c36:	90 95       	com	r25
    3c38:	bc 01       	movw	r22, r24
    3c3a:	cd 01       	movw	r24, r26
    3c3c:	08 95       	ret

00003c3e <__prologue_saves__>:
    3c3e:	2f 92       	push	r2
    3c40:	3f 92       	push	r3
    3c42:	4f 92       	push	r4
    3c44:	5f 92       	push	r5
    3c46:	6f 92       	push	r6
    3c48:	7f 92       	push	r7
    3c4a:	8f 92       	push	r8
    3c4c:	9f 92       	push	r9
    3c4e:	af 92       	push	r10
    3c50:	bf 92       	push	r11
    3c52:	cf 92       	push	r12
    3c54:	df 92       	push	r13
    3c56:	ef 92       	push	r14
    3c58:	ff 92       	push	r15
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	ca 1b       	sub	r28, r26
    3c68:	db 0b       	sbc	r29, r27
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	09 94       	ijmp

00003c76 <__epilogue_restores__>:
    3c76:	2a 88       	ldd	r2, Y+18	; 0x12
    3c78:	39 88       	ldd	r3, Y+17	; 0x11
    3c7a:	48 88       	ldd	r4, Y+16	; 0x10
    3c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c80:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c82:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c84:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c86:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c88:	b9 84       	ldd	r11, Y+9	; 0x09
    3c8a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c8c:	df 80       	ldd	r13, Y+7	; 0x07
    3c8e:	ee 80       	ldd	r14, Y+6	; 0x06
    3c90:	fd 80       	ldd	r15, Y+5	; 0x05
    3c92:	0c 81       	ldd	r16, Y+4	; 0x04
    3c94:	1b 81       	ldd	r17, Y+3	; 0x03
    3c96:	aa 81       	ldd	r26, Y+2	; 0x02
    3c98:	b9 81       	ldd	r27, Y+1	; 0x01
    3c9a:	ce 0f       	add	r28, r30
    3c9c:	d1 1d       	adc	r29, r1
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	ed 01       	movw	r28, r26
    3caa:	08 95       	ret

00003cac <_exit>:
    3cac:	f8 94       	cli

00003cae <__stop_program>:
    3cae:	ff cf       	rjmp	.-2      	; 0x3cae <__stop_program>
